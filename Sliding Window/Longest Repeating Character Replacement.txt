Create a flexible sliding window through out, decrease length of window if len(window) - occurences of most common letter in window > k
1. Initialize left and right pointers, and an empty dict and a longest var to calc longest substring
2. Loop right pter through the string
3. if length of window if len(window) - occurences of most common letter in window > k, then decrease window by left++ and 
    remove its occurence value from the dict to accurately track
4. else, we now know thw sliding window is too small or right size, so we increment right pointer
    add that new letter to the dict if not alr existing, else just increments its values
5. update longest to be max of itself and the length of current window
6. return longest outside the loop








def characterReplacement(self, s: str, k: int) -> int:
        left = 0
        right = 0
        longest = 0
        d = {}
        d.update({s[0]:1})
        while right < len(s):
            if (right - left+1) - max(d.values()) > k:
                d[s[left]] = d[s[left]] - 1 
                left = left + 1
            else:
                right = right + 1
                if right < len(s):
                    if s[right] not in d.keys():
                        d.update({s[right]:1})
                    else:
                        d[s[right]] = d[s[right]] + 1
            longest = max(longest, right-left)
        return longest