import base64
import fpga
import j_fp_vco
import json
import numpy as np
import os
import shutil
import tempfile
import threading
import time

from datetime import datetime as dt
from flask import jsonify, render_template, request
from flask_login import login_required
from moviepy.editor import ImageSequenceClip
from PIL import Image
from tkinter import filedialog, Tk

from app import socketio
from app.device import blueprint
from app.utils import (
    basedir,
    get_calibrate_plot,
    get_dir_name,
    get_plot,
    get_plot_live_feed,
    get_settings,
    logs,
    update_settings,
    set_dir_name
)


freq_sweep_file_name = "frequency_sweep.json"
settings_file_name = "settings.json"
maindirname = f"{basedir}/Desktop/GeegahData"
try:
    settings = get_settings()
    maindirname = settings.get("file_location") or maindirname
except:
    pass

savedirname = maindirname
rawdata_save_dir = f"{savedirname}/rawdata"
img_save_dir = f"{savedirname}/images"
vid_save_dir = f"{savedirname}/video"
csv_save_dir = f"{savedirname}/csv"
tmp_dir = tempfile.gettempdir()

bit_file_name = "xem7305_GG216.bit"

FREQ = 1853.0
OUTEN = 1
PSET = 3
ADC_TO_USE = 0

TERM_COUNT = 83
TX_SWITCH_EN_SETTINGS = (0, 19, 42, 19, 42)
PULSE_AND_SETTINGS = (0, 20, 42, 20, 42)
RX_SWITCH_EN_SETTINGS = (0, 42, 82, 42, 82)
GLOB_EN_SETTINGS = (1, 71, 1023, 71, 1023)
LO_CTRL_SETTINGS = (1, 1023, 1023, 42, 1023)
ADC_CAP_SETTINGS = (0, 80, 81, 80, 81)

DAC_VOLTAGE = 2.8

baseADC2_file_name = f"{savedirname}/baseADC2.dat"
baseADC_data = None
measdata_file_name = f"{savedirname}/output.dat"
byte_data = None

I_BASE_ADC = None
Q_BASE_ADC = None
I_BASE_VOLTS = None
Q_BASE_VOLTS = None
I_ADC = None
Q_ADC = None
I_VOLTS = None
Q_VOLTS = None

is_calibrate = False
is_live_feed = False
is_replay = False
num_frames_to_image = 100
replay_frame = 0


@blueprint.route("/initializefpga", methods=["POST"])
def initialize_fpga():

    _json = request.get_json(force=True)
    logs(_json, "Initializing...")

    _return = {"status": 200}

    xem = fpga.fpga()

    set_project(_json)

    initialize_directories()
    socketio.emit("initialize", {"is_set_directories": True})

    if get_xem(_json, True, xem):
        socketio.emit("initialize", {"is_xem": True})

        set_vco(_json, True, xem)
        socketio.emit("initialize", {"is_set_vco": True})

        set_pulse_timing(_json, True, xem)
        socketio.emit("initialize", {"is_set_pulse_timing": True})

        set_dac(_json, True, xem)
        socketio.emit("initialize", {"is_set_dac": True})

        save_air_data(_json, True, xem)
        socketio.emit("initialize", {"is_air_data": True})

        acquire_single_frame(_json, True, xem)
        socketio.emit("initialize", {"is_single_frame": True})

        _return.update({
            k: _json.get(k)
            for k in ("board", "serial_number", "sys_clock", "version")
        })

        _return["message"] = "Initializing... DONE."
    else:
        _return["status"] = 500
        _return["message"] = "Initializing... FAILED."

    xem.Close()
    time.sleep(0.05)

    logs(_json, _return["message"])

    return jsonify(_return)


@blueprint.route("/setproject", methods=["POST"])
def set_project(data={}):

    if data:
        _json = data
    else:
        _json = request.get_json(force=True)
        logs(_json, "Setting project...")

    _return = {"status": 200}

    global savedirname

    project_name = _json.get("project_name") or ""
    project_number = _json.get("project_number") or ""

    project = project_name + project_number

    savedirname = maindirname
    if project:
        savedirname += f"/{project}"

    if project and not os.path.exists(savedirname):
        os.mkdir(savedirname)

    initialize_directories()

    _return["message"] = "Setting project... DONE."
    if not data:
        logs(_json, _return["message"])

    return jsonify(_return)


@blueprint.route("/getfilelocation", methods=["POST"])
def get_file_location():

    global maindirname

    _return = {"status": 200}

    _json = get_settings()
    file_location = _json.get("file_location")

    if not (file_location and os.path.exists(file_location)):
        file_location = f"{os.environ['HOMEPATH']}/Desktop/GeegahData"
        if not os.path.exists(file_location):
            os.mkdir(file_location)

        _json["file_location"] = file_location
        with open(settings_file_name, "w") as f:
            json.dump(_json, f, indent=4)

    maindirname = file_location

    _return["file_location"] = file_location

    return jsonify(_return)


@blueprint.route("/setfilelocation", methods=["POST"])
def set_file_location():

    global maindirname

    _return = {"status": 200}

    try:
        root = Tk()
        root.withdraw()
        file_location = filedialog.askdirectory()
        root.destroy()

        if not file_location:
            return jsonify(_return)

        # Get settings.json
        _json = get_settings()

        # Update directory in settings.json
        _json["file_location"] = file_location
        with open(settings_file_name, "w") as f:
            json.dump(_json, f, indent=4)

        maindirname = file_location
        initialize_directories()

        _return["file_location"] = file_location
    except:
        _return["status"] = 500
        _return["message"] = "Failed to open dialog."

    return jsonify(_return)


@blueprint.route("/getxem", methods=["POST"])
def get_xem(data={}, is_init=False, xem=None):

    if data :
        _json = data
    else:
        _json = request.get_json(force=True)
        logs(_json, "Finding XEM...")

    _return = {"status": 200}

    xem = xem if is_init else fpga.fpga()

    board_info = {
        "board": xem.BoardName(),
        "serial_number": "",
        "sys_clock": "",
        "version": ""
    }

    if board_info["board"] != "XEM7305":
        if not is_init:
            xem.Close()

        if data:
            return False

        _return["status"] = 500
        _return["message"] = "Finding XEM... FAILED."
        logs(_json, _return["message"])

        return jsonify(_return)

    xem.Configure(bit_file_name)

    board_info["board"] = "{} {}" .format(xem.di.deviceID, xem.di.serialNumber)
    board_info["serial_number"] = xem.SerialNumber()
    board_info["sys_clock"] = "{:8.4f} MHz".format(xem.SysclkMHz())
    board_info["version"] = xem.Version()
    _json.update(board_info)

    if not is_init:
        xem.Close()

    try:
        settings = get_settings()
        settings.update(board_info)

        with open(settings_file_name, "w") as f:
            json.dump(settings, f, indent=4)
    except:
        pass

    if data:
        return True

    _return.update(board_info)

    _return["message"] = "Finding XEM... DONE."
    logs(_json, _return["message"])

    return jsonify(_return)


@blueprint.route("/setvco", methods=["POST"])
def set_vco(data={}, is_init=False, xem=None):

    if data:
        _json = data
    else:
        _json = request.get_json(force=True)
        logs(_json, "Setting VCO...")

    _return = {"status": 200}

    xem = xem if is_init else fpga.fpga()

    global FREQ, PSET, ADC_TO_USE

    FREQ = float(_json.get("frequency", FREQ))
    PSET = int(_json.get("power_setting", PSET))
    ADC_TO_USE = int(_json.get("adc", ADC_TO_USE))

    try:
        j_fp_vco.configureVCO(xem, FREQ, OUTEN, PSET)
        _return["message"] = "Setting VCO... DONE."
    except:
        _return["status"] = 500
        _return["message"] = "Setting VCO... FAILED."

    if not is_init:
        xem.Close()

    update_settings({
        "settings": {
            "frequency": FREQ,
            "power_setting": PSET,
            "adc": ADC_TO_USE
        }
    })

    if not data:
        logs(_json, _return["message"])

        return jsonify(_return)


@blueprint.route("/setpulsetiming", methods=["POST"])
def set_pulse_timing(data={}, is_init=False, xem=None):

    if data:
        _json = data
    else:
        _json = request.get_json(force=True)
        logs(_json, "Setting pulse timing...")

    _return = {"status": 200}

    xem = xem if is_init else fpga.fpga()

    global TX_SWITCH_EN_SETTINGS, PULSE_AND_SETTINGS, RX_SWITCH_EN_SETTINGS
    global GLOB_EN_SETTINGS, LO_CTRL_SETTINGS, ADC_CAP_SETTINGS

    TX_SWITCH_EN_SETTINGS = _json.get("TX_Switch En", TX_SWITCH_EN_SETTINGS)
    TX_SWITCH_EN_SETTINGS = tuple(TX_SWITCH_EN_SETTINGS)
    PULSE_AND_SETTINGS = _json.get("Pulse_And", PULSE_AND_SETTINGS)
    PULSE_AND_SETTINGS = tuple(PULSE_AND_SETTINGS)
    RX_SWITCH_EN_SETTINGS = _json.get("RX_Switch En", RX_SWITCH_EN_SETTINGS)
    RX_SWITCH_EN_SETTINGS = tuple(RX_SWITCH_EN_SETTINGS)
    GLOB_EN_SETTINGS = _json.get("Global En", GLOB_EN_SETTINGS)
    GLOB_EN_SETTINGS = tuple(GLOB_EN_SETTINGS)
    LO_CTRL_SETTINGS = _json.get("LO Ctrl", LO_CTRL_SETTINGS)
    LO_CTRL_SETTINGS = tuple(LO_CTRL_SETTINGS)
    ADC_CAP_SETTINGS = _json.get("ADC Capture", ADC_CAP_SETTINGS)
    ADC_CAP_SETTINGS = tuple(ADC_CAP_SETTINGS)

    try:
        configure_pulse_timing(xem)
        _return["message"] = "Setting pulse timing... DONE."
    except:
        _return["status"] = 500
        _return["message"] = "Setting pulse timing... FAILED."

    if not is_init:
        xem.Close()

    update_settings({
        "settings": {
            "cp1": ADC_CAP_SETTINGS[0],
            "cp2": ADC_CAP_SETTINGS[1],
            "cp3": ADC_CAP_SETTINGS[2],
            "cp4": ADC_CAP_SETTINGS[3],
            "cp5": ADC_CAP_SETTINGS[4],
            "gl1": GLOB_EN_SETTINGS[0],
            "gl2": GLOB_EN_SETTINGS[1],
            "gl3": GLOB_EN_SETTINGS[2],
            "gl4": GLOB_EN_SETTINGS[3],
            "gl5": GLOB_EN_SETTINGS[4],
            "lo1": LO_CTRL_SETTINGS[0],
            "lo2": LO_CTRL_SETTINGS[1],
            "lo3": LO_CTRL_SETTINGS[2],
            "lo4": LO_CTRL_SETTINGS[3],
            "lo5": LO_CTRL_SETTINGS[4],
            "pa1": PULSE_AND_SETTINGS[0],
            "pa2": PULSE_AND_SETTINGS[1],
            "pa3": PULSE_AND_SETTINGS[2],
            "pa4": PULSE_AND_SETTINGS[3],
            "pa5": PULSE_AND_SETTINGS[4],
            "rx1": RX_SWITCH_EN_SETTINGS[0],
            "rx2": RX_SWITCH_EN_SETTINGS[1],
            "rx3": RX_SWITCH_EN_SETTINGS[2],
            "rx4": RX_SWITCH_EN_SETTINGS[3],
            "rx5": RX_SWITCH_EN_SETTINGS[4],
            "tx1": TX_SWITCH_EN_SETTINGS[0],
            "tx2": TX_SWITCH_EN_SETTINGS[1],
            "tx3": TX_SWITCH_EN_SETTINGS[2],
            "tx4": TX_SWITCH_EN_SETTINGS[3],
            "tx5": TX_SWITCH_EN_SETTINGS[4]
        }
    })

    if not data:
        logs(_json, _return["message"])

        return jsonify(_return)


@blueprint.route("/saveairdata", methods=["POST"])
def save_air_data(data={}, is_init=False, xem=None):

    if data:
        _json = data
    else:
        _json = request.get_json(force=True)
        logs(_json, "Saving air data...")

    _return = {"status": 200}

    xem = xem if is_init else fpga.fpga()

    if not is_init:
       set_project(_json)

    global baseADC_data

    try:
        baseADC_data = j_fp_vco.acqSingleFrame(
            xem,
            ADC_TO_USE,
            baseADC2_file_name
        )
        baseADC_data = j_fp_vco.acqSingleFrame(
            xem,
            ADC_TO_USE,
            baseADC2_file_name
        )
        _return["message"] = "Saving air data... DONE."
    except:
        _return["status"] = 500
        _return["message"] = "Saving air data... FAILED."

    if not is_init:
        xem.Close()

    if not data:
        logs(_json, _return["message"])

        return jsonify(_return)


@blueprint.route("acquiresingleframe", methods=["POST"])
def acquire_single_frame(data={}, is_init=False, xem=None):

    if data:
        _json = data
    else:
        _json = request.get_json(force=True)
        logs(_json, "Taking single frame...")

    _return = {"status": 200}

    xem = xem if is_init else fpga.fpga()

    if not is_init:
       set_project(_json)

    global byte_data

    try:
        byte_data = j_fp_vco.acqSingleFrame(
            xem,
            ADC_TO_USE,
            measdata_file_name
        )
        _return["message"] = "Taking single frame... DONE."
    except:
        _return["status"] = 500
        _return["message"] = "Taking single frame... FAILED."

    if not is_init:
        xem.Close()

    if not data:
        logs(_json, _return["message"])

        return jsonify(_return)


@blueprint.route("/acquirenframes", methods=["POST"])
def acquire_n_frames(data={}, is_init=False, xem=None):

    if data:
        _json = data
    else:
        _json = request.get_json(force=True)
        logs(_json, "Taking N frames...")

    _return = {"status": 200}

    xem = xem if is_init else fpga.fpga()

    if not is_init:
       set_project(_json)

    global I_BASE_ADC, Q_BASE_ADC, I_BASE_VOLTS, Q_BASE_VOLTS
    global I_ADC, Q_ADC, I_VOLTS, Q_VOLTS
    global baseADC_data, byte_data, num_frames_to_image

    try:
        if not baseADC_data:
            baseADC_data = j_fp_vco.acqSingleFrame(
                xem,
                ADC_TO_USE,
                baseADC2_file_name
            )

        base = j_fp_vco.convertByteToADCVOLTS(baseADC_data)
        I_BASE_ADC, Q_BASE_ADC, I_BASE_VOLTS, Q_BASE_VOLTS = base

        if not byte_data:
            byte_data = j_fp_vco.acqSingleFrame(
                xem,
                ADC_TO_USE,
                measdata_file_name
            )

        image = j_fp_vco.convertByteToADCVOLTS(byte_data)
        I_ADC, Q_ADC, I_VOLTS, Q_VOLTS = image

        num_frames_to_image = _json.get(
            "num_frames_to_image",
            num_frames_to_image
        )

        j_fp_vco.saveDataCSVS(
            f"{savedirname}/csv/",
            I_ADC,
            Q_ADC,
            I_VOLTS,
            Q_VOLTS,
            I_BASE_ADC,
            Q_BASE_ADC,
            I_BASE_VOLTS,
            Q_BASE_VOLTS
        )

        j_fp_vco.imageNFrames(
            xem,
            num_frames_to_image,
            baseADC_data,
            f"{rawdata_save_dir}/",
            ADC_TO_USE
        )
        _return["message"] = "Taking N frames... DONE."
    except:
        _return["status"] = 500
        _return["message"] = "Taking N frames... FAILED."

    if not is_init:
        xem.Close()

    if not data:
        logs(_json, _return["message"])

        return jsonify(_return)


@blueprint.route("/live-feed")
@login_required
def live_feed():

    reset_actions()

    try:
        with open("settings.json", "r") as f:
            settings = json.loads(f.read())
    except:
        settings = {}

    return render_template(
        "home/live_feed.html",
        segment="live-feed",
        settings=settings
    )


@blueprint.route("/startlivefeed", methods=["POST"])
def start_live_feed():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    global is_live_feed

    if not is_live_feed:
        is_live_feed = True

        # Get base data
        base_data = get_base_data(_json)
        if type(base_data) == str:
            is_live_feed = False
            _return["status"] = 500
            _return["message"] = base_data
            return jsonify(_return)

        thread = threading.Thread(
            target=send_live_feed,
            args=(_json, base_data)
        )
        thread.start()

    return jsonify(_return)


@blueprint.route("/stoplivefeed", methods=["POST"])
def stop_live_feed():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    global is_live_feed

    if is_live_feed:
        is_live_feed = False

    return jsonify(_return)


def send_live_feed(data, base_data):

    # Instantiate XEM
    xem = fpga.fpga()
    xem.Close()

    # Get parameters
    end_frequency = data.get("end_frequency") or 0
    frame_interval = data.get("frame_interval") or 0
    frequency_interval = data.get("frequency_interval") or 0
    image_type = data.get("image_type") or "IQ"
    is_frequency_sweep = data.get("is_frequency_sweep")
    is_no_echo = data.get("is_no_echo")
    is_record = data.get("is_record")
    start_frequency = data.get("start_frequency") or 0
    vmax = data.get("vmax") or 0
    vmin = data.get("vmin") or 0

    project_name = data.get("project_name") or ""
    project_number = data.get("project_number") or ""
    project = project_name + project_number
    timestamp = dt.now().strftime("%Y-%m-%d %H-%M-%S")

    # Create record directory
    if is_record:
        main_dirname = get_dir_name(data, maindirname)
        rec_dirname = main_dirname
        rec_dirname += "/livefeed"
        if data.get("record_directory"):
            rec_dirname += f"/{data['record_directory']}"

            if not os.path.exists(rec_dirname):
                os.mkdir(rec_dirname)


        if not os.path.exists(rec_dirname):
            os.mkdir(rec_dirname)

        rec_dirname += f"/{timestamp}"
        if not os.path.exists(rec_dirname):
            os.mkdir(rec_dirname)

        for dn in ("echo", "no-echo"):
            _dn = f"{rec_dirname}/{dn}"
            if not os.path.exists(_dn):
                os.mkdir(_dn)

        with open(f"{rec_dirname}/frequency_sweep.json", "w") as f:
            data["frequency"] = FREQ
            json.dump(data, f, indent=4)

        # Copy baseADC2 to recording directory
        try:
            shutil.copy(f"{main_dirname}/baseADC2.dat", rec_dirname)
        except:
            pass

        # Get base no-echo
        if is_no_echo:
            # Set pulse timing to no-echo
            xem.Open()
            configure_pulse_timing(xem, True)
            xem.Close()

            # Save no-echo frame for air data
            filename = f"{rec_dirname}/baseADC2-no-echo.dat"
            j_fp_vco.acqSingleFrame(xem, ADC_TO_USE, filename)

            # Set pulse timing back to echo
            xem.Open()
            configure_pulse_timing(xem)
            xem.Close()

    _frequency = FREQ
    frequency = start_frequency
    frame_number = 1

    if not is_frequency_sweep:
        frequency_interval = 0
        if not frequency:
            frequency = _frequency
            xem.Open()
            j_fp_vco.configureVCO(xem, _frequency, OUTEN, PSET)
            xem.Close()

    while is_live_feed:
        if frequency and _frequency != frequency:
            _frequency = frequency
            xem.Open()
            j_fp_vco.configureVCO(xem, _frequency, OUTEN, PSET)
            xem.Close()

        # Save no-echo frame
        if is_record and is_no_echo:
            # Set pulse timing to no-echo
            xem.Open()
            configure_pulse_timing(xem, True)
            xem.Close()

            # Get no-echo frame
            no_echo = j_fp_vco.acqSingleFrame(xem, ADC_TO_USE)

            # Get no-echo I and Q
            _no_echo = j_fp_vco.convertByteToADCVOLTS(no_echo)
            NE_I_ADC, NE_Q_ADC, NE_I_VOLTS, NE_Q_VOLTS = _no_echo

            _dn = f"{rec_dirname}/no-echo"
            i_file = f"{_dn}/{project}_I_{frame_number}_{timestamp}.dat"
            with open(i_file, "ab") as f:
                f.write(NE_I_VOLTS)

            q_file = f"{_dn}/{project}_Q_{frame_number}_{timestamp}.dat"
            with open(q_file, "ab") as f:
                f.write(NE_Q_VOLTS)

            # Set pulse timing back to echo
            xem.Open()
            configure_pulse_timing(xem)
            xem.Close()

        byte_data = j_fp_vco.acqSingleFrame(
            xem,
            ADC_TO_USE
        )

        _return = get_plot_live_feed(
            base_data,
            byte_data,
            [["I_DIFF", "Q_DIFF"]],
            True,
            vmin,
            vmax,
            i_mid=data.get("i_mid"),
            q_mid=data.get("i_mid"),
            scale=data.get("scale"),
            shift=data.get("shift"),
            to_adjust=data.get("to_adjust"),
            title=f"Frequency: {_frequency:.2f} MHz, Frame: {frame_number}\n",
            image_type=image_type
        )
        _fig, I_VOLTS, Q_VOLTS = _return

        if is_record:
            _dn = f"{rec_dirname}/echo"
            i_file = f"{_dn}/{project}_I_{frame_number}_{timestamp}.dat"
            with open(i_file, "ab") as f:
                f.write(I_VOLTS)

            q_file = f"{_dn}/{project}_Q_{frame_number}_{timestamp}.dat"
            with open(q_file, "ab") as f:
                f.write(Q_VOLTS)

        _fig.read()
        encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
        _fig.close()

        img_json = {
            "action": "live_feed",
            "data": encoded,
            "frame_number": frame_number,
            "frequency": frequency,
            "rpi_serial": data.get("rpi_serial"),
            "status": 200
        }

        if is_live_feed:
            socketio.emit("live_feed", img_json)

        frame_number += 1

        if frequency_interval:
            frequency += frequency_interval / 1000
            if frequency > end_frequency:
                frequency = start_frequency

        if frame_interval:
            time.sleep(frame_interval)


@blueprint.route("/replay")
@login_required
def replay():

    reset_actions()

    return render_template(
        "home/replay.html",
        segment="replay"
    )


@blueprint.route("/playreplay", methods=["POST"])
def play_replay():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    global is_replay

    if not is_replay:
        is_replay = True

        # Get base data
        base_data = get_base_data(_json)
        if type(base_data) == str:
            is_replay = False
            _return["status"] = 500
            _return["message"] = base_data
            return jsonify(_return)

        thread = threading.Thread(
            target=send_replay,
            args=(_json, base_data)
        )
        thread.start()

    return jsonify(_return)


@blueprint.route("/pausereplay", methods=["POST"])
def pause_replay():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    global is_replay

    if is_replay:
        is_replay = False

    return jsonify(_return)


def send_replay(data, base_data):

    global is_replay, replay_frame

    # Instantiate XEM
    xem = fpga.fpga()
    xem.Close()

    # Get parameters
    end_frame = data.get("end_frame") or 0
    frame_number = data.get("frame_number")
    recording = data.get("recording")

    replay_frame = frame_number or 1
    frequency, frequency_interval, vmax, vmin = 0, 0, 0, 0
    i_mid, q_mid, scale, shift, to_adjust = None, None, 1, 0, "I"

    # Check if recording exists
    _files, timestamp = [], ""
    if recording and os.path.exists(recording):
        timestamp = recording.replace("\\", "/").split("/")[-2]
        for (root, dirs, files) in os.walk(recording):
            for _file in files:
                if f"{timestamp}.dat" in _file:
                    _files.append(_file)
                    break

        base = f"{recording}/baseADC2.dat"
        if os.path.exists(base):
            with open(base, "rb") as f:
                base_data = f.read()

        frequency_sweep = get_frequency_sweep(recording)
        frequency, frequency_interval, vmax, vmin = frequency_sweep[:4]
        i_mid, q_mid, scale, shift, to_adjust = frequency_sweep[4:]
    else:
        is_replay = False
        socketio.emit("replay", {"is_end_frame": True})

    project = ""
    if _files:
        project = "_".join(_files[0].split("_")[:-3])
    elif is_replay:
        is_replay = False
        socketio.emit("replay", {"is_end_frame": True})

    while is_replay:
        _frame_number = replay_frame
        replay_frame += 1

        _frequency = 0
        if frequency:
            _frequency = frequency + (frequency_interval*(_frame_number-1)/1000)

        encoded = get_replay_plot(
            base_data,
            recording,
            project,
            timestamp,
            _frame_number,
            vmin,
            vmax,
            i_mid,
            q_mid,
            scale,
            shift,
            to_adjust,
            title=f"Frequency: {_frequency:.2f} MHz, Frame: {_frame_number}\n"
        )
        img_json = {
            "action": "replay",
            "data": encoded,
            "frame_number": _frame_number,
            "rpi_serial": data.get("rpi_serial"),
            "status": 200
        }

        if is_replay:
            if replay_frame > end_frame:
                img_json["is_end_frame"] = True
                is_replay = False

            socketio.emit("replay", img_json)

        time.sleep(0.5)


@blueprint.route("/gotoreplayframe", methods=["POST"])
def goto_replay_frame():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    # Get data from json
    frame_number = _json.get("frame_number") or 0
    is_playing = _json.get("is_playing")
    recording = _json.get("recording")

    global replay_frame

    replay_frame = frame_number

    # Get base data
    base_data = get_base_data(_json)
    if type(base_data) == str:
        _return["status"] = 500
        _return["message"] = "Missing base data."
        return jsonify(_return)

    if recording and os.path.exists(recording) and not is_playing:
        file_name = ""
        timestamp = recording.replace("\\", "/").split("/")[-2]
        for (root, dirs, files) in os.walk(recording):
            for _file in files:
                if f"{timestamp}.dat" in _file:
                    file_name = _file
                    break

        frequency_sweep = get_frequency_sweep(recording)
        frequency, frequency_interval, vmax, vmin = frequency_sweep[:4]
        i_mid, q_mid, scale, shift, to_adjust = frequency_sweep[4:]

        _frequency = 0
        if frequency:
            _frequency = frequency + (frequency_interval*(frame_number-1)/1000)

        project = "_".join(file_name.split("_")[:-3]) if file_name else ""
        encoded = get_replay_plot(
            base_data,
            recording,
            project,
            timestamp,
            frame_number,
            vmin,
            vmax,
            i_mid,
            q_mid,
            scale,
            shift,
            to_adjust,
            title=f"Frequency: {_frequency:.2f} MHz, Frame: {frame_number}\n"
        )
        img_json = {
            "action": "replay",
            "data": encoded,
            "frame_number": replay_frame,
            "rpi_serial": _json.get("rpi_serial"),
            "status": 200
        }
        socketio.emit("replay", img_json)

    return jsonify(_return)


@blueprint.route("/recordmovie", methods=["POST"])
def record_movie():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    # Get data from json
    end_frame = _json.get("end_frame") or 0
    recording = _json.get("recording")
    start_frame = _json.get("start_frame") or 1

    # Get base data
    base_data = get_base_data(_json)
    if type(base_data) == str:
        _return["status"] = 500
        _return["message"] = "Missing base data."
        return jsonify(_return)

    if recording and os.path.exists(recording):
        _files, file_name = [], ""
        timestamp = recording.replace("\\", "/").split("/")[-1]
        for (root, dirs, files) in os.walk(recording):
            for _file in files:
                if f"{timestamp}.dat" in _file and _file.split("_")[-3] == "I":
                    _files.append(f"{root}/{_file}")
                    file_name = _file

        videos_dir = f"{recording}/videos"
        if not os.path.exists(videos_dir):
            os.mkdir(videos_dir)

        frequency_sweep = get_frequency_sweep(recording)
        frequency, frequency_interval, vmax, vmin = frequency_sweep[:4]
        i_mid, q_mid, scale, shift, to_adjust = frequency_sweep[4:]

        _tmp_dir = f"{tmp_dir}/{int(time.time())}"
        if not os.path.exists(_tmp_dir):
            os.mkdir(_tmp_dir)

        images, _end_frame, _start_frame = [], "", ""
        project = "_".join(file_name.split("_")[:-3]) if file_name else ""

        _files = sorted(_files, key=lambda x: int(x.split("_")[-2]))
        for i, _file in enumerate(_files):
            _frame_number = int(_file.split("_")[-2])
            if end_frame and start_frame \
                    and not (start_frame <= _frame_number <= end_frame):
                continue

            if i:
                _end_frame = _frame_number
            else:
                _start_frame = _frame_number

            _frequency = frequency + (frequency_interval*(_frame_number-1)/1000)

            _file_name = f"{_tmp_dir}/{project}_{_frame_number}_{timestamp}.png"
            status = get_replay_plot(
                base_data,
                recording,
                project,
                timestamp,
                _frame_number,
                vmin,
                vmax,
                i_mid,
                q_mid,
                scale,
                shift,
                to_adjust,
                title=f"Frequency: {_frequency:.2f} MHz, Frame: {_frame_number}\n",
                file_name=_file_name
            )
            if os.path.exists(_file_name):
                images.append(_file_name)

        if images:
            if not (end_frame and start_frame):
                end_frame = _end_frame
                start_frame = _start_frame

            _file_name = f"{videos_dir}/Frame_{start_frame}_{end_frame}_"
            _file_name += f"{dt.now().strftime('%Y-%m-%d %H-%M-%S')}.mp4"
            clip = ImageSequenceClip(images, fps=1)
            clip.write_videofile(
                _file_name,
                codec="mpeg4",
                audio=False,
                fps=1,
                verbose=False,
                logger=None
            )

            try:
                shutil.rmtree(_tmp_dir)
            except:
                pass

    return jsonify(_return)


@blueprint.route("/recordimage", methods=["POST"])
def record_image():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    # Get data from json
    frame_number = _json.get("frame_number") or 0
    recording = _json.get("recording")

    # Get base data
    base_data = get_base_data(_json)
    if type(base_data) == str:
        _return["status"] = 500
        _return["message"] = "Missing base data."
        return jsonify(_return)

    if recording and os.path.exists(recording):
        file_name = ""
        timestamp = recording.replace("\\", "/").split("/")[-1]
        for (root, dirs, files) in os.walk(recording):
            for _file in files:
                if f"{timestamp}.dat" in _file:
                    file_name = _file
                    break

        images_dir = f"{recording}/images"
        if not os.path.exists(images_dir):
            os.mkdir(images_dir)

        frequency_sweep = get_frequency_sweep(recording)
        frequency, frequency_interval, vmax, vmin = frequency_sweep[:4]
        i_mid, q_mid, scale, shift, to_adjust = frequency_sweep[4:]

        _frequency = 0
        if frequency:
            _frequency = frequency + (frequency_interval*(frame_number-1)/1000)

        project = "_".join(file_name.split("_")[:-3]) if file_name else ""
        _file_name = f"{images_dir}/{project}_{frame_number}_{timestamp}.png"
        status = get_replay_plot(
            base_data,
            recording,
            project,
            timestamp,
            frame_number,
            vmin,
            vmax,
            i_mid,
            q_mid,
            scale,
            shift,
            title=f"Frequency: {_frequency:.2f} MHz, Frame: {frame_number}\n",
            file_name=_file_name
        )
        if status == 200:
            _return["message"] = "File successfully saved."
        else:
            _return["status"] = 500
            _return["message"] = "Failed to record image."

    return jsonify(_return)


def get_replay_plot(
    base_data, recording, project, timestamp, frame_number, vmin=0, vmax=0,
    i_mid=None, q_mid=None, scale=1, shift=0, to_adjust="I", title="", file_name=""
):

    i_file = f"{recording}/{project}_I_{frame_number}_{timestamp}.dat"
    try:
        with open(i_file, "rb") as f:
            I_VOLTS = np.frombuffer(f.read()).reshape([128, 128])
    except:
        I_VOLTS = []

    q_file = f"{recording}/{project}_Q_{frame_number}_{timestamp}.dat"
    try:
        with open(q_file, "rb") as f:
            Q_VOLTS = np.frombuffer(f.read()).reshape([128, 128])
    except:
        Q_VOLTS = []

    if len(I_VOLTS) > 0 and len(Q_VOLTS) > 0:
        _fig = get_plot(
            base_data,
            None,
            [["I_DIFF", "Q_DIFF"]],
            vmin=vmin,
            vmax=vmax,
            I_VOLTS=I_VOLTS,
            Q_VOLTS=Q_VOLTS,
            i_mid=i_mid,
            q_mid=q_mid,
            scale=scale,
            shift=shift,
            to_adjust=to_adjust,
            title=title
        )

        if file_name:
            im = Image.open(_fig)
            _im = im.convert("RGB").convert("P", palette=Image.ADAPTIVE)
            _im.save(file_name, format="PNG")

            return 200

        _fig.read()
        encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
        _fig.close()
    else:
        encoded = ""

    return encoded


@blueprint.route("/selectrecording", methods=["POST"])
def select_recording():

    global is_replay

    _return = {"status": 200}

    try:
        root = Tk()
        root.withdraw()
        file_location = filedialog.askdirectory()
        root.destroy()

        if not file_location:
            return jsonify(_return)

        _files = []
        for (root, dirs, files) in os.walk(file_location):
            timestamp = root.replace("\\", "/").split("/")[-2]
            _files += [_file for _file in files if f"{timestamp}.dat" in _file]

        is_replay = False

        _return["file_location"] = file_location
        _return["total_frames"] = len(_files) // 2
    except:
        _return["status"] = 500
        _return["message"] = "Failed to open dialog."

    return jsonify(_return)


@blueprint.route("/calibrate")
@login_required
def calibrate():

    reset_actions()

    return render_template(
        "home/calibrate.html",
        segment="calibrate"
    )

@blueprint.route("/startcalibrate", methods=["POST"])
@login_required
def start_calibrate():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    global is_calibrate

    if not is_calibrate:
        is_calibrate = True

        thread = threading.Thread(
                target=send_calibrate,
                args=(_json,)
        )
        thread.start()

    return jsonify(_return)


def send_calibrate(data, is_fig=True, xem=None):

    global is_calibrate

    _return = {}

    # Instantiate XEM
    xem = xem if not is_fig else fpga.fpga()
    xem.Close()

    # Get parameters
    end_frequency = data.get("end_frequency") or 0
    frequency_interval = data.get("frequency_interval") or 0
    start_frequency = data.get("start_frequency") or 0

    _dirname = get_dir_name(data, maindirname)

    _frequency, frequency = 0, start_frequency
    frame_number = 1
    i, q, freq = [], [], []
    while is_calibrate:
        if frequency and _frequency != frequency:
            _frequency = frequency
            xem.Open()
            j_fp_vco.configureVCO(xem, _frequency, OUTEN, PSET)
            xem.Close()

        byte_data = j_fp_vco.acqSingleFrame(
            xem,
            ADC_TO_USE
        )
        image = j_fp_vco.convertByteToADCVOLTS(byte_data)
        I_ADC, Q_ADC, I_VOLTS, Q_VOLTS = image

        i.append(I_VOLTS[64][64])
        q.append(Q_VOLTS[64][64])
        freq.append(_frequency)

        frame_number += 1
        frequency += frequency_interval / 1000
        frequency = float("{:.2f}".format(frequency))

        is_calibrated = frequency > end_frequency
        if (frame_number % 10 == 0 or is_calibrated) and is_fig:
            _return = get_calibrate_plot(i, q, freq, is_calibrated)
            _fig, freq_i_max, freq_q_max, freq_iq = _return[:4]
            i_mid, q_mid, scale, shift, to_adjust = _return[4:]
            _fig.read()
            encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
            _fig.close()

            img_json = {
                "action": "calibrate",
                "data": encoded,
                "freq_i_max": freq_i_max,
                "freq_iq": freq_iq,
                "freq_q_max": freq_q_max,
                "i_mid": i_mid,
                "is_calibrated": is_calibrated,
                "q_mid": q_mid,
                "scale": scale,
                "shift": shift,
                "to_adjust": to_adjust,
                "status": 200
            }
            socketio.emit("calibrate", img_json)
        elif not is_fig:
            _return = get_calibrate_plot(i, q, freq, is_calibrated)
            _fig, freq_i_max, freq_q_max, freq_iq = _return[:4]
            i_mid, q_mid, scale, shift, to_adjust = _return[4:]

            _return = {
                "freq_i_max": freq_i_max,
                "freq_iq": freq_iq,
                "freq_q_max": freq_q_max,
                "i_mid": i_mid,
                "q_mid": q_mid,
                "scale": scale,
                "shift": shift,
                "to_adjust": to_adjust
            }

        if _frequency > end_frequency or is_calibrated:
            is_calibrate = False
            if not is_fig:
                return _return

    if not is_fig:
        return _return

@blueprint.route("/savecalibratefrequency", methods=["POST"])
@login_required
def save_calibrated_frequency(data={}):

    # Get json request
    _json = data or request.get_json(force=True)

    _return = {"status": 200}

    freq_i_max = _json.get("freq_i_max")
    freq_iq = _json.get("freq_iq")
    freq_q_max = _json.get("freq_q_max")
    i_mid = _json.get("i_mid")
    q_mid = _json.get("q_mid")
    scale = _json.get("scale") or 1
    shift = _json.get("shift") or 0
    to_adjust = _json.get("to_adjust")

    try:
        settings = get_settings()

        for d in (3, 4, 5):
            _id = f"settings_{d}"
            settings[_id] = settings.get(_id) or {}
            settings[_id].update(settings["settings"])
            settings[_id]["i_mid"] = i_mid
            settings[_id]["q_mid"] = q_mid
            settings[_id]["scale"] = scale
            settings[_id]["shift"] = shift
            settings[_id]["to_adjust"] = to_adjust

        settings["settings_3"]["frequency"] = freq_i_max or 0
        settings["settings_4"]["frequency"] = freq_q_max or 0
        settings["settings_5"]["frequency"] = freq_iq or 0

        with open(settings_file_name, "w") as f:
            json.dump(settings, f, indent=4)
    except:
        _return["status"] = 500
        _return["message"] = "Failed to save settings."


    return jsonify(_return)


@blueprint.route("/fastimaging", methods=["POST"])
def fast_imaging():

    global is_calibrate

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    xem = fpga.fpga()
    logs(_json, "Fast Imaging...")

    # Find XEM
    if get_xem(_json, True, xem):
        settings = get_settings()
        board_info = {
            k: settings.get(k)
            for k in ("board", "serial_number", "sys_clock", "version")
        }
        board_info["is_xem"] = True
        socketio.emit("fast_imaging", board_info)
    else:
        _return["status"] = 500
        _return["message"] = "No imager found."
        logs(_json, "Fast Imaging... FAILED.")

        xem.Close()

        return jsonify(_return)

    # Load VCO
    set_vco(_json, True, xem)
    socketio.emit("fast_imaging", {"is_set_vco": True})

    # Load Pulse Timing
    set_pulse_timing(_json, True, xem)
    socketio.emit("fast_imaging", {"is_set_pulse_timing": True})

    # Load DAC
    set_dac(_json, True, xem)
    socketio.emit("fast_imaging", {"is_set_dac": True})

    xem.Close()
    time.sleep(0.05)

    # Calibrate
    is_calibrate = True
    _json["end_frequency"] = 1865
    _json["frequency_interval"] = 100
    _json["start_frequency"] = 1850
    data = send_calibrate(_json, False, xem)
    if data:
        save_calibrated_frequency(data)
        socketio.emit("fast_imaging", {"is_calibrate": True})
    else:
        _return["status"] = 500
        _return["message"] = "Failed to calibrate."
        logs(_json, _return["message"])
        logs(_json, "Fast Imaging... FAILED.")

        return jsonify(_return)

    # Load Settings
    settings = get_settings()
    if settings.get("settings_5"):
        _json["settings"] = settings["settings_5"]
        load_settings(_json)
        socketio.emit("fast_imaging", {"is_load_settings": True})
    else:
        _return["status"] = 500
        _return["message"] = "Failed to load settings."
        logs(_json, _return["message"])
        logs(_json, "Fast Imaging... FAILED.")

        return jsonify(_return)

    _return["message"] = "Fast Imaging... DONE."
    logs(_json, _return["message"])

    return jsonify(_return)


def initialize_directories():

    global baseADC2_file_name, measdata_file_name
    global csv_save_dir, img_save_dir, rawdata_save_dir, vid_save_dir, livefeed_save_dir

    baseADC2_file_name = f"{savedirname}/baseADC2.dat"
    measdata_file_name = f"{savedirname}/output.dat"
    csv_save_dir = f"{savedirname}/csv"
    img_save_dir = f"{savedirname}/images"
    rawdata_save_dir = f"{savedirname}/rawdata"
    vid_save_dir = f"{savedirname}/video"
    livefeed_save_dir = f"{savedirname}/livefeed"

    if not os.path.exists(savedirname):
        os.mkdir(savedirname)

    for dirname in ("csv", "img", "rawdata", "video", "livefeed"):
        if not os.path.exists(f"{savedirname}/{dirname}"):
            os.mkdir(f"{savedirname}/{dirname}")

    set_dir_name(maindirname)


def set_dac(data, is_init=False, xem=None):

    xem = xem if is_init else fpga.fpga()

    j_fp_vco.setAllPixSameDAC(xem, DAC_VOLTAGE)

    if not is_init:
        xem.Close()


def save_settings_file(data):

    j_fp_vco.saveSettingsFile(
        savedirname,
        bit_file_name,
        freq,
        OUTEN,
        PSET,
        term_count,
        TX_SWITCH_EN_SETTINGS,
        PULSE_AND_SETTINGS,
        RX_SWITCH_EN_SETTINGS,
        GLOB_EN_SETTINGS,
        LO_CTRL_SETTINGS,
        ADC_CAP_SETTINGS,
        DAC_VOLTAGE,
        ADC_TO_USE
    )


@blueprint.route("/savesettings", methods=["POST"])
def save_settings():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    # Get data from json
    _id = _json.get("id")
    settings = _json.get("settings")

    try:
        _settings = get_settings()

        _settings[_id] = settings
        with open(settings_file_name, "w") as f:
            json.dump(_settings, f, indent=4)

        if _json.get("is_load"):
            load_settings(_json)
    except:
        _return["status"] = 500
        _return["message"] = "Failed to save settings."

    return jsonify(_return)


@blueprint.route("/loadsettings", methods=["POST"])
def load_settings(data={}):

    # Get json request
    if data:
        _json = data
    else:
        _json = request.get_json(force=True)

    _return = {"status": 200}

    # Get data from json
    _id = _json.get("id")

    try:
        global baseADC2_file_name

        if data:
            settings = data.get("settings")
        else:
            settings = get_settings()
            settings = settings.get(_id) or {}

        _return["settings"] = settings
        if settings:
            xem = fpga.fpga()
            settings["vco"] = "ON" if settings.get("is_vco") else "OFF"
            set_vco(settings, True, xem)

            pulse_timing = {
                "TX_Switch En": "tx",
                "Pulse_And": "pa",
                "RX_Switch En": "rx",
                "Global En": "gl",
                "LO Ctrl": "lo",
                "ADC Capture": "cp"
            }
            for k, v in pulse_timing.items():
                pulse_timing[k] = [
                    settings.get(f"{v}{i}") or 0
                    for i in range(1, 6)
                ]

            set_pulse_timing(pulse_timing, True, xem)

            _dirname = get_dir_name(_json, maindirname)
            base_filename = f"{_dirname}/baseADC2.dat"
            if base_filename != baseADC2_file_name:
                baseADC2_file_name = base_filename

            save_air_data(_json, True, xem)

            xem.Close()
    except:
        _return["status"] = 500
        _return["message"] = "Failed to load settings."

    return jsonify(_return)


def get_base_data(_json):

    _dirname = get_dir_name(_json, maindirname)

    base = f"{_dirname}/baseADC2.dat"
    if not os.path.exists(base):
        return "Missing base data."

    with open(base, "rb") as f:
        base_data = f.read()

    return base_data


def configure_pulse_timing(xem, is_no_echo=False):

    j_fp_vco.configTiming(
        xem,
        TERM_COUNT,
        TX_SWITCH_EN_SETTINGS,
        PULSE_AND_SETTINGS,
        RX_SWITCH_EN_SETTINGS,
        GLOB_EN_SETTINGS,
        LO_CTRL_SETTINGS,
        ADC_CAP_SETTINGS,
        is_no_echo
    )


def get_frequency_sweep(recording):

    frequency, frequency_interval, vmax, vmin = 0, 0, 0, 0
    i_mid, q_mid, scale, shift, to_adjust = None, None, 1, 0, "I"
    if os.path.exists(f"{recording}/{freq_sweep_file_name}"):
        try:
            with open(f"{recording}/{freq_sweep_file_name}", "r") as f:
                _f = json.loads(f.read())
                frequency = _f.get("start_frequency") or _f.get("frequency")
                frequency = frequency or 0
                frequency_interval = _f.get("frequency_interval") or 0
                i_mid = _f.get("i_mid")
                q_mid = _f.get("q_mid")
                scale = _f.get("scale")
                shift = _f.get("shift")
                to_adjust = _f.get("to_adjust")
                vmax = _f.get("vmax")
                vmin = _f.get("vmin")
        except:
            pass

    return frequency, frequency_interval, vmax, vmin, i_mid, q_mid, scale, shift, to_adjust


def reset_actions():

    global is_calibrate, is_live_feed, is_replay

    is_calibrate = False
    is_live_feed = False
    is_replay = False





import base64
import cv2
import json
import numpy as np
import os
import zipfile

from flask import (
    jsonify,
    redirect,
    render_template,
    request,
    send_file,
    url_for
)
from flask_login import current_user, login_required
from io import BytesIO
from PIL import Image

from app.home import blueprint
from app.utils import (
    convertADCToVolts,
    convertToIQImage,
    get_dir_name,
    get_plot,
    get_settings,
    loadSavedRawData,
    logs,
    plt,
    stream
)


@blueprint.route("/plotsingleframe", methods=["POST"])
def plot_single_frame():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    logs(_json, "Plotting single frame...")

    _dirname = get_dir_name(_json, _json.get("file_location"))
    if not os.path.exists(_dirname):
        _return["status"] = 500
        _return["message"] = (
            "Project does not exists. Please transfer project data."
        )
        logs(_json, _return["message"])
        return jsonify(_return)

    images_dir = f"{_dirname}/images"
    if not os.path.exists(images_dir):
        os.mkdir(images_dir)

    base = f"{_dirname}/baseADC2.dat"
    if not os.path.exists(base):
        _return["status"] = 500
        _return["message"] = "Missing base data."
        logs(_json, _return["message"])
        return jsonify(_return)

    output = f"{_dirname}/output.dat"
    if not os.path.exists(base):
        _return["status"] = 500
        _return["message"] = "Missing output data."
        logs(_json, _return["message"])
        return jsonify(_return)

    base_data = []
    with open(base, "rb") as f:
        base_data = f.read()

    output_data = []
    with open(output, "rb") as f:
        output_data = f.read()

    #_fig = get_plot(base_data, output_data, [["I_DIFF", "Q_DIFF"]])
    _fig = get_plot(base_data, output_data)

    measfig_file_name = f"{images_dir}/measured_fig.png"

    im = Image.open(_fig)
    _im = im.convert("RGB").convert("P", palette=Image.ADAPTIVE)
    _im.thumbnail((700, 400), Image.ANTIALIAS)
    _im.save(measfig_file_name, format="PNG")

    encoded = ""
    with open(measfig_file_name, "rb") as im_file:
        encoded = base64.b64encode(im_file.read()).decode("utf-8")

    _return["data"] = encoded
    logs(_json, "Plotting single frame. DONE.")

    return jsonify(_return)


@blueprint.route("/playmovieofnframes", methods=["POST"])
def play_movie_of_n_frames():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    logs(_json, "Playing movie of N frames...")

    # Get data from json
    num_frames_to_image = _json.get("num_frames_to_image")
    rpi_serial = _json.get("rpi_serial")

    _dirname = get_dir_name(_json, _json.get("file_location"))
    if not os.path.exists(_dirname):
        _return["status"] = 500
        _return["message"] = (
            "Project does not exists. Please transfer project data."
        )
        logs(_json, _return["message"])
        return jsonify(_return)

    images_dir = f"{_dirname}/images"
    if not os.path.exists(images_dir):
        os.mkdir(images_dir)

    rawdata_dir = f"{_dirname}/rawdata"
    if not os.path.exists(rawdata_dir):
        os.mkdir(rawdata_dir)

    video_dir = f"{_dirname}/video"
    if not os.path.exists(video_dir):
        os.mkdir(video_dir)

    FIG_SCALES_BASE = [2, 4, 2, 4] #scales in volts
    FIG_SCALES_MEAS = [2, 4, 2, 4] #scales in volts
    FIG_SCALES_SUB = [-100, 100, -100, 100] #scales in millivolts

    fps = 3
    size = (1920, 1280)
    start_frame = 0
    stop_frame = num_frames_to_image

    base = f"{_dirname}/baseADC2.dat"
    if os.path.exists(base):
        BL_I_ADC, BL_Q_ADC, BL_I_VOLTS, BL_Q_VOLTS = loadSavedRawData(base)
    else:
        _return["status"] = 500
        _return["message"] = "Missing base data."
        logs(_json, _return["message"])
        return jsonify(_return)

    #set up plot
    #plot base voltage
    fig5, ax5 = plt.subplots(2, 3, figsize=[14, 8])

    mytitle = fig5.suptitle(
        "I and Q Images in Voltage: Base, Measured, and Subtracted"
    )
    pos500 = ax5[0, 0].imshow(
        np.rot90(BL_I_VOLTS, 2),
        cmap="inferno",
        vmin=FIG_SCALES_BASE[0],
        vmax=FIG_SCALES_BASE[1]
    )
    pos510 = ax5[1, 0].imshow(
        np.rot90(BL_Q_VOLTS, 2),
        cmap="inferno",
        vmin=FIG_SCALES_BASE[2],
        vmax=FIG_SCALES_BASE[3]
    )

    pos501 = ax5[0, 1].imshow(
        np.rot90(BL_I_VOLTS, 2),
        cmap="inferno",
        vmin=FIG_SCALES_MEAS[0],
        vmax=FIG_SCALES_MEAS[1]
    )
    pos511 = ax5[1, 1].imshow(
        np.rot90(BL_Q_VOLTS, 2),
        cmap="inferno",
        vmin=FIG_SCALES_MEAS[2],
        vmax=FIG_SCALES_MEAS[3]
    )

    #plot difference in millivolts
    pos502 = ax5[0, 2].imshow(
        np.rot90(1000 * (BL_I_VOLTS - BL_I_VOLTS), 2),
        cmap="inferno",
        vmin=FIG_SCALES_SUB[0],
        vmax=FIG_SCALES_SUB[1]
    )
    pos512 = ax5[1, 2].imshow(
        np.rot90(1000 * (BL_Q_VOLTS - BL_Q_VOLTS), 2),
        cmap="inferno",
        vmin=FIG_SCALES_SUB[2],
        vmax=FIG_SCALES_SUB[3]
    )

    #set colorbars for all subplots
    cbar_5_00 = fig5.colorbar(pos500, ax=ax5[0, 0])
    ax5[0, 0].set_title("I Data Base")
    cbar_5_00.ax.set_ylabel("Voltage (V)", rotation=90)

    cbar_5_10 = fig5.colorbar(pos510, ax=ax5[1, 0])
    ax5[1, 0].set_title("Q Data Base")
    cbar_5_10.ax.set_ylabel("Voltage (V)", rotation=90)

    cbar_5_01 = fig5.colorbar(pos501, ax=ax5[0, 1])
    ax5[0, 1].set_title("I Data Meas")
    cbar_5_01.ax.set_ylabel("Voltage (V)", rotation=90)

    cbar_5_11 = fig5.colorbar(pos511, ax=ax5[1, 1])
    ax5[1, 1].set_title("Q Data Meas")
    cbar_5_11.ax.set_ylabel("Voltage (V)", rotation=90)

    cbar_5_02=fig5.colorbar(pos502, ax=ax5[0, 2])
    ax5[0, 2].set_title("I Data Meas - Base")
    cbar_5_02.ax.set_ylabel("Voltage (mV)", rotation=90)

    cbar_5_12 = fig5.colorbar(pos512, ax=ax5[1, 2])
    ax5[1, 2].set_title("Q Data Meas - Base")
    cbar_5_12.ax.set_ylabel("Voltage (mV)", rotation=90)

    base_title = (
        "I and Q Images in Voltage: Base, Measured, and Subtracted, Frame: "
    )
    numframedigits = len(str(num_frames_to_image))
    for mycount2 in range(start_frame, stop_frame):
        binfilename = (
            f"{rawdata_dir}/frame{str(mycount2).zfill(numframedigits)}.dat"
        )
        f = open(binfilename, "rb")
        bindat = f.read()
        f.close()

        #convert binary data to matrix
        J_MYIMAGE_I4, J_MYIMAGE_Q4 = convertToIQImage(bindat);

        #convert matrix to volts and actual ADC value
        iq_data = convertADCToVolts(J_MYIMAGE_I4, J_MYIMAGE_Q4)
        I_ADC_RTS, Q_ADC_RTS, I_VOLTS_RTS, Q_VOLTS_RTS = iq_data

        #plot figure
        #update title to reflect frame count
        mytitle.set_text(
            base_title
            + str(mycount2).zfill(numframedigits)
            + " of "
            + str(num_frames_to_image - 1)
        )

        #update measured voltage (in volts)
        pos501.set_data(np.rot90((I_VOLTS_RTS), 2))
        pos511.set_data(np.rot90((Q_VOLTS_RTS), 2))

        #update subtracted voltage (in millivolts)
        pos502.set_data(np.rot90(1000 * (I_VOLTS_RTS - BL_I_VOLTS), 2))
        pos512.set_data(np.rot90(1000 * (Q_VOLTS_RTS - BL_Q_VOLTS), 2))

        #redraw
        fig5.canvas.draw_idle()
        plt.pause(0.001)

        #save figure
        _fig = BytesIO()
        framefig_file_name = (
            f"{images_dir}/frame{str(mycount2).zfill(numframedigits)}.png"
        )
        plt.savefig(_fig, format="png")

        im = Image.open(_fig)
        _im = im.convert("RGB").convert("P", palette=Image.ADAPTIVE)
        _im.thumbnail((700, 400), Image.ANTIALIAS)
        _im.save(framefig_file_name, format="PNG")

        encoded = ""
        with open(framefig_file_name, "rb") as im_file:
            encoded = base64.b64encode(im_file.read()).decode("utf-8")

        img_json = {
            "action": "image_n_frames",
            "data": encoded,
            "rpi_serial": rpi_serial
        }
        stream(img_json)

    img_array = []
    numframedigits = len(str(num_frames_to_image))
    for count3 in range(start_frame, stop_frame):
        imgname = f"{images_dir}/frame{str(count3).zfill(numframedigits)}.png"
        img = cv2.imread(imgname)
        height, width, layers = img.shape
        size = (width, height)
        img_array.append(img)

    vid_file_name = f"{video_dir}/video.avi"
    out = cv2.VideoWriter(
        vid_file_name,
        cv2.VideoWriter_fourcc(*"DIVX"),
        fps,
        size
    )
    for i in range(len(img_array)):
        out.write(img_array[i])

    out.release()

    f = open(vid_file_name, "rb")
    encoded = base64.b64encode(f.read()).decode("utf-8")
    f.close()

    _return["data"] = encoded
    logs(_json, "Playing movie of N frames. DONE.")

    return jsonify(_return)


@blueprint.route("/getopticalimage", methods=["POST"])
def get_optical_image():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    # Get data from json
    action = _json.get("action")
    index = _json.get("index") or 0

    _dirname = f"{get_dir_name(_json)}/optical_images"

    if os.path.exists(_dirname):
        filenames = sorted(os.listdir(_dirname))
        if index <= (len(filenames) - 1):
            _filename = f"{_dirname}/{filenames[index]}"

            encoded = ""
            with open(_filename, "rb") as f:
                encoded = base64.b64encode(f.read()).decode("utf-8")

            _return["data"] = encoded
            _return["file"] = filenames[index]
    else:
        _return["status"] = 500
        _return["message"] = "File not found."

    return jsonify(_return)


@blueprint.route("/download", methods=["POST"])
def download():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    # Get data from json
    project_name = _json.get("project_name") or ""
    project_number = _json.get("project_number") or ""
    rpi_serial = _json.get("rpi_serial")

    project = project_name + project_number

    _dirname = get_dir_name(_json)
    if not os.path.exists(_dirname):
        _return["status"] = 500
        _return["message"] = "No files to download."
        return jsonify(_return)

    directories = [
        "csv", "images", "optical_images", "rawdata", "video"
    ]
    if project:
        directories = [""]

    filename = f"{rpi_serial}_{project}.zip"
    zipped = BytesIO()
    with zipfile.ZipFile(zipped, mode="w") as z:
        for d in directories:
            for root, dirs, files in os.walk(f"{_dirname}/{d}"):
                if not files:
                    z.write(root)
                    continue

                for f in files:
                    z.write(os.path.join(root, f))

    zipped.seek(0)
    return send_file(
        zipped,
        mimetype="application/zip",
        as_attachment=True,
        download_name=filename
    )


@blueprint.route("/index")
@login_required
def index():

    settings = get_settings()
    _settings = settings.get("settings") or {}

    if _settings.get("adc") is None:
        _settings["adc"] = 1

    if _settings.get("power_setting") is None:
        _settings["power_setting"] = 1

    config = {
        "adc": _settings["adc"],
        "frequency": _settings.get("frequency") or 1853.0,
        "power_setting": _settings["power_setting"],
        "timing_terminal": [{
            "name": "TX_Switch En",
            "value": [
                {"id": "tx1", "value": 0},
                {"id": "tx2", "value": 19},
                {"id": "tx3", "value": 42},
                {"id": "tx4", "value": 19},
                {"id": "tx5", "value": 42}
            ]
        },
        {
            "name": "Pulse_And",
            "value": [
                {"id": "pa1", "value": 0},
                {"id": "pa2", "value": 20},
                {"id": "pa3", "value": 42},
                {"id": "pa4", "value": 20},
                {"id": "pa5", "value": 42}
            ]
        },
        {
            "name": "RX_Switch En",
            "value": [
                {"id": "rx1", "value": 0},
                {"id": "rx2", "value": 42},
                {"id": "rx3", "value": 82},
                {"id": "rx4", "value": 42},
                {"id": "rx5", "value": 82}
            ]
        },
        {
            "name": "Global En",
            "value": [
                {"id": "gl1", "value": 1},
                {"id": "gl2", "value": 67},
                {"id": "gl3", "value": 1023},
                {"id": "gl4", "value": 67},
                {"id": "gl5", "value": 1023}
            ]
        },
        {
            "name": "LO Ctrl",
            "value": [
                {"id": "lo1", "value": 1},
                {"id": "lo2", "value": 1023},
                {"id": "lo3", "value": 1023},
                {"id": "lo4", "value": 42},
                {"id": "lo5", "value": 1023}
            ]
        },
        {
            "name": "ADC Capture",
            "value": [
                {"id": "cp1", "value": 0},
                {"id": "cp2", "value": 65},
                {"id": "cp3", "value": 66},
                {"id": "cp4", "value": 65},
                {"id": "cp5", "value": 66}
            ]
        }]
    }

    for d in config["timing_terminal"]:
        for v in d["value"]:
            v["value"] = _settings.get(v["id"]) or v["value"]

    try:
        board_info = {
            k: settings.get(k) or ""
            for k in ("board", "serial_number", "sys_clock", "version")
        }
    except:
        board_info = {}

    return render_template(
        "home/index.html",
        segment="index",
        clients=[],
        config=config,
        user=current_user,
        board_info=board_info
    )


@blueprint.route("/")
def index_main():

    if current_user:
        return redirect(url_for("home_blueprint.index"))
    else:
        return redirect(url_for("auth_blueprint.login"))



#--------------------------#
#
# Author: Adrian Roy Lugtu
# Date: 09/26/2021
#
#--------------------------#

import sys
import time

from app import create_app, db
from app.config import Config
from fbs_runtime.application_context.PyQt5 import ApplicationContext
from flask_migrate import Migrate
from PyQt5 import QtCore, QtGui, QtWebEngineWidgets
from PyQt5.QtWidgets import QMainWindow


if __name__ == "__main__":

    appctxt = ApplicationContext()


class ApplicationThread(QtCore.QThread):

    def __init__(self, application, socketio):

        super(ApplicationThread, self).__init__()
        self.application = application
        self.socketio = socketio


    def __del__(self):

        self.wait()


    def run(self):

        self.socketio.run(self.application)


class WebPage(QtWebEngineWidgets.QWebEnginePage):

    def __init__(self, root_url):

        super(WebPage, self).__init__()
        self.root_url = root_url
        self.profile().clearHttpCache()

    def home(self):

        self.load(QtCore.QUrl(self.root_url))

    def acceptNavigationRequest(self, url, kind, is_main_frame):

        """Open external links in browser and internal links in the webview"""
        ready_url = url.toEncoded().data().decode()
        is_clicked = kind == self.NavigationTypeLinkClicked
        if is_clicked and self.root_url not in ready_url:
            QtGui.QDesktopServices.openUrl(url)
            return False

        return super(WebPage, self).acceptNavigationRequest(url, kind, is_main_frame)


app, sio = create_app(Config)
Migrate(app, db)


if __name__ == "__main__":

    _app = ApplicationThread(app, sio)
    _app.start()

    window = QMainWindow()
    window.resize(1024, 768)
    window.setWindowTitle("Geegah Imager")

    widget = QtWebEngineWidgets.QWebEngineView(window)
    window.setCentralWidget(widget)

    page = WebPage('http://localhost:5000')

    page.home()
    time.sleep(1)
    widget.setPage(page)

    window.show()

    exit_code = appctxt.app.exec_()
    sys.exit(exit_code)



#--------------------------#
#
# Author: Adrian Roy Lugtu
# Date: 09/26/2021
#
#--------------------------#

from app import create_app, db
from app.config import Config
from flask_migrate import Migrate


app, socketio = create_app(Config)
Migrate(app, db)


if __name__ == "__main__":
    socketio.run(app, debug=True)



from flask_login import UserMixin
from app import db, login_manager
from werkzeug.security import generate_password_hash, check_password_hash


class User(UserMixin, db.Model):

    __tablename__ = "users"

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    is_admin = db.Column(db.Boolean)
    name = db.Column(db.String(255), nullable=False)
    password = db.Column(db.String(255), nullable=False)
    username = db.Column(db.String(255), unique=True, nullable=False)


    def __init__(self, is_admin, name, password, username):

        self.is_admin = is_admin or False
        self.name = name
        self.password = generate_password_hash(password)
        self.username = username


    def __repr__(self):

        return str(self.id)


    def verify_password(self, pwd):

        return check_password_hash(self.password, pwd)


    def as_dict(self):

        return {
            column.name: getattr(self, column.name)
            for column in self.__table__.columns
        }


@login_manager.user_loader
def user_loader(id):

    return User.query.filter_by(id=id).first()


@login_manager.request_loader
def request_loader(request):

    username = request.form.get('username')
    user = User.query.filter_by(username=username).first()
    return user if user else None




from flask import jsonify, redirect, render_template, request, url_for
from flask_login import current_user, login_user, login_required, logout_user
from app import db
from werkzeug.security import generate_password_hash

from app.auth import blueprint
from app.auth.models import User


@blueprint.route("/")
def route_default():
    if current_user.is_anonymous:
        return redirect(url_for("auth_blueprint.login"))
    else:
        return redirect(url_for("home_blueprint.index"))


@blueprint.route("/login", methods=["GET", "POST"])
def login():

    if request.method == "POST":
        # Get json request
        _json = request.get_json(force=True)

        # Get data from json
        password = _json.get("password")
        remember = True if _json.get("remember") else False
        username = _json.get("username")

        user = User.query.filter_by(username=username).first()

        if not (user and user.verify_password(password)):
            _return = {
                "status": 500,
                "message": "Invalid username or password."
            }
            return jsonify(_return)

        login_user(user, remember=remember)

        return redirect(url_for("home_blueprint.index"))
    else:
        return render_template("auth/login.html")


@blueprint.route("/changepassword", methods=["POST"])
@login_required
def change_password():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    # Get data from json
    new_password = _json.get("new_password")
    old_password = _json.get("old_password")

    # Validate password
    user = User.query.get(current_user.id)
    if user:
        if user.verify_password(old_password):
            user.password = generate_password_hash(new_password)
            db.session.commit()
        else:
            _return["status"] = 500
            _return["message"] = "Invalid old password."
    else:
        return redirect(url_for("auth_blueprint.login"))

    return jsonify(_return)


@blueprint.route("/logout", methods=["POST"])
@login_required
def logout():

    logout_user()
    return redirect(url_for("auth_blueprint.login"))



import base64

import cv2
import fpga
import j_fp_vco
import geegah_hp
import json
import numpy as np
import os
import shutil
import tempfile
import threading
import time
import socket
import matplotlib.pyplot as plt
import math
import glob

from datetime import datetime as dt
from flask import jsonify, render_template, request
from flask_login import login_required
from moviepy.editor import ImageSequenceClip
from PIL import Image
from tkinter import filedialog, Tk, messagebox
from io import BytesIO
from tifffile import tifffile

from app import socketio
from app.device import blueprint
from app.utils import (
    basedir,
    framediff,
    stacking_plot,
    pixel_plot,
    # histogram_equalization,
    gaussian_smoothing,
    speckle_reduction,
    plot_sobel,
    hist_plot,
    density_plot,
    get_leftplot_postprocessing,
    livefeed_plot,
    get_calibrate_plot,
    get_dir_name,
    get_plot,
    get_plot_live_feed,
    get_plot_live_feed_2,
    get_plot_2,
    get_settings,
    logs,
    update_settings,
    set_dir_name,
    line_plot
)

FREQ = 1853.0
OUTEN = 1
PSET = 3
ADC_TO_USE = 0
DAC_VOLTAGE = 2.8

TERM_COUNT = 83
TX_SWITCH_EN_SETTINGS = (0, 19, 42, 19, 42)
PULSE_AND_SETTINGS = (0, 20, 42, 20, 42)
RX_SWITCH_EN_SETTINGS = (0, 42, 82, 42, 82)
GLOB_EN_SETTINGS = (1, 71, 1023, 71, 1023)
LO_CTRL_SETTINGS = (1, 1023, 1023, 42, 1023)
ADC_CAP_SETTINGS = (0, 80, 81, 80, 81)

TERM_COUNT_NE = 83+90
TX_SWITCH_EN_SETTINGS_NE = (0, 19, 42, 19, 42) 
PULSE_AND_SETTINGS_NE = (0, 20, 42, 20, 42) 
RX_SWITCH_EN_SETTINGS_NE =( 0, 42, 82+90, 42, 82+90) 
GLOB_EN_SETTINGS_NE = (1, 71+90, 1023, 71+90, 1023) 
LO_CTRL_SETTINGS_NE = (1, 1023, 1023, 42, 1023)
ADC_CAP_SETTINGS_NE = (0, 80+90, 81+90, 80+90, 81+90)   # ADC_CAPTURE #80 81

freq_i_max_ok = None
freq_iq_ok = None
freq_optimum_ok = None
freq_q_max_ok = None
i_mid_ok = None
q_mid_ok = None
scale_ok = None
shift_ok = None
to_adjust_ok = None
roi0 = 0
roi1 = 127
roi2 = 0
roi3 = 127
#
roi0pp = 0
roi1pp = 127
roi2pp = 0
roi3pp = 127

I_BASE_ADC = None
Q_BASE_ADC = None
I_BASE_VOLTS = None
Q_BASE_VOLTS = None
I_ADC = None
Q_ADC = None
I_VOLTS = None
Q_VOLTS = None

rpi4_live_feed = False

@blueprint.route("/postprocessing")
def postprocessing():

    reset_actions()

    return render_template(
        "home/postprocessing.html",
        segment="postprocessing"
    )

@blueprint.route("/tissueimaging")
def tissueimaging():

    reset_actions()

    return render_template(
        "home/tissueimaging.html",
        segment="tissueimaging"
    )

@blueprint.route("/fsweep")
def fsweep():

    reset_actions()

    return render_template(
        "home/fsweep.html",
        segment="fsweep"
    )

@blueprint.route("/selectdirectory", methods=["POST"])
def select_directory():
    _return = {"status": 200}
    try:
        root = Tk()
        root.withdraw()
        directory_path = filedialog.askdirectory()
        root.destroy()
    except:
        return jsonify({"status": 500, "message": "Failed to open dialog"})
    
    required_folders = ['echo', 'no-echo']
    required_files = ['baseADC2.dat', 'baseADC2-no-echo.dat']

    if not all(os.path.isdir(os.path.join(directory_path, folder)) for folder in required_folders):
        return jsonify({"status": 500, "message": "Invalid directory. Please select a valid timestamp folder with echo, no-echo folders along with echo and no-echo baseline .dat files."})

    if not all(os.path.isfile(os.path.join(directory_path, file)) for file in required_files):
        return jsonify({"status": 500, "message": "Invalid directory. Please select a valid timestamp folder with echo, no-echo folders along with echo and no-echo baseline .dat files."})

    echo_folder_path = os.path.join(directory_path, 'echo')
    total_files = len(os.listdir(echo_folder_path))
    half_num_files = total_files // 2

    return jsonify({"status": 200, "directory_path": directory_path, "num_frames": half_num_files})

def loadSavedSampleData(file_name):
    f = open(file_name, 'rb')
    MATRIX = np.frombuffer(f.read()).reshape([128,128])
    return MATRIX

def loadSavedSampleDataROI(file_name, c1=0, c2=127, r1=0, r2=127):
    f = open(file_name, 'rb')
    rows = r2 - r1+1
    cols = c2 - c1+1
    MATRIX = np.frombuffer(f.read()).reshape([rows,cols])
    return MATRIX

def getAirData(directory):
    if os.path.exists(os.path.join(directory, "rois.json")):
        with open(os.path.join(directory, 'rois.json'), 'r') as file:
            data = json.load(file)
            roi0 = data['roi0']
            roi1 = data['roi1']
            roi2 = data['roi2']
            roi3 = data['roi3']
    else:
        roi0, roi1, roi2, roi3 = 0, 127, 0, 127 
    _, _, I_AE, Q_AE = geegah_hp.loadSavedRawDataROI(os.path.join(directory, 'baseADC2.dat'), roi0, roi1, roi2, roi3)
    _, _, I_ANE, Q_ANE = geegah_hp.loadSavedRawDataROI(os.path.join(directory, 'baseADC2-no-echo.dat'), roi0, roi1, roi2, roi3)
    return I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3

def postprocessLeftArray(frameNum, directory, computationType):
    # I_AE = None
    # Q_AE = None
    # I_ANE = None
    # Q_ANE = None
    # if os.path.exists(os.path.join(directory, "air-echo-I.dat")) and os.path.exists(os.path.join(directory, "air-echo-Q.dat")):
    #     I_AE = loadSavedSampleData(os.path.join(directory, "air-echo-I.dat"))
    #     Q_AE = loadSavedSampleData(os.path.join(directory, "air-echo-Q.dat"))
    #     I_ANE = loadSavedSampleData(os.path.join(directory, "air-noecho-I.dat"))
    #     Q_ANE = loadSavedSampleData(os.path.join(directory, "air-noecho-Q.dat"))
    # else:
    I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3 = getAirData(directory)
    return postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3)

def postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3):
    I_E_path = glob.glob(os.path.join(directory, 'echo', f"*_I_{frameNum}_*.dat"))[0]
    I_SE = loadSavedSampleDataROI(I_E_path, roi0, roi1, roi2, roi3)
    Q_E_path = glob.glob(os.path.join(directory, 'echo', f"*_Q_{frameNum}_*.dat"))[0]
    Q_SE = loadSavedSampleDataROI(Q_E_path, roi0, roi1, roi2, roi3)
    I_NE_path = glob.glob(os.path.join(directory, 'no-echo', f"*_I_{frameNum}_*.dat"))[0]
    I_SNE = loadSavedSampleDataROI(I_NE_path, roi0, roi1, roi2, roi3)
    Q_NE_path = glob.glob(os.path.join(directory, 'no-echo', f"*_Q_{frameNum}_*.dat"))[0]
    Q_SNE = loadSavedSampleDataROI(Q_NE_path, roi0, roi1, roi2, roi3)
    return postprocessComputeLeftArray(I_AE, Q_AE, I_ANE, Q_ANE, I_SE, Q_SE, I_SNE, Q_SNE, computationType)

def postprocessComputeLeftArray(I_AE, Q_AE, I_ANE, Q_ANE, I_SE, Q_SE, I_SNE, Q_SNE, computationType):
    if computationType == "Magnitude":
        return np.sqrt((I_SE - I_SNE)**2 + (Q_SE - Q_SNE)**2) - np.sqrt((I_AE - I_ANE)**2 + (Q_AE - Q_ANE)**2)
    elif computationType == "Reflection coefficient":
        return np.sqrt((I_SE - I_SNE)**2 + (Q_SE - Q_SNE)**2)/np.sqrt((I_AE - I_ANE)**2 + (Q_AE - Q_ANE)**2)
    elif computationType == "Acoustic Impedance":
        gamma = np.sqrt((I_SE - I_SNE)**2 + (Q_SE - Q_SNE)**2)/np.sqrt((I_AE - I_ANE)**2 + (Q_AE - Q_ANE)**2)
        return 19.6*(1-gamma)/(1+gamma)
    elif computationType == "Phase":
        return np.arctan2(I_SE-I_SNE, Q_SE-Q_SNE) - np.arctan2(I_AE-I_ANE, Q_AE-Q_ANE)
    elif computationType == "In-Phase":
        return I_SE - I_AE
    elif computationType == "Out-of-Phase":
        return Q_SE - Q_AE

def show_alert(message):
    root = Tk()
    root.withdraw()  # Hide the main window
    messagebox.showerror("Error", message)

def loadSavedRawData(file_name):
    f = open(file_name, 'rb')
    MYDAT = f.read()
    f.close()
    I_RAW, Q_RAW = j_fp_vco.convertToIQImage(MYDAT)
    I_ADC, Q_ADC, I_VOLTS, Q_VOLTS = j_fp_vco.convertADCToVolts(I_RAW, Q_RAW)
    return I_ADC, Q_ADC, I_VOLTS, Q_VOLTS
    # take .dat data which has byte date, convert into 128x128 matrix, then into I and Q Volts 
@blueprint.route("/postprocess_plotleft", methods=["POST"])
def postprocess_plotleft():
    try:
        data = request.get_json(force=True)
        computationType = data['computation_type']
        directory = data['directory_name']
        frameNum = int(data['frame_num'])
        vminVal = float(data['vmin_val'])
        vmaxVal = float(data['vmax_val'])
        leftImgTitle = data['left_img_title']
        result = postprocessLeftArray(frameNum, directory, computationType)
        unit = ""
        
        if computationType == "Magnitude":
            unit = "Volts (V)"
        elif computationType == "Reflection coefficient":
            unit = ""
        elif computationType == "Acoustic Impedance":
            unit = "MRayls"
        elif computationType == "Phase":
            unit = "Radians"
        elif computationType == "In-Phase":
            unit = "Volts (V)"
        elif computationType == "Out-of-Phase":
            unit = "Volts (V)"

        _fig = get_leftplot_postprocessing(vminVal, vmaxVal, result, 1, 0, leftImgTitle, unit)
        _fig.read()
        encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
        _fig.close()

        img_json = {
            "data": encoded,
            "status": 200
        }

        socketio.emit("plotleft", img_json)
        return jsonify({"status": 200})
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})
    
def getPostprocessSaveDirectory(directory, computationType, rightPlotType, frameStart, frameEnd, timestamp_current):
    timestamp = directory.replace("\\", "/").split("/")[-1]
    postprocessing_folder = os.path.join(directory, 'postprocessing')
    if not os.path.exists(postprocessing_folder):
        os.makedirs(postprocessing_folder)

    os.chdir(postprocessing_folder)

    specific_folder_name = f"{computationType}_{rightPlotType}_{frameStart}_to_{frameEnd}_data_{timestamp}_postprocessed_{timestamp_current}"
    specific_folder_path = os.path.join(postprocessing_folder, specific_folder_name)

    if not os.path.exists(specific_folder_path):
        os.makedirs(specific_folder_path)

    return specific_folder_path

def saveVideo(save_folder_path, frameStart, frameEnd):
    fps = 6
    img_array = []
    for count3 in range(frameStart, frameEnd):
        imgname = save_folder_path + "/frame" + str(count3) + ".png"
        img = cv2.imread(imgname)
        height, width, layers = img.shape
        size = (width, height)
        img_array.append(img)

    vid_file_name = save_folder_path + '/video.avi'
    out = cv2.VideoWriter(vid_file_name, cv2.VideoWriter_fourcc(*'DIVX'), fps, size)

    for i in range(len(img_array)):
        out.write(img_array[i])
    out.release()

@blueprint.route("/postprocess_saveframes", methods=["POST"])
def postprocess_saveframes():
    try:
        data = request.get_json(force=True)
        computationType = data['computationType']
        directory = data['directory']
        frameStart = int(data['frameStart'])
        frameEnd = int(data['frameEnd'])
        vminVal = float(data['vminVal'])
        vmaxVal = float(data['vmaxVal'])
        leftImgTitle = data['leftImgTitle']

        save_folder_path = getPostprocessSaveDirectory(directory, computationType, "images", frameStart, frameEnd, dt.now().strftime("%Y-%m-%d %H-%M-%S"))
        raw_folder_path = os.path.join(save_folder_path, "raw-images")
        if not os.path.exists(raw_folder_path):
            os.makedirs(raw_folder_path)

        I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3 = getAirData(directory)
        for frameNum in range(frameStart, frameEnd + 1):
            result = postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3)
            _fig = get_leftplot_postprocessing(vminVal, vmaxVal, result, 1, 0, leftImgTitle)
            figValue = _fig.getvalue()
            img_file = os.path.join(save_folder_path, f"frame{frameNum}.png")
            # img_file = f"{save_folder_path}/frame{frameNum}.png"
            with open(img_file, "wb") as f:
                f.write(figValue)
            raw_file = os.path.join(raw_folder_path, f"frame{frameNum}.tif")
            # raw_file = f"{raw_folder_path}/frame{frameNum}.tif"
            zyxc = np.array(result, dtype=np.float32)
            zcyx = np.moveaxis(zyxc, -1, 1)
            tifffile.imwrite(raw_file, zcyx, imagej=True)
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})    

    try:
        saveVideo(save_folder_path, frameStart, frameEnd)
    except Exception as e:
        show_alert("Video could not be saved")

    return jsonify({"status": 200})

@blueprint.route("/postprocess_plot_hist_right", methods=["POST"])
def postprocess_plot_hist_right(): #plots histogram in right window
    try:
        data = request.get_json(force=True)
        computationType = data['computation_type']
        directory = data['directory_name']
        frameNum = int(data['frame_num'])
        bins = int(data['bins'])
        histogramVmax = float(data['histogram_vmax'])
        histogramVmin = float(data['histogram_vmin'])
        result = postprocessLeftArray(frameNum, directory, computationType)
        _fig = hist_plot(result, computationType, histogramVmax, histogramVmin, bins, alpha=0.6)

        _fig.read()
        encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
        _fig.close()

        img_json = {
            "data": encoded,
            "status": 200
        }

        socketio.emit("plotright", img_json)
        return jsonify({"status": 200})
    except Exception as e:
        show_alert(e)

@blueprint.route("/postprocess_save_hist_right", methods=["POST"])
def postprocess_save_hist_right():
    data = request.get_json(force=True)
    computationType = data['computation_type']
    directory = data['directory_name']
    frameStart = int(data['histogram_frame_start'])
    frameEnd = int(data['histogram_frame_end'])
    histogramVmax = float(data['histogram_vmax'])
    histogramVmin = float(data['histogram_vmin'])
    bins = int(data['bins'])

    save_folder_path = getPostprocessSaveDirectory(directory, computationType, "Histogram", frameStart, frameEnd, dt.now().strftime("%Y-%m-%d %H-%M-%S"))

    I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3 = getAirData(directory)
    
    
    for frameNum in range(frameStart, frameEnd + 1):
        result = postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3)
        _fig = hist_plot(result, computationType,histogramVmax, histogramVmin, bins, alpha=0.6)
        figValue = _fig.getvalue()
        img_file = f"{save_folder_path}/frame{frameNum}.png"
        with open(img_file, "wb") as f:
            f.write(figValue)

    try:
        saveVideo(save_folder_path, frameStart, frameEnd)
    except Exception as e:
        show_alert("Video could not be saved")

    return jsonify({"status": 200})

@blueprint.route("/postprocess_plot_density_right", methods=["POST"])
def postprocess_plot_density_right():
    try:
        data = request.get_json(force=True)
        computationType = data['computation_type']
        directory = data['directory_name']
        frameNum = int(data['frame_num'])
        lamb = float(data['lambda1'])
        result = postprocessLeftArray(frameNum, directory, computationType)
        _fig = density_plot(result, computationType, lamb)
        _fig.read()
        encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
        _fig.close()

        img_json = {
            "data": encoded,
            "status": 200
        }

        socketio.emit("plotright", img_json)
        return jsonify({"status": 200})
    except Exception as e:
        show_alert(e)
    
@blueprint.route("/postprocess_save_density_right", methods=["POST"])
def postprocess_save_density_right():
    try:
        data = request.get_json(force=True)
        computationType = data['computation_type']
        directory = data['directory_name']
        frameStart = int(data['density_frame_start'])
        frameEnd = int(data['density_frame_end'])
        lamb = float(data['lambda1'])

        save_folder_path = getPostprocessSaveDirectory(directory, computationType, "DensityPlot", frameStart, frameEnd, dt.now().strftime("%Y-%m-%d %H-%M-%S"))

        I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3 = getAirData(directory)

        
        for frameNum in range(frameStart, frameEnd + 1):
            result = postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3)
            _fig = density_plot(result, computationType, lamb)
            figValue = _fig.getvalue()
            img_file = f"{save_folder_path}/frame{frameNum}.png"
            with open(img_file, "wb") as f:
                f.write(figValue)
    except Exception as e:
        show_alert(e)

    try:
        saveVideo(save_folder_path, frameStart, frameEnd)
    except Exception as e:
        show_alert("Video could not be saved")

    return jsonify({"status": 200})

@blueprint.route("/postprocess_plot_sobel_right", methods=["POST"])
def postprocess_plot_sobel_right():
    try:
        data = request.get_json(force=True)
        computationType = data['computation_type']
        directory = data['directory_name']
        frameNum = int(data['frame_num'])
        result = postprocessLeftArray(frameNum, directory, computationType)
        _fig = plot_sobel(result, mode="constant")

        _fig.read()
        encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
        _fig.close()

        img_json = {
            "data": encoded,
            "status": 200
        }

        socketio.emit("plotright", img_json)
        return jsonify({"status": 200})
    except Exception as e:
        show_alert(e)

@blueprint.route("/postprocess_save_sobel_right", methods=["POST"])
def postprocess_save_sobel_right():
    try:
        data = request.get_json(force=True)
        computationType = data['computation_type']
        directory = data['directory_name']
        frameStart = int(data['sobel_frame_start'])
        frameEnd = int(data['sobel_frame_end'])

        save_folder_path = getPostprocessSaveDirectory(directory, computationType, "EdgeDetection", frameStart, frameEnd, dt.now().strftime("%Y-%m-%d %H-%M-%S"))

        I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3 = getAirData(directory)
        
        
        for frameNum in range(frameStart, frameEnd + 1):
            result = postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3)
            _fig = plot_sobel(result, mode="constant")
            figValue = _fig.getvalue()
            img_file = f"{save_folder_path}/frame{frameNum}.png"
            with open(img_file, "wb") as f:
                f.write(figValue)
    except Exception as e:
        show_alert(e)

    try:
        saveVideo(save_folder_path, frameStart, frameEnd)
    except Exception as e:
        show_alert("Video could not be saved")

    return jsonify({"status": 200})

@blueprint.route("/postprocess_plot_speckle_right", methods=["POST"])
def postprocess_plot_speckle_right():
    try: 
        data = request.get_json(force=True)
        computationType = data['computation_type']
        directory = data['directory_name']
        frameNum = int(data['frame_num'])
        sizeFilter = int(data['size'])
        result = postprocessLeftArray(frameNum, directory, computationType)
        _fig = speckle_reduction(result, sizeFilter)
        
        _fig.read()
        encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
        _fig.close()

        img_json = {
            "data": encoded,
            "status": 200
        }

        socketio.emit("plotright", img_json)
        return jsonify({"status": 200})
    except Exception as e:
        show_alert(e)

@blueprint.route("/postprocess_save_speckle_right", methods=["POST"])
def postprocess_save_speckle_right():
    try:
        data = request.get_json(force=True)
        computationType = data['computation_type']
        directory = data['directory_name']
        frameStart = int(data['speckle_frame_start'])
        frameEnd = int(data['speckle_frame_end'])
        sizeFilter = int(data['size'])
        save_folder_path = getPostprocessSaveDirectory(directory, computationType, "SpeckleReduction", frameStart, frameEnd, dt.now().strftime("%Y-%m-%d %H-%M-%S"))

        I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3 = getAirData(directory)
        
        
        for frameNum in range(frameStart, frameEnd + 1):
            result = postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3)
            _fig = speckle_reduction(result, sizeFilter)
            figValue = _fig.getvalue()
            img_file = f"{save_folder_path}/frame{frameNum}.png"
            with open(img_file, "wb") as f:
                f.write(figValue)
    except Exception as e:
        show_alert(e)

    try:
        saveVideo(save_folder_path, frameStart, frameEnd)
    except Exception as e:
        show_alert("Video could not be saved")

    return jsonify({"status": 200})

@blueprint.route("/postprocess_plot_gaussian_right", methods=["POST"])
def postprocess_plot_gaussian_right():
    try:
        data = request.get_json(force=True)
        computationType = data['computation_type']
        directory = data['directory_name']
        frameNum = int(data['frame_num'])
        sigmaVal = float(data['sigma'])
        result = postprocessLeftArray(frameNum, directory, computationType)
        _fig = gaussian_smoothing(result, sigmaVal)

        _fig.read()
        encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
        _fig.close()

        img_json = {
            "data": encoded,
            "status": 200
        }

        socketio.emit("plotright", img_json)
        return jsonify({"status": 200})
    except Exception as e:
        show_alert(e)
    
@blueprint.route("/postprocess_save_gaussian_right", methods=["POST"])
def postprocess_save_gaussian_right():
    try:
        data = request.get_json(force=True)
        computationType = data['computation_type']
        directory = data['directory_name']
        frameStart = int(data['gaussian_frame_start'])
        frameEnd = int(data['gaussian_frame_end'])
        sigmaVal = float(data['sigma'])
        save_folder_path = getPostprocessSaveDirectory(directory, computationType, "GaussianSmoothening", frameStart, frameEnd, dt.now().strftime("%Y-%m-%d %H-%M-%S"))
        
        I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3 = getAirData(directory)

        
        for frameNum in range(frameStart, frameEnd + 1):
            result = postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3)
            _fig = gaussian_smoothing(result, sigmaVal)
            figValue = _fig.getvalue()
            img_file = f"{save_folder_path}/frame{frameNum}.png"
            with open(img_file, "wb") as f:
                f.write(figValue)
    except Exception as e:
        show_alert(e)

    try:
        saveVideo(save_folder_path, frameStart, frameEnd)
    except Exception as e:
        show_alert("Video could not be saved")

    return jsonify({"status": 200})

@blueprint.route("/postprocess_plot_framediff_right", methods=["POST"])
def postprocess_plot_framediff_right():
    try:
        data = request.get_json(force=True)
        computationType = data['computation_type']
        directory = data['directory_name']
        frameNum = int(data['frame_num'])
        lagOffset = int(data['lag_offset'])
        secondFrameNum = frameNum + lagOffset
        frame1 = postprocessLeftArray(frameNum, directory, computationType)
        frame2 = postprocessLeftArray(secondFrameNum, directory, computationType)
        
        _fig = framediff(frame1, frame2, computationType, lagOffset)

        _fig.read()
        encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
        _fig.close()

        img_json = {
            "data": encoded,
            "status": 200
        }

        socketio.emit("plotright", img_json)
        return jsonify({"status": 200})
    except Exception as e:
        show_alert(e)

@blueprint.route("/postprocess_save_framediff_right", methods=["POST"])
def postprocess_save_framediff_right():
    data = request.get_json(force=True)
    computationType = data['computation_type']
    directory = data['directory_name']
    frameStart = int(data['framediff_frame_start'])
    frameEnd = int(data['framediff_frame_end'])
    lagOffset = int(data['lag_offset'])
    save_folder_path = getPostprocessSaveDirectory(directory, computationType, "FrameDifferencing", frameStart, frameEnd, dt.now().strftime("%Y-%m-%d %H-%M-%S"))

    I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3 = getAirData(directory)

    for frameNum in range(frameStart, frameEnd + 1):
        secondFrameNum = frameNum + lagOffset
        try:
            frame1 = postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3)
            frame2 = postprocessLeftArrayFull(secondFrameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3)
        except Exception as e:
            continue
        _fig = framediff(frame1, frame2, computationType, lagOffset)
        figValue = _fig.getvalue()
        img_file = f"{save_folder_path}/frame{frameNum}.png"
        with open(img_file, "wb") as f:
            f.write(figValue)

    try:
        saveVideo(save_folder_path, frameStart, frameEnd-lagOffset)
    except Exception as e:
        show_alert("Video could not be saved")

    return jsonify({"status": 200})

@blueprint.route("/postprocess_plot_pixel_right", methods=["POST"])
def postprocess_plot_pixel_right():
    data = request.get_json(force=True)
    computationType = data['computation_type']
    directory = data['directory_name']
    pixelFrameStart = int(data['pixel_frame_start'])
    pixelFrameEnd = int(data['pixel_frame_end'])
    pixelPointX = int(data['pixel_x'])
    pixelPointY = int(data['pixel_y'])

    frames = []
    I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3 = getAirData(directory)

    for frameNum in range(pixelFrameStart, pixelFrameEnd + 1):
        frames.append(postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3))
    _fig = pixel_plot(frames, computationType, (pixelPointX, pixelPointY))

    _fig.read()
    encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
    _fig.close()

    img_json = {
        "data": encoded,
        "status": 200
    }

    socketio.emit("plotright", img_json)
    return jsonify({"status": 200})

@blueprint.route("/postprocess_save_pixel_right", methods=["POST"])
def postprocess_save_pixel_right():
    try:
        data = request.get_json(force=True)
        computationType = data['computation_type']
        directory = data['directory_name']
        pixelFrameStart = int(data['pixel_frame_start'])
        pixelFrameEnd = int(data['pixel_frame_end'])
        pixelPointX = int(data['pixel_x'])
        pixelPointY = int(data['pixel_y'])
        save_folder_path = getPostprocessSaveDirectory(directory, computationType, "PixelPlot", pixelFrameStart, pixelFrameEnd, dt.now().strftime("%Y-%m-%d %H-%M-%S"))

        frames = []
        I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3 = getAirData(directory)
        
        for frameNum in range(pixelFrameStart, pixelFrameEnd + 1):
            frames.append(postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3))
        _fig = pixel_plot(frames, computationType, (pixelPointX, pixelPointY))
        figValue = _fig.getvalue()
        img_file = f"{save_folder_path}/pixel_plot.png"
        with open(img_file, "wb") as f:
            f.write(figValue)
    except Exception as e:
        show_alert(e)

    return jsonify({"status": 200})

@blueprint.route("/postprocess_plot_stacking_right", methods=["POST"])
def postprocess_plot_stacking_right():
    data = request.get_json(force=True)
    computationType = data['computation_type']
    directory = data['directory_name']
    stackingFrameStart = int(data['stacking_frame_start'])
    stackingFrameEnd = int(data['stacking_frame_end'])

    frames = []
    I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3 = getAirData(directory)

    for frameNum in range(stackingFrameStart, stackingFrameEnd + 1):
        frames.append(postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3))
    _fig = stacking_plot(frames, computationType)

    _fig.read()
    encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
    _fig.close()

    img_json = {
        "data": encoded,
        "status": 200
    }

    socketio.emit("plotright", img_json)
    return jsonify({"status": 200})

@blueprint.route("/postprocess_save_stacking_right", methods=["POST"])
def postprocess_save_stacking_right():
    try:
        data = request.get_json(force=True)
        computationType = data['computation_type']
        directory = data['directory_name']
        stackingFrameStart = int(data['stacking_frame_start'])
        stackingFrameEnd = int(data['stacking_frame_end'])
        save_folder_path = getPostprocessSaveDirectory(directory, computationType, "StackingPlot", stackingFrameStart, stackingFrameEnd, dt.now().strftime("%Y-%m-%d %H-%M-%S"))

        frames = []
        I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3 = getAirData(directory)

        for frameNum in range(stackingFrameStart, stackingFrameEnd + 1):
            frames.append(postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3))
        _fig = stacking_plot(frames, computationType)
        figValue = _fig.getvalue()
        img_file = f"{save_folder_path}/stacking_plot.png"
        with open(img_file, "wb") as f:
            f.write(figValue)
    except Exception as e:
        show_alert(e)

    return jsonify({"status": 200})

def reset_actions():
    global ok_live_feed, rpi4_live_feed
    ok_live_feed = False
    rpi4_live_feed = False

# Tissue Imaging:

ok_xem = None
frameToPlot = None
tiAIR_I = None
tiAIR_Q = None
tiAIR_MAG = None

ti_fig, ti_axs = plt.subplots(3, 3, figsize=(12, 12))

def update_subplot(i, data):
    global ti_fig, ti_axs
    # Determine subplot coordinates
    x = (i - 1) // 3
    y = (i - 1) % 3

    titles = ["Air", "Sample-Weight 1", "Sample-Weight 2", "Sample-Weight 3", "Sample-Weight 1 repeat", "Sample-Weight 2 repeat", "Sample-Weight 3 repeat", "Sample-post sample", "Air-post sample"]

    # Update the specific subplot
    ax = ti_axs[x, y]
    ax.clear()
    im = ax.imshow(data, vmin=-0.075, vmax=0.075, cmap='rainbow')
    ax.set_title(titles[i-1], fontsize=14)
    ax.set_xlabel('Columns')
    ax.set_ylabel('Rows')

    # Check for the existing colorbar
    # if hasattr(ax, 'colorbar') and isinstance(ax.colorbar, Colorbar):
    #     ax.colorbar.remove()
    
    # Create a new colorbar for the subplot
    # cbar = ti_fig.colorbar(im, ax=ax)
    # ax.colorbar = cbar

    # Check if the last image has a colorbar
    # if not hasattr(im, 'colorbar') or im.colorbar is None:
    #     # Create a colorbar for the new image
    #     colorbar = ti_fig.colorbar(im, ax=ax)
    #     im.colorbar = colorbar  # Associate the colorbar with the image
    # else:
    #     # Update the existing colorbar
    #     im.colorbar.update_normal(im)

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    ti_fig_buf = BytesIO()
    plt.savefig(ti_fig_buf, format='png', bbox_inches='tight')
    ti_fig_buf.seek(0)

    encoded = base64.b64encode(ti_fig_buf.getvalue()).decode("utf-8")
    ti_fig_buf.close()
    img_json = {"data": encoded}
    socketio.emit("tiLiveFeedImage", img_json)

@blueprint.route("/tiRedoPlot", methods=["POST"])
def tiRedoPlot():
    try:
        data = request.get_json(force=True)
        idx = int(data['idx'])
        z = np.full((128, 128), np.nan)
        update_subplot(idx, z)
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})
    return jsonify({"status": 200})


@blueprint.route("/reloadEverythingTi", methods=["POST"])
def reloadEverythingTi():
    try:
        global ti_fig, ti_axs
        ti_fig.clf()
        ti_fig, ti_axs = plt.subplots(3, 3, figsize=(12, 12))
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})
    return jsonify({"status": 200})

@blueprint.route("/tiFastImaging", methods=["POST"])
def tiFastImaging():
    _return = {"status": 200}

    try:
        global ok_xem, TERM_COUNT, TERM_COUNT_NE, FREQ, OUTEN, PSET, ADC_TO_USE, DAC_VOLTAGE
        global TX_SWITCH_EN_SETTINGS, PULSE_AND_SETTINGS, RX_SWITCH_EN_SETTINGS, GLOB_EN_SETTINGS, LO_CTRL_SETTINGS, ADC_CAP_SETTINGS
        global TX_SWITCH_EN_SETTINGS_NE, PULSE_AND_SETTINGS_NE, RX_SWITCH_EN_SETTINGS_NE, GLOB_EN_SETTINGS_NE, LO_CTRL_SETTINGS_NE, ADC_CAP_SETTINGS_NE
        if ok_xem:
            ok_xem = None
        ok_xem = fpga.fpga()
        board_name = ok_xem.BoardName()
        if board_name != "XEM7305":
            show_alert(f"Problem: board name = {board_name}")
            sys.exit()
        bit_file_name = "xem7305_GG216.bit"
        ok_xem.Configure(bit_file_name)
        j_fp_vco.configureVCO(ok_xem,FREQ,OUTEN,PSET)
        ok_xem.SelectFakeADC(0)
        j_fp_vco.configTiming(ok_xem,TERM_COUNT,TX_SWITCH_EN_SETTINGS,PULSE_AND_SETTINGS,RX_SWITCH_EN_SETTINGS,GLOB_EN_SETTINGS,LO_CTRL_SETTINGS,ADC_CAP_SETTINGS)
        j_fp_vco.setAllPixSameDAC(ok_xem,DAC_VOLTAGE)
        ok_xem.Close()
        time.sleep(0.05)

        titles = ["Air", "Sample-Weight 1", "Sample-Weight 2", "Sample-Weight 3", "Sample-Weight 1 repeat", "Sample-Weight 2 repeat", "Sample-Weight 3 repeat", "Sample-post sample", "Air-post sample"]

        global ti_fig, ti_axs
        ti_fig.suptitle('Corresponding ultrasonic images at 1855 MHz', fontsize=20)
        for i in range(3):
            for j in range(3):
                z = np.full((128, 128), np.nan)
                # z = np.zeros((128, 128)) # Placeholder data
                im = ti_axs[i, j].imshow(z, vmin=-0.075, vmax=0.075, cmap='rainbow')
                ti_axs[i, j].set_title(titles[i*3 + j], fontsize=14)
                ti_axs[i, j].set_xlabel('Columns')
                ti_axs[i, j].set_ylabel('Rows')
                ti_fig.colorbar(im, ax=ti_axs[i, j])

        plt.tight_layout(rect=[0, 0.03, 1, 0.95])
        ti_fig_buf = update_subplot(1, np.full((128, 128), np.nan))

    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})
    return jsonify({"status": 200})


@blueprint.route("/tiFreqSweep", methods=["POST"])
def tiFreqSweep():
    try:
        global ok_xem, TERM_COUNT, TERM_COUNT_NE, FREQ, OUTEN, PSET, ADC_TO_USE, DAC_VOLTAGE
        global TX_SWITCH_EN_SETTINGS, PULSE_AND_SETTINGS, RX_SWITCH_EN_SETTINGS, GLOB_EN_SETTINGS, LO_CTRL_SETTINGS, ADC_CAP_SETTINGS
        global TX_SWITCH_EN_SETTINGS_NE, PULSE_AND_SETTINGS_NE, RX_SWITCH_EN_SETTINGS_NE, GLOB_EN_SETTINGS_NE, LO_CTRL_SETTINGS_NE, ADC_CAP_SETTINGS_NE
        data = request.get_json(force=True)
        projectdir = data['project_dir']
        buttonname = data['button_name']
        idx = int(data['idx'])

        f_start = 1800
        f_end = 1880
        f_delta = 0.5
        # f_mid = (f_start + f_end)/2
        # f_start = 1840
        # f_end = 1860
        # f_delta = 5

        timestamp = dt.now().strftime("%Y-%m-%d %H-%M-%S")
        save_dir = os.path.join(projectdir, buttonname, timestamp)
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)

        ok_xem.Open()
        ok_xem.SelectADC(0)
        ok_xem.SelectFakeADC(0)
        ok_xem.EnablePgen(0)
        ok_xem.Close()

        global frameToPlot, tiAIR_I, tiAIR_Q, tiAIR_MAG
        I_PLOT, Q_PLOT, MAG_PLOT = None, None, None

        for myf in range(f_start*100,f_end*100,math.floor(f_delta*100)):    
            f_to_use = myf/100

            j_fp_vco.configureVCO_10khz_fsweep(ok_xem,f_to_use,OUTEN,PSET)
            ok_xem.Open()
            j_fp_vco.configTiming(ok_xem,TERM_COUNT,TX_SWITCH_EN_SETTINGS,PULSE_AND_SETTINGS,
                                RX_SWITCH_EN_SETTINGS,GLOB_EN_SETTINGS,LO_CTRL_SETTINGS,ADC_CAP_SETTINGS)
            ok_xem.Close()
            
            echo_file_name = os.path.join(save_dir, f"Frequencyecho_{f_to_use}_.dat")
            myf_data_echo = j_fp_vco.acqSingleFrame_FSWEEP(ok_xem, ADC_TO_USE, echo_file_name)
            time.sleep(0.1)

            ok_xem.Open()
            j_fp_vco.configTiming(ok_xem,TERM_COUNT_NE,TX_SWITCH_EN_SETTINGS_NE,PULSE_AND_SETTINGS_NE,
                                RX_SWITCH_EN_SETTINGS_NE,GLOB_EN_SETTINGS_NE,LO_CTRL_SETTINGS_NE,ADC_CAP_SETTINGS_NE)
            ok_xem.Close()
            noecho_file_name = os.path.join(save_dir, f"Frequencynoecho_{f_to_use}_.dat")
            myf_base_data_ne = j_fp_vco.acqSingleFrame_FSWEEP(ok_xem, ADC_TO_USE, noecho_file_name)                     
            time.sleep(0.1)

            if f_to_use == 1855:
                _, _, ti_I_VOLTS, ti_Q_VOLTS = j_fp_vco.loadSavedRawDataFromBytes(myf_data_echo)
                ti_MAG_VOLTS = np.sqrt(ti_I_VOLTS ** 2 + ti_Q_VOLTS ** 2)
                if idx == 1:
                    tiAIR_I, tiAIR_Q, tiAIR_MAG = ti_I_VOLTS, ti_Q_VOLTS, ti_MAG_VOLTS
                    IAV, QAV, MAV = np.mean(tiAIR_I), np.mean(tiAIR_Q), np.mean(tiAIR_MAG)
                    I_PLOT, Q_PLOT, MAG_PLOT = ti_I_VOLTS - IAV, ti_Q_VOLTS - QAV, ti_MAG_VOLTS - MAV
                else:
                    I_PLOT, Q_PLOT, MAG_PLOT = ti_I_VOLTS - tiAIR_I, ti_Q_VOLTS - tiAIR_Q, ti_MAG_VOLTS - tiAIR_MAG
        
        update_subplot(idx, MAG_PLOT)

    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})
    return jsonify({"status": 200})

# Frequency Sweep:

@blueprint.route("/fsFastImaging", methods=["POST"])
def fsFastImaging():
    try:
        global ok_xem, TERM_COUNT, TERM_COUNT_NE, FREQ, OUTEN, PSET, ADC_TO_USE, DAC_VOLTAGE
        global TX_SWITCH_EN_SETTINGS, PULSE_AND_SETTINGS, RX_SWITCH_EN_SETTINGS, GLOB_EN_SETTINGS, LO_CTRL_SETTINGS, ADC_CAP_SETTINGS
        global TX_SWITCH_EN_SETTINGS_NE, PULSE_AND_SETTINGS_NE, RX_SWITCH_EN_SETTINGS_NE, GLOB_EN_SETTINGS_NE, LO_CTRL_SETTINGS_NE, ADC_CAP_SETTINGS_NE
        if ok_xem:
            ok_xem = None
        ok_xem = fpga.fpga()
        board_name = ok_xem.BoardName()
        if board_name != "XEM7305":
            show_alert(f"Problem: board name = {board_name}")  
            sys.exit()
        bit_file_name = "xem7305_GG226.bit"
        ok_xem.Configure(bit_file_name)
        j_fp_vco.configureVCO(ok_xem,FREQ,OUTEN,PSET)
        ok_xem.SelectFakeADC(0)
        j_fp_vco.configTiming(ok_xem,TERM_COUNT,TX_SWITCH_EN_SETTINGS,PULSE_AND_SETTINGS,RX_SWITCH_EN_SETTINGS,GLOB_EN_SETTINGS,LO_CTRL_SETTINGS,ADC_CAP_SETTINGS)
        j_fp_vco.setAllPixSameDAC(ok_xem,DAC_VOLTAGE) #comment this line out to skip setting the DACs

        ok_xem.Close()
        time.sleep(0.05)
        return jsonify({"status": 200})
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})

@blueprint.route("/fsbaselineok", methods=["POST"])
def fsbaselineok():
    try:
        global ok_xem, TERM_COUNT, TERM_COUNT_NE, FREQ, OUTEN, PSET, ADC_TO_USE, DAC_VOLTAGE
        global TX_SWITCH_EN_SETTINGS, PULSE_AND_SETTINGS, RX_SWITCH_EN_SETTINGS, GLOB_EN_SETTINGS, LO_CTRL_SETTINGS, ADC_CAP_SETTINGS
        global TX_SWITCH_EN_SETTINGS_NE, PULSE_AND_SETTINGS_NE, RX_SWITCH_EN_SETTINGS_NE, GLOB_EN_SETTINGS_NE, LO_CTRL_SETTINGS_NE, ADC_CAP_SETTINGS_NE
        global roi0, roi1, roi2, roi3
        data = request.get_json(force=True)
        projectdir = data['project_dir']
        roi0val = int(data['roi0'])
        roi0val = int(data['roi0'])
        roi1val = int(data['roi1'])
        roi2val = int(data['roi2'])
        roi3val = int(data['roi3'])
        fstartval = int(data['fstart'])
        fendval = int(data['fend'])
        fstepval = float(data['fstep'])

        if roi0val < 0 or roi1val < 0 or roi2val < 0 or roi3val < 0 or roi0val > 127 or roi1val > 127 or roi2val > 127 or roi3val > 127 or roi0val > roi1val or roi2val > roi3val:
            return jsonify({"status": 500, "message": f"Invalid ROI Input - row start: {roi0val}, row end: {roi1val}, col start: {roi2val}, col end: {roi3val}"})

        if fstartval > fendval:
            return jsonify({"status": 500, "message": f"Starting frequency should be smaller than ending frequency"})

        if fstepval < 0.01:
            return jsonify({"status": 500, "message": f"Frequency step cannot be less than 0.01 MHz"})

        f_start = fstartval
        f_end = fendval
        f_delta = fstepval
    
        timestamp = dt.now().strftime("%Y-%m-%d %H-%M-%S")
        save_dir = os.path.join(projectdir, timestamp)
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        baseline_save_dir = os.path.join(save_dir, "baseline")
        if not os.path.exists(baseline_save_dir):
            os.makedirs(baseline_save_dir)

        ok_xem.Open()
        ok_xem.SelectADC(0)
        ok_xem.SelectFakeADC(0)
        ok_xem.EnablePgen(0)
        ok_xem.Close()

        for myf in range(f_start*100,f_end*100,math.floor(f_delta*100)):    
            f_to_use = myf/100
            j_fp_vco.configureVCO_10khz_fsweep(ok_xem,f_to_use,OUTEN,PSET)
            echo_name = os.path.join(baseline_save_dir, f"Frequencyecho_{f_to_use}_.dat")
            noecho_name = os.path.join(baseline_save_dir, f"Frequencynoecho_{f_to_use}_.dat")
            _, _ = acquire_echo_noecho(True, echo_name, noecho_name)
        
        return jsonify({"status": 200, "save_dir": save_dir})
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})
    
@blueprint.route("/fssampleok", methods=["POST"])
def fssampleok():
    try:
        global ok_xem, TERM_COUNT, TERM_COUNT_NE, FREQ, OUTEN, PSET, ADC_TO_USE, DAC_VOLTAGE
        global TX_SWITCH_EN_SETTINGS, PULSE_AND_SETTINGS, RX_SWITCH_EN_SETTINGS, GLOB_EN_SETTINGS, LO_CTRL_SETTINGS, ADC_CAP_SETTINGS
        global TX_SWITCH_EN_SETTINGS_NE, PULSE_AND_SETTINGS_NE, RX_SWITCH_EN_SETTINGS_NE, GLOB_EN_SETTINGS_NE, LO_CTRL_SETTINGS_NE, ADC_CAP_SETTINGS_NE
        global roi0, roi1, roi2, roi3
        data = request.get_json(force=True)
        projectdir = data['project_dir']
        roi0val = int(data['roi0'])
        roi0val = int(data['roi0'])
        roi1val = int(data['roi1'])
        roi2val = int(data['roi2'])
        roi3val = int(data['roi3'])
        fstartval = int(data['fstart'])
        fendval = int(data['fend'])
        fstepval = float(data['fstep'])
        save_dir = data['savedir']
        image_type = data.get("image_type") or "IQ"
        vmax = float(data.get("vmax")) or 0
        vmin = float(data.get("vmin")) or 0

        if roi0val < 0 or roi1val < 0 or roi2val < 0 or roi3val < 0 or roi0val > 127 or roi1val > 127 or roi2val > 127 or roi3val > 127 or roi0val > roi1val or roi2val > roi3val:
            return jsonify({"status": 500, "message": f"Invalid ROI Input - row start: {roi0val}, row end: {roi1val}, col start: {roi2val}, col end: {roi3val}"})

        if fstartval > fendval:
            return jsonify({"status": 500, "message": f"Starting frequency should be smaller than ending frequency"})

        if fstepval < 0.01:
            return jsonify({"status": 500, "message": f"Frequency step cannot be less than 0.01 MHz"})

        f_start = fstartval
        f_end = fendval
        f_delta = fstepval
    
        timestamp = dt.now().strftime("%Y-%m-%d %H-%M-%S")
        
        baseline_save_dir = os.path.join(save_dir, "baseline")

        sample_save_dir = os.path.join(save_dir, timestamp)
        if not os.path.exists(sample_save_dir):
            os.makedirs(sample_save_dir)

        ok_xem.Open()
        ok_xem.SelectADC(0)
        ok_xem.SelectFakeADC(0)
        ok_xem.EnablePgen(0)
        ok_xem.Close()

        for myf in range(f_start*100,f_end*100,math.floor(f_delta*100)):    
            f_to_use = myf/100
            j_fp_vco.configureVCO_10khz_fsweep(ok_xem,f_to_use,OUTEN,PSET)
            echo_name = os.path.join(sample_save_dir, f"Frequencyecho_{f_to_use}_.dat")
            noecho_name = os.path.join(sample_save_dir, f"Frequencynoecho_{f_to_use}_.dat")
            sample_echo, sample_noecho = acquire_echo_noecho(True, echo_name, noecho_name)

            baseline_echo_name = os.path.join(baseline_save_dir, f"Frequencyecho_{f_to_use}_.dat")
            baseline_noecho_name = os.path.join(baseline_save_dir, f"Frequencynoecho_{f_to_use}_.dat")

            _, _, I_BASE_VOLTS, Q_BASE_VOLTS = geegah_hp.loadSavedRawDataROI(baseline_echo_name, roi0, roi1, roi2, roi3)
            _, _, I_BASE_NE_VOLTS, Q_BASE_NE_VOLTS = geegah_hp.loadSavedRawDataROI(baseline_noecho_name, roi0, roi1, roi2, roi3)
            _, _, I_SAMPLE_VOLTS, Q_SAMPLE_VOLTS = geegah_hp.loadSavedRawDataFromBytesROI(sample_echo, roi0, roi1, roi2, roi3)
            _, _, I_SAMPLE_NE_VOLTS, Q_SAMPLE_NE_VOLTS = geegah_hp.loadSavedRawDataFromBytesROI(sample_noecho, roi0, roi1, roi2, roi3)
            I_VOLTS_NEW, Q_VOLTS_NEW = I_SAMPLE_VOLTS, Q_SAMPLE_VOLTS

            fig3, ax3 = plt.subplots(1, 2, figsize=[14, 6])

            I = I_VOLTS_NEW - I_BASE_VOLTS
            subplot_title = "In-phase"
            if image_type == "MP":
                I = np.sqrt(I_VOLTS_NEW**2 + Q_VOLTS_NEW**2) - np.sqrt(I_BASE_VOLTS**2 + Q_BASE_VOLTS**2)
                subplot_title = "Magnitude"
            plot_diff(fig3, ax3[0], I, subplot_title, vmin, vmax, "Voltage (mV)")

            Q = Q_VOLTS_NEW - Q_BASE_VOLTS
            subplot_title_2 = "Out-of-phase"
            subplot_cbar_2 = "Voltage (mV)"
            if image_type == "MP":
                Q = np.arctan2(Q_VOLTS_NEW,I_VOLTS_NEW) - np.arctan2(Q_BASE_VOLTS,I_BASE_VOLTS)
                subplot_title_2 = "Phase"
                subplot_cbar_2 = "Radians"
            plot_diff(fig3, ax3[1], Q, subplot_title_2, vmin, vmax, subplot_cbar_2)

            title = ""
            if image_type == "MP":
                title = "Magnitude and Phase"
            else:
                title = "In-phase and Out-of-phase"
            fig3.suptitle(f"{title} at {f_to_use} MHz.")

            _fig_full = BytesIO()
            plt.savefig(_fig_full, format='png')
            _fig_full.seek(0)

            plt.close()
            plt.clf()

            fig_value = _fig_full.getvalue()

            _fig_full.read()
            encoded = base64.b64encode(fig_value).decode("utf-8")
            _fig_full.close()

            img_json = {
                "data": encoded
            }

            socketio.emit("fsLiveFeedImage", img_json)

        
        return jsonify({"status": 200})
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})

# Opal Kelly:

ok_live_feed = False

@blueprint.route("/okFindBoard", methods=["POST"])
def okFindBoard():
    try:
        global ok_xem
        if ok_xem:
            ok_xem = None
        ok_xem = fpga.fpga()
        board_name = ok_xem.BoardName()
        if board_name != "XEM7305":
            return jsonify({"status": 500, "message": "Board not found"})
        full_str = f"ID: {ok_xem.di.deviceID}, Serial Number: {ok_xem.di.serialNumber}"
        return jsonify({"status": 200, "board_name": full_str})
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})

@blueprint.route("/selectOkdirectory", methods=["POST"])
def selectOkdirectory():
    _return = {"status": 200}
    try:
        root = Tk()
        root.withdraw()
        directory_path = filedialog.askdirectory()
        root.destroy()
    except:
        return jsonify({"status": 500, "message": "Failed to open dialog"})
    return jsonify({"status": 200, "directory_path": directory_path})

@blueprint.route("/selectOkproject", methods=["POST"])
def selectOkproject():
    _return = {"status": 200}
    data = request.get_json(force=True)
    savedir = data['save_dir']
    projectdir = data['project_dir']
    try:
        projectpath = os.path.join(savedir, projectdir)
        if not os.path.exists(projectpath):
            os.makedirs(projectpath)
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})
    return jsonify({"status": 200, "directory_path": projectpath})

def update_frequency():
    global ok_xem, TERM_COUNT, TERM_COUNT_NE, FREQ, OUTEN, PSET, ADC_TO_USE, DAC_VOLTAGE
    global freq_i_max_ok, freq_q_max_ok, freq_iq_ok, i_mid_ok, q_mid_ok, scale_ok, shift_ok, to_adjust_ok

    ok_xem.Open()
    j_fp_vco.configureVCO_10khz(ok_xem, freq_iq_ok, OUTEN, PSET)
    ok_xem.Close()

def find_largest_magnitude_frequency(i_adj, q_adj, freqs):
    diff = np.abs(np.array(i_adj) - np.array(q_adj))
    threshold_val = 0.01

    equal_indices = np.where(diff <= 0.01)[0]
    signal = np.maximum(np.abs(np.array(i_adj)[equal_indices]), np.abs(np.array(q_adj)[equal_indices]))
    max_signal_index = equal_indices[np.argmax(signal)]
    I_equal_q_freq = freqs[max_signal_index]
    return I_equal_q_freq, max_signal_index

def find_max_IQ_freq(I_adj, Q_adj, freqs):
    maxI_index = np.argmax(I_adj)
    maxQ_index = np.argmax(Q_adj)
    maxI_freq = freqs[maxI_index]
    maxQ_freq = freqs[maxQ_index]
    return maxI_freq, maxQ_freq, maxI_index, maxQ_index

def calibrate_iq_signals(i, q):
    global freq_i_max_ok, freq_q_max_ok, freq_iq_ok, i_mid_ok, q_mid_ok, scale_ok, shift_ok, to_adjust_ok

    # Calculate basic statistics: max, min, midpoint, and range for both signals
    i_max, i_min = max(i), min(i)
    q_max, q_min = max(q), min(q)

    i_mid = (i_max + i_min) / 2
    q_mid = (q_max + q_min) / 2

    i_range = i_max - i_min
    q_range = q_max - q_min

    # Decide which signal to adjust based on range
    adjust_i = q_range > i_range

    # Calculate scale and shift
    if adjust_i:
        scale = q_range / i_range
        shift = q_mid - i_mid
        adjusted_i = [i_mid + (x - i_mid) * scale + shift for x in i]
        adjusted_q = q
    else:
        scale = i_range / q_range
        shift = i_mid - q_mid
        adjusted_q = [q_mid + (x - q_mid) * scale + shift for x in q]
        adjusted_i = i

    # Calculate new statistics after adjustment
    new_i_max, new_i_min = max(adjusted_i), min(adjusted_i)
    new_q_max, new_q_min = max(adjusted_q), min(adjusted_q)
    new_i_mid = (new_i_max + new_i_min) / 2
    new_q_mid = (new_q_max + new_q_min) / 2

    scale_ok = scale
    shift_ok = shift
    i_mid_ok = new_i_mid
    q_mid_ok = new_q_mid
    to_adjust_ok = "I" if adjust_i else "Q"


    # Return adjusted signals and calibration parameters
    # calibration_params = {
    #     "scale": scale,
    #     "shift": shift,
    #     "adjusted_i_mid": new_i_mid,
    #     "adjusted_q_mid": new_q_mid
    # }
    return adjusted_i, adjusted_q

def create_plot(freqs, i, q, start_frequency, end_frequency, ilabel="I Echo", qlabel="Q Echo", xLabel="Frequency (MHz)", yLabel="Echo (V)", plottitle="I and Q vs frequency (64, 64)", highlight_points=None):
    fig, ax = plt.subplots()
    ax.plot(freqs, i, label=ilabel)
    ax.plot(freqs, q, label=qlabel)

    if highlight_points:
        for point in highlight_points:
            ax.scatter(*point[0:2], label=point[2], edgecolors='black', facecolors=point[3], s=100, linewidths=2)


    ax.set_xlabel(xLabel)
    ax.set_ylabel(yLabel)
    ax.set_title(plottitle)
    ax.legend(loc="lower left")
    if start_frequency and end_frequency:
        ax.set_xlim(start_frequency, end_frequency)
    # ax.set_ylim(-10, 10)
    plt.tight_layout()
    _fig = BytesIO()
    plt.savefig(_fig, format="png")
    _fig.seek(0)
    plt.close(fig)
    return _fig

def calibrate_ok_2(projectdir):
    global ok_xem, TERM_COUNT, TERM_COUNT_NE, FREQ, OUTEN, PSET, ADC_TO_USE, DAC_VOLTAGE
    global freq_optimum_ok, freq_i_max_ok, freq_q_max_ok, freq_iq_ok, i_mid_ok, q_mid_ok, scale_ok, shift_ok, to_adjust_ok

    # end_frequency = 1880
    # start_frequency = 1800
    # frequency_interval = 0.5

    end_frequency = 1870
    start_frequency = 1830
    frequency_interval = 0.25

    i,q,freqs = [],[],[]  
    i_mat = []
    q_mat = []
    frame_number = 0
    calibration_directory_path = os.path.join(projectdir, "calibration-data")
    if not os.path.exists(calibration_directory_path):
        os.makedirs(calibration_directory_path)
    

    for freq in range(start_frequency*100,end_frequency*100,math.floor(frequency_interval*100)):
        freq_to_use = freq/100
        freqs.append(freq_to_use)

        ok_xem.Open()
        j_fp_vco.configTiming(ok_xem,TERM_COUNT,TX_SWITCH_EN_SETTINGS,PULSE_AND_SETTINGS,
                            RX_SWITCH_EN_SETTINGS,GLOB_EN_SETTINGS,LO_CTRL_SETTINGS,ADC_CAP_SETTINGS)
        ok_xem.Close()
        j_fp_vco.configureVCO_10khz_fsweep(ok_xem, freq_to_use, OUTEN, PSET)
        echo_file_name = os.path.join(calibration_directory_path, f"Frequencyecho_{freq_to_use}_.dat")
        myf_data_echo = j_fp_vco.acqSingleFrame_FSWEEP(ok_xem, ADC_TO_USE, echo_file_name)

        #myf_meas_data = j_fp_vco.acqSingleFrameCAL(ok_xem, ADC_TO_USE)
        I_ADC,Q_ADC,I_VOLTS,Q_VOLTS = j_fp_vco.loadSavedRawDataFromBytes(myf_data_echo)
        i.append(I_VOLTS[64,64])
        q.append(Q_VOLTS[64,64])
        i_mat.append(I_VOLTS)
        q_mat.append(Q_VOLTS)
        time.sleep(0.1)

        ok_xem.Open()
        j_fp_vco.configTiming(ok_xem,TERM_COUNT_NE,TX_SWITCH_EN_SETTINGS_NE,PULSE_AND_SETTINGS_NE,
                            RX_SWITCH_EN_SETTINGS_NE,GLOB_EN_SETTINGS_NE,LO_CTRL_SETTINGS_NE,ADC_CAP_SETTINGS_NE)
        ok_xem.Close()
        noecho_file_name = os.path.join(calibration_directory_path, f"Frequencynoecho_{freq_to_use}_.dat")
        myf_base_data_ne = j_fp_vco.acqSingleFrame_FSWEEP(ok_xem, ADC_TO_USE, noecho_file_name)                     
        time.sleep(0.1)
        
        if frame_number % 10 == 0:
            _fig = create_plot(freqs, i, q, start_frequency, end_frequency)
            encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
            _fig.close()
            img_json = {"data": encoded}
            socketio.emit("okLiveFeedImage", img_json)
        frame_number += 1

    adjusted_i, adjusted_q = calibrate_iq_signals(i, q)
    optimum_frequency, optimum_frequency_index = find_largest_magnitude_frequency(adjusted_i, adjusted_q, freqs)
    maxi, maxq, maxi_index, maxq_index = find_max_IQ_freq(adjusted_i, adjusted_q, freqs)
    j_fp_vco.configureVCO_10khz_fsweep(ok_xem, optimum_frequency, OUTEN, PSET)
    freq_optimum_ok = optimum_frequency

    highlight_points = [
        (optimum_frequency, adjusted_i[optimum_frequency_index], 'Optimum Frequency', 'red'),
        (maxi, adjusted_i[maxi_index], 'Max I Frequency', 'green'),
        (maxq, adjusted_q[maxq_index], 'Max Q Frequency', 'blue')
    ]
    
    _fig = create_plot(freqs, adjusted_i, adjusted_q, None, None, "I", "Q", "Frequency (MHz)", "Adjusted Echo (V)", "Adjusted I and Q vs frequency (64,64)", highlight_points)
    encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
    _fig.close()
    img_json = {"data": encoded}
    socketio.emit("okLiveFeedImage", img_json)
    return optimum_frequency, maxi, maxq

def adjust_iq_arrays(new_i_array, new_q_array):
    # global ok_xem, TERM_COUNT, TERM_COUNT_NE, FREQ, OUTEN, PSET, ADC_TO_USE, DAC_VOLTAGE
    # global freq_i_max_ok, freq_q_max_ok, freq_iq_ok, i_mid_ok, q_mid_ok, scale_ok, shift_ok, to_adjust_ok

    # scale = scale_ok
    # shift = shift_ok
    # adjusted_i_mid = i_mid_ok
    # adjusted_q_mid = q_mid_ok
    # to_adjust = to_adjust_ok

    # # Initialize lists to hold adjusted values
    # adjusted_new_i_array = []
    # adjusted_new_q_array = []

    # # Adjust each element in the I and Q arrays
    # if to_adjust == "I":  # This means I was adjusted in the calibration
    #     for new_i, new_q in zip(new_i_array, new_q_array):
    #         adjusted_new_i = adjusted_i_mid + (new_i - adjusted_i_mid) * scale + shift
    #         adjusted_new_q = new_q  # Q remains the same as it wasn't adjusted
    #         adjusted_new_i_array.append(adjusted_new_i)
    #         adjusted_new_q_array.append(adjusted_new_q)
    # else:  # This means Q was adjusted in the calibration
    #     for new_i, new_q in zip(new_i_array, new_q_array):
    #         adjusted_new_q = adjusted_q_mid + (new_q - adjusted_q_mid) * scale + shift
    #         adjusted_new_i = new_i  # I remains the same as it wasn't adjusted
    #         adjusted_new_i_array.append(adjusted_new_i)
    #         adjusted_new_q_array.append(adjusted_new_q)

    # return np.array(adjusted_new_i_array), np.array(adjusted_new_q_array)
    return np.array(new_i_array), np.array(new_q_array)

@blueprint.route("/okFastImaging", methods=["POST"])
def okFastImaging():
    try:
        _return = {"status": 200}
        data = request.get_json(force=True)
        projectdir = data['project_dir']
        roi0val = int(data['roi0'])
        roi1val = int(data['roi1'])
        roi2val = int(data['roi2'])
        roi3val = int(data['roi3'])
        if roi0val < 0 or roi1val < 0 or roi2val < 0 or roi3val < 0 or roi0val > 127 or roi1val > 127 or roi2val > 127 or roi3val > 127 or roi0val > roi1val or roi2val > roi3val:
            return jsonify({"status": 500, "message": f"Invalid ROI Input - row start: {roi0val}, row end: {roi1val}, col start: {roi2val}, col end: {roi3val}"})
        #initialize fpga:
        global ok_xem, TERM_COUNT, TERM_COUNT_NE, FREQ, OUTEN, PSET, ADC_TO_USE, DAC_VOLTAGE
        global TX_SWITCH_EN_SETTINGS, PULSE_AND_SETTINGS, RX_SWITCH_EN_SETTINGS, GLOB_EN_SETTINGS, LO_CTRL_SETTINGS, ADC_CAP_SETTINGS
        global TX_SWITCH_EN_SETTINGS_NE, PULSE_AND_SETTINGS_NE, RX_SWITCH_EN_SETTINGS_NE, GLOB_EN_SETTINGS_NE, LO_CTRL_SETTINGS_NE, ADC_CAP_SETTINGS_NE
        global roi0, roi1, roi2, roi3
        roi0, roi1, roi2, roi3 = roi0val, roi1val, roi2val, roi3val
        if ok_xem:
            ok_xem = None
        ok_xem = fpga.fpga()
        board_name = ok_xem.BoardName()
        if board_name != "XEM7305":
            show_alert(f"Problem: board name = {board_name}")  
            sys.exit()
        bit_file_name = "xem7305_GG226.bit"
        ok_xem.Configure(bit_file_name)
        j_fp_vco.configureVCO(ok_xem,FREQ,OUTEN,PSET)
        ok_xem.SelectFakeADC(0)
        j_fp_vco.configTiming(ok_xem,TERM_COUNT,TX_SWITCH_EN_SETTINGS,PULSE_AND_SETTINGS,RX_SWITCH_EN_SETTINGS,GLOB_EN_SETTINGS,LO_CTRL_SETTINGS,ADC_CAP_SETTINGS)
        j_fp_vco.setAllPixSameDAC(ok_xem,DAC_VOLTAGE) #comment this line out to skip setting the DACs

        ok_xem.Close()
        time.sleep(0.05)

        optimum_freq, maxi, maxq = calibrate_ok_2(projectdir)
        # update_frequency()
        acquire_air_ok(projectdir)
        return jsonify({"status": 200, "optimum_frequency": optimum_freq, "maxi": maxi, "maxq": maxq})
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})

@blueprint.route("/okRetakeAirData", methods=["POST"])
def okRetakeAirData():
    try:
        global roi0, roi1, roi2, roi3
        data = request.get_json(force=True)
        projectdir = data['project_dir']
        roi0val = int(data['roi0'])
        roi1val = int(data['roi1'])
        roi2val = int(data['roi2'])
        roi3val = int(data['roi3'])
        if roi0val < 0 or roi1val < 0 or roi2val < 0 or roi3val < 0 or roi0val > 127 or roi1val > 127 or roi2val > 127 or roi3val > 127 or roi0val > roi1val or roi2val > roi3val:
            return jsonify({"status": 500, "message": "Invalid ROI Input - row start: {roi0val}, row end: {roi1val}, col start: {roi2val}, col end: {roi3val}"})
        roi0, roi1, roi2, roi3 = roi0val, roi1val, roi2val, roi3val
        acquire_air_ok(projectdir)
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})
    return jsonify({"status": 200})

def acquire_echo_noecho(save=False, echo_fn=None, noecho_fn=None):
    global ok_xem, TERM_COUNT, TERM_COUNT_NE, FREQ, OUTEN, PSET, ADC_TO_USE, DAC_VOLTAGE
    global TX_SWITCH_EN_SETTINGS, PULSE_AND_SETTINGS, RX_SWITCH_EN_SETTINGS, GLOB_EN_SETTINGS, LO_CTRL_SETTINGS, ADC_CAP_SETTINGS
    global TX_SWITCH_EN_SETTINGS_NE, PULSE_AND_SETTINGS_NE, RX_SWITCH_EN_SETTINGS_NE, GLOB_EN_SETTINGS_NE, LO_CTRL_SETTINGS_NE, ADC_CAP_SETTINGS_NE
    global roi0, roi1, roi2, roi3

    geegah_hp.configTiming(ok_xem,TERM_COUNT,TX_SWITCH_EN_SETTINGS,PULSE_AND_SETTINGS,RX_SWITCH_EN_SETTINGS,GLOB_EN_SETTINGS,LO_CTRL_SETTINGS,ADC_CAP_SETTINGS)    
    if save:
        echo_data = geegah_hp.acqSingleFrameROI(ok_xem, ADC_TO_USE, echo_fn, roi0, roi1, roi2, roi3)
    else:
        echo_data = geegah_hp.acqSingleFrameROINoSave(ok_xem, ADC_TO_USE, roi0, roi1, roi2, roi3)
    time.sleep(0.1)
    geegah_hp.configTiming(ok_xem,TERM_COUNT_NE,TX_SWITCH_EN_SETTINGS_NE,PULSE_AND_SETTINGS_NE,RX_SWITCH_EN_SETTINGS_NE,GLOB_EN_SETTINGS_NE,LO_CTRL_SETTINGS_NE,ADC_CAP_SETTINGS_NE)
    if save:
        noecho_data = geegah_hp.acqSingleFrameROI(ok_xem, ADC_TO_USE, noecho_fn, roi0, roi1, roi2, roi3)
    else:
        noecho_data = geegah_hp.acqSingleFrameROINoSave(ok_xem, ADC_TO_USE, roi0, roi1, roi2, roi3)
    time.sleep(0.1)
    return echo_data, noecho_data

def acquire_air_ok(projectdir):
    try:
        global ok_xem, TERM_COUNT, TERM_COUNT_NE, FREQ, OUTEN, PSET, ADC_TO_USE, DAC_VOLTAGE
        global TX_SWITCH_EN_SETTINGS, PULSE_AND_SETTINGS, RX_SWITCH_EN_SETTINGS, GLOB_EN_SETTINGS, LO_CTRL_SETTINGS, ADC_CAP_SETTINGS
        global TX_SWITCH_EN_SETTINGS_NE, PULSE_AND_SETTINGS_NE, RX_SWITCH_EN_SETTINGS_NE, GLOB_EN_SETTINGS_NE, LO_CTRL_SETTINGS_NE, ADC_CAP_SETTINGS_NE
        global roi0, roi1, roi2, roi3
        ok_xem.Open()
        ok_xem.SetROI(roi0,roi1,roi2,roi3)
        ok_xem.SelectADC(ADC_TO_USE)
        ok_xem.SelectFakeADC(0)
        ok_xem.EnablePgen(0)
        ok_xem.Close()

        echo_data, noecho_data = acquire_echo_noecho(True, os.path.join(projectdir, "baseADC2.dat"), os.path.join(projectdir, "baseADC2-no-echo.dat"))

        _, _, I_BASE_VOLTS, Q_BASE_VOLTS = geegah_hp.loadSavedRawDataFromBytesROI(echo_data, roi0, roi1, roi2, roi3)
        I_BASE_NEW, Q_BASE_NEW = adjust_iq_arrays(I_BASE_VOLTS, Q_BASE_VOLTS)

        with open(os.path.join(projectdir, "air-echo-I.dat"), "wb") as f3:
            f3.write(I_BASE_NEW)
        with open(os.path.join(projectdir, "air-echo-Q.dat"), "wb") as f4:
            f4.write(Q_BASE_NEW)

        _, _, NI_BASE_VOLTS, NQ_BASE_VOLTS = geegah_hp.loadSavedRawDataFromBytesROI(noecho_data, roi0, roi1, roi2, roi3)
        NI_BASE_NEW, NQ_BASE_NEW = adjust_iq_arrays(NI_BASE_VOLTS, NQ_BASE_VOLTS)

        with open(os.path.join(projectdir, "air-noecho-I.dat"), "wb") as f3:
            f3.write(NI_BASE_NEW)
        with open(os.path.join(projectdir, "air-noecho-Q.dat"), "wb") as f4:
            f4.write(NQ_BASE_NEW)

        data = {'roi0': roi0, 'roi1': roi1, 'roi2': roi2, 'roi3': roi3}
        with open(os.path.join(projectdir, 'rois.json'), 'w') as file:
            json.dump(data, file)

        return
    except Exception as e:
        show_alert(e)

@blueprint.route("/okstartlivefeed", methods=["POST"])
def ok_start_live_feed():
    try:
        data = request.get_json(force=True)
        projectdir = data.get("project_dir")

        image_type = data.get("image_type") or "IQ"
        vmax = float(data.get("vmax")) or 0
        vmin = float(data.get("vmin")) or 0
        frame_interval = float(data.get("frame_interval")) or 0
        is_plot = data.get("is_plot")
        is_record = data.get("is_record")

        global ok_live_feed
        if not ok_live_feed:
            ok_live_feed = True
        thread = threading.Thread(
            target=ok_send_live_feed,
            args=(projectdir, image_type, vmax, vmin, frame_interval, is_plot, is_record)
        )
        thread.start()
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})
    
    return jsonify({"status": 200})

@blueprint.route("/okstoplivefeed", methods=["POST"])
def ok_stop_live_feed():
    try:
        _json = request.get_json(force=True)
        global ok_live_feed
        if ok_live_feed:
            ok_live_feed = False
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})
    return jsonify({"status": 200})

def ok_send_live_feed(projectdir, image_type, vmax, vmin, frame_interval, is_plot, is_record):
    try:
        global ok_xem, TERM_COUNT, TERM_COUNT_NE, FREQ, OUTEN, PSET, ADC_TO_USE, DAC_VOLTAGE
        global TX_SWITCH_EN_SETTINGS, PULSE_AND_SETTINGS, RX_SWITCH_EN_SETTINGS, GLOB_EN_SETTINGS, LO_CTRL_SETTINGS, ADC_CAP_SETTINGS
        global TX_SWITCH_EN_SETTINGS_NE, PULSE_AND_SETTINGS_NE, RX_SWITCH_EN_SETTINGS_NE, GLOB_EN_SETTINGS_NE, LO_CTRL_SETTINGS_NE, ADC_CAP_SETTINGS_NE
        global freq_optimum_ok, freq_i_max_ok, freq_q_max_ok, freq_iq_ok, i_mid_ok, q_mid_ok, scale_ok, shift_ok, to_adjust_ok
        global roi0, roi1, roi2, roi3

        timestamp = dt.now().strftime("%Y-%m-%d %H-%M-%S")
        recdir = ""

        if is_record:
            recdir = os.path.join(projectdir, timestamp)
            if not os.path.exists(recdir):
                os.makedirs(recdir)
            
            for dn in ("echo", "no-echo", "plotted-images", "video"):
                _dn = os.path.join(recdir, dn)
                if not os.path.exists(_dn):
                    os.makedirs(_dn)

            try:
                shutil.copy(os.path.join(projectdir, "baseADC2.dat"), recdir)
                shutil.copy(os.path.join(projectdir, "baseADC2-no-echo.dat"), recdir)
                shutil.copy(os.path.join(projectdir, "air-echo-I.dat"), recdir)
                shutil.copy(os.path.join(projectdir, "air-echo-Q.dat"), recdir)
                shutil.copy(os.path.join(projectdir, "air-noecho-I.dat"), recdir)
                shutil.copy(os.path.join(projectdir, "air-noecho-Q.dat"), recdir)
                shutil.copy(os.path.join(projectdir, "rois.json"), recdir)
                shutil.copy(os.path.join(projectdir, "calibration-data"), recdir)
            except:
                pass

        # with open(os.path.join(projectdir, "baseADC2.dat"), "rb") as f:
        #     air_echo_bytes = f.read()

        # I_BASE_VOLTS = loadSavedRawDataROI(os.path.join(projectdir, "air-echo-I.dat"), roi0, roi1, roi2, roi3)
        # Q_BASE_VOLTS = loadSavedRawDataROI(os.path.join(projectdir, "air-echo-Q.dat"), roi0, roi1, roi2, roi3)
        # NI_BASE_VOLTS = loadSavedRawDataROI(os.path.join(projectdir, "air-noecho-I.dat"), roi0, roi1, roi2, roi3)
        # NQ_BASE_VOLTS = loadSavedRawDataROI(os.path.join(projectdir, "air-noecho-Q.dat"), roi0, roi1, roi2, roi3)

        # I_BASE_VOLTS = loadSavedSampleData(os.path.join(projectdir, "air-echo-I.dat"))
        # Q_BASE_VOLTS = loadSavedSampleData(os.path.join(projectdir, "air-echo-Q.dat"))
        # NI_BASE_VOLTS = loadSavedSampleData(os.path.join(projectdir, "air-noecho-I.dat"))
        # NQ_BASE_VOLTS = loadSavedSampleData(os.path.join(projectdir, "air-noecho-Q.dat"))


        _, _, I_BASE_VOLTS, Q_BASE_VOLTS = geegah_hp.loadSavedRawDataROI(os.path.join(projectdir, "baseADC2.dat"), roi0, roi1, roi2, roi3)
        _, _, NI_BASE_VOLTS, NQ_BASE_VOLTS = geegah_hp.loadSavedRawDataROI(os.path.join(projectdir, "baseADC2-no-echo.dat"), roi0, roi1, roi2, roi3)

        # _, _, I_BASE_VOLTS, Q_BASE_VOLTS = j_fp_vco.convertByteToADCVOLTS(air_echo_bytes)
        

        ok_xem.Open()
        ok_xem.SelectADC(ADC_TO_USE)
        ok_xem.SelectFakeADC(0)
        ok_xem.EnablePgen(0)
        ok_xem.Close()

        frameNum = 1

        if not is_plot:
            fig, ax = plt.subplots()
            ax.axis('off')
            ax.text(0.5, 0.5, "Acquiring frames, click Stop to finish Imaging", fontsize=20, ha='center')
            _fig_text = BytesIO()
            plt.savefig(_fig_text, format='png', bbox_inches='tight', pad_inches=0)
            plt.close()
            plt.clf()
            _fig_text.read()
            encoded = base64.b64encode(_fig_text.getvalue()).decode("utf-8")
            _fig_text.close()
            img_json = {
                "data": encoded
            }
            socketio.emit("okLiveFeedImage", img_json)

        global ok_live_feed
        while ok_live_feed:
            meas_echo_data, meas_noecho_data = acquire_echo_noecho()

            # _, _, I_VOLTS, Q_VOLTS = j_fp_vco.convertByteToADCVOLTS(meas_echo_data)
            # _, _, I_NE_VOLTS, Q_NE_VOLTS = j_fp_vco.convertByteToADCVOLTS(meas_noecho_data)
            _, _, I_VOLTS, Q_VOLTS = geegah_hp.loadSavedRawDataFromBytesROI(meas_echo_data, roi0, roi1, roi2, roi3)
            _, _, I_NE_VOLTS, Q_NE_VOLTS = geegah_hp.loadSavedRawDataFromBytesROI(meas_noecho_data, roi0, roi1, roi2, roi3)
            I_VOLTS_NEW, Q_VOLTS_NEW = adjust_iq_arrays(I_VOLTS, Q_VOLTS)
            I_NE_VOLTS_NEW, Q_NE_VOLTS_NEW = adjust_iq_arrays(I_NE_VOLTS, Q_NE_VOLTS)

            fig3, ax3 = plt.subplots(1, 2, figsize=[14, 6])

            I = I_VOLTS_NEW - I_BASE_VOLTS
            subplot_title = "In-phase"
            if image_type == "MP":
                I = np.sqrt(I_VOLTS_NEW**2 + Q_VOLTS_NEW**2) - np.sqrt(I_BASE_VOLTS**2 + Q_BASE_VOLTS**2)
                subplot_title = "Magnitude"
            plot_diff(fig3, ax3[0], I, subplot_title, vmin, vmax, "Voltage (mV)")

            Q = Q_VOLTS_NEW - Q_BASE_VOLTS
            subplot_title_2 = "Out-of-phase"
            subplot_cbar_2 = "Voltage (mV)"
            if image_type == "MP":
                Q = np.arctan2(Q_VOLTS_NEW,I_VOLTS_NEW) - np.arctan2(Q_BASE_VOLTS,I_BASE_VOLTS)
                subplot_title_2 = "Phase"
                subplot_cbar_2 = "Radians"
            plot_diff(fig3, ax3[1], Q, subplot_title_2, vmin, vmax, subplot_cbar_2)

            title = ""
            if image_type == "MP":
                title = "Magnitude and Phase"
            else:
                title = "In-phase and Out-of-phase"
            fig3.suptitle(f"{title} at {freq_optimum_ok} MHz. Frame number: {frameNum}")

            _fig_full = BytesIO()
            plt.savefig(_fig_full, format='png')
            _fig_full.seek(0)

            plt.close()
            plt.clf()

            fig_value = _fig_full.getvalue()

            if is_plot:

                _fig_full.read()
                encoded = base64.b64encode(fig_value).decode("utf-8")
                _fig_full.close()

                img_json = {
                    "data": encoded
                }

                socketio.emit("okLiveFeedImage", img_json)

            if is_record:
                with open(os.path.join(recdir, "echo", f"echo_I_{frameNum}_o.dat"), "wb") as f:
                    f.write(I_VOLTS_NEW)

                with open(os.path.join(recdir, "echo", f"echo_Q_{frameNum}_o.dat"), "wb") as f:
                    f.write(Q_VOLTS_NEW)

                with open(os.path.join(recdir, "no-echo", f"noecho_I_{frameNum}_o.dat"), "wb") as f:
                    f.write(I_NE_VOLTS_NEW)

                with open(os.path.join(recdir, "no-echo", f"noecho_Q_{frameNum}_o.dat"), "wb") as f:
                    f.write(Q_NE_VOLTS_NEW)

                with open(os.path.join(recdir, "plotted-images", f"{frameNum}_o.png"), "wb") as f:
                    f.write(fig_value)

            frameNum += 1

            if frame_interval:
                time.sleep(frame_interval)

        ok_xem.Close()

        if is_record:
            img_save_dir = f"{recdir}/plotted-images/"
            vid_save_dir = f"{recdir}/video/"
            start_frame = 1
            stop_frame = frameNum
            fps = 6

            img_array = []

            for count3 in range(start_frame, stop_frame):
                imgname = os.path.join(img_save_dir, f"{count3}_o.png")
                # imgname = img_save_dir + "frame" + str(count3) + ".png"

                img = cv2.imread(imgname)
                height, width, layers = img.shape
                size = (width, height)
                img_array.append(img)

            # vid_file_name = vid_save_dir + 'video.avi'
            out = cv2.VideoWriter(os.path.join(vid_save_dir, "video.avi"), cv2.VideoWriter_fourcc(*'DIVX'), fps, size)

            for i in range(len(img_array)):
                out.write(img_array[i])
            out.release()

    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})

    return jsonify({"status": 200})
    
def plot_diff(fig, ax, value, plot="", vmin=0, vmax=0, cbarval="Voltage (mV)"):
    #plot difference in millivolts
    if vmin or vmax:
        pos = ax.imshow(
            np.rot90(1000 * value, 2),
            cmap="inferno",
            vmin=vmin,
            vmax=vmax
        )
    else:
        pos = ax.imshow(np.rot90(1000 * value, 2), cmap="inferno")
    cbar = fig.colorbar(pos, ax=ax)
    ax.set_title(f"{plot} Data Meas - Base")
    cbar.ax.set_ylabel(cbarval, rotation=90)

# RPi4:

rpi_host ="169.254.202.26"
rpi_port = 5560  # initiate port no above 1024
rpi_SIZE = 65536 #16384 #8192 
rpi_client_socket = None
rpi_cmd_dummy = 'senddmy'
rpi_cmd_frame = 'sendfrm'
rpi_cmd_done = 'zzzdone'
rpi_AIR_I = None
rpi_AIR_Q = None 
rpi_I_A_VOLTS = None 
rpi_Q_A_VOLTS = None
rpi_Mag_A = None
rpi_Phase_A = None

def writeFileRPi4(file_name, byte_data):
    with open(file_name, "wb") as f:
        f.write(byte_data)

def readFrameRPi4():
    global rpi_host, rpi_port, rpi_SIZE, rpi_client_socket, rpi_cmd_dummy, rpi_cmd_frame, rpi_cmd_done, rpi_Mag_A, rpi_Phase_A
    #packet size
    exp_length = 65536
    # send command to take an image
    message = rpi_cmd_frame 
    # receive data back
    rpi_client_socket.send(message.encode())
    
    #for receiving frame data separated over multiple packets
    split_list = []
    #length of currently received data
    count = 0
    while (count < exp_length):
        data = rpi_client_socket.recv(rpi_SIZE)  # receive response
        datalen = len(data)
        count= count + datalen #update the number of received bytes
        message = 'rx_rcved ' + str(datalen).zfill(3) #acknowledge message
        #append received frame segments to list
        split_list.append(data)
        if (count <exp_length):
            rpi_client_socket.send(message.encode())  # send message
        
    #combine all the frame segments
    combined_bytes = split_list[0]
    for count in range(1,len(split_list)):
        combined_bytes = combined_bytes + split_list[count]
    #return the full frame
    return combined_bytes

def convertADCToVoltsRPi4(I_IMAGE, Q_IMAGE):
    I_IMAGE_ADC = I_IMAGE/16 #correct bit shift
    Q_IMAGE_ADC = Q_IMAGE/16 #correct bit shift
    I_IMAGE_VOLTS = I_IMAGE_ADC*1e-3 #convert to volts
    Q_IMAGE_VOLTS = Q_IMAGE_ADC*1e-3 #convert to volts
    return I_IMAGE_ADC, Q_IMAGE_ADC, I_IMAGE_VOLTS, Q_IMAGE_VOLTS

def convertToIQImageRPi4(byte_data):
    wi = 0
    imgBytesI = np.zeros(128*128)
    imgBytesQ = np.zeros(128*128)
    for row in range (128):
        for col in range(128):
            wi = row*128 + col
            iwrd = (byte_data[4 * wi + 1] + 256*byte_data[4 * wi + 0])
            qwrd = (byte_data[4 * wi + 3] + 256*byte_data[4 * wi + 2])
            #iwrd = (byte_data[4 * wi + 0] + 256*byte_data[4 * wi + 1])
            #qwrd = (byte_data[4 * wi + 2] + 256*byte_data[4 * wi + 3])
            
            imgBytesI[wi] = iwrd
            imgBytesQ[wi] = qwrd
            
    J_MYIMAGE_I=imgBytesI.reshape([128,128])
    J_MYIMAGE_Q=imgBytesQ.reshape([128,128])
    return J_MYIMAGE_I, J_MYIMAGE_Q

@blueprint.route("/rpi4startlivefeed", methods=["POST"])
def rpi4_start_live_feed():
    try:
        data = request.get_json(force=True)
        projectdir = data.get("project_dir")
        # image_type = data.get("image_type") or "IQ"
        vmax = float(data.get("vmax")) or 0
        vmin = float(data.get("vmin")) or 0
        frame_interval = float(data.get("frame_interval")) or 0
        is_plot = data.get("is_plot")
        is_record = data.get("is_record")

        global rpi4_live_feed

        if not rpi4_live_feed:
            rpi4_live_feed = True
        thread = threading.Thread(
            target=rpi4_send_live_feed,
            args=(projectdir, vmax, vmin, frame_interval, is_plot, is_record)
        )
        thread.start()

    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})

    return jsonify({"status": 200})

@blueprint.route("/rpi4stoplivefeed", methods=["POST"])
def rpi4_stop_live_feed():

    _json = request.get_json(force=True)

    _return = {"status": 200}

    global rpi4_live_feed

    if rpi4_live_feed:
        rpi4_live_feed = False

    return jsonify(_return)

@blueprint.route("/rpi4fastimaging", methods=["POST"])
def rpi4_fast_imaging():
    try:
        data = request.get_json(force=True)
        projectdir = data.get("project_dir")
        rpiMode = data.get("rpi_mode")
        rpiTiming = data.get("rpi_timing")
        rpiFrequency = data.get("rpi_frequency")

        # rpiMode = "1"
        # rpiTiming = "125"
        # rpiFrequency = "185300"


        global rpi_host, rpi_port, rpi_SIZE, rpi_client_socket, rpi_cmd_dummy, rpi_cmd_frame, rpi_cmd_done
        
        modestring = f'mmmmmm{rpiMode}'
        rpi_client_socket.send(modestring.encode())
        time.sleep(3)
        timingstring = f'tttt{rpiTiming}'
        rpi_client_socket.send(timingstring.encode())
        time.sleep(3)
        # freqstring = f'a{int(rpiFrequency)*100}'
        # rpi_client_socket.send(freqstring.encode())
        # time.sleep(3)

        rpi_client_socket.send(rpi_cmd_dummy.encode())
        data = rpi_client_socket.recv(rpi_SIZE)
        rpi_client_socket.send(rpi_cmd_dummy.encode())
        data = rpi_client_socket.recv(rpi_SIZE)
        return rpi4_air_acquire(projectdir)
    except Exception as e:
        rpi_client_socket.close()
        return jsonify({"status": 500, "message": str(e)})

    return jsonify({"status": 200})

@blueprint.route("/rpiFindBoard", methods=["POST"])
def rpiFindBoard():
    try:
        data = request.get_json(force=True)
        ip_addr_rpi = data.get("ip_addr_rpi")
        global rpi_host, rpi_port, rpi_SIZE, rpi_client_socket, rpi_cmd_dummy, rpi_cmd_frame, rpi_cmd_done
        # if ip_addr_rpi:
        #     rpi_host = ip_addr_rpi
        rpi_client_socket = socket.socket()        
        rpi_client_socket.settimeout(5)        
        rpi_client_socket.connect((rpi_host, rpi_port))
        full_address = f"{rpi_host}:{rpi_port}"
        # rpi_client_socket.close()
        return jsonify({"status": 200, "address": full_address})
    except Exception as e:
        rpi_client_socket.close()
        return jsonify({"status": 500, "message": str(e)})

# @blueprint.route("/rpi4airacquire", methods=["POST"])
def rpi4_air_acquire(projectdir):
    try:
        global rpi_host, rpi_port, rpi_SIZE, rpi_client_socket, rpi_cmd_dummy, rpi_cmd_frame, rpi_cmd_done, rpi_Mag_A, rpi_Phase_A
        global rpi_AIR_I, rpi_AIR_Q, rpi_I_A_VOLTS, rpi_Q_A_VOLTS
        combined_bytes = readFrameRPi4()
        rpi_AIR_I, rpi_AIR_Q = convertToIQImageRPi4(combined_bytes)
        _, _, rpi_I_A_VOLTS, rpi_Q_A_VOLTS = convertADCToVoltsRPi4(rpi_AIR_I, rpi_AIR_Q)
        rpi_Mag_A = np.sqrt(np.square(rpi_I_A_VOLTS)+np.square(rpi_Q_A_VOLTS))
        rpi_Phase_A = np.arctan2(rpi_I_A_VOLTS, rpi_Q_A_VOLTS)
        writeFileRPi4(os.path.join(projectdir, "base-air-echo.dat"), combined_bytes)
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})

    return jsonify({"status": 200})

# def rpi4_send_live_feed(projectdir, vmax, vmin, frame_interval, is_plot, is_record):

@blueprint.route("/rpi4sendlivefeed", methods=["POST"])
def rpi4_send_live_feed():
    try:
        data = request.get_json(force=True)
        projectdir = data.get("project_dir")
        # image_type = data.get("image_type") or "IQ"
        vmax = float(data.get("vmax")) or 0
        vmin = float(data.get("vmin")) or 0
        frame_interval = float(data.get("frame_interval")) or 0
        is_plot = data.get("is_plot")
        is_record = data.get("is_record")

        global rpi_host, rpi_port, rpi_SIZE, rpi_client_socket, rpi_cmd_dummy, rpi_cmd_frame, rpi_cmd_done, rpi_Mag_A, rpi_Phase_A
        global rpi_AIR_I, rpi_AIR_Q, rpi_I_A_VOLTS, rpi_Q_A_VOLTS
        global rpi_live_feed
        timestamp = dt.now().strftime("%Y-%m-%d %H-%M-%S")
        recdir = ""

        if is_record:
            recdir = os.path.join(projectdir, timestamp)
            if not os.path.exists(recdir):
                os.makedirs(recdir)
            
            for dn in ("echo", "no-echo", "plotted-images", "raw-images", "video"):
                _dn = os.path.join(recdir, dn)
                if not os.path.exists(_dn):
                    os.makedirs(_dn)

        fig2,ax2 = plt.subplots(1)
        mytitle = fig2.suptitle('Out of phase (V):  ')
        im2 = np.flipud(np.rot90(rpi_Q_A_VOLTS,1))
        pos201 = ax2.imshow(im2, vmin = vmin, vmax = vmax, cmap = 'inferno', interpolation = 'gaussian')
        fig2.colorbar(pos201)
        base_title ='Real-time Ultrasonic image (V):  '
        
        frameNum = 0
        for iii in range(25):
            frameNum += 1
            combined_bytes = readFrameRPi4()
            F_IMG_I, F_IMG_Q = convertToIQImageRPi4(combined_bytes);
            _, _, I_S_VOLTS, Q_S_VOLTS = convertADCToVoltsRPi4(F_IMG_I, F_IMG_Q)
            Mag_S = np.sqrt(np.square(I_S_VOLTS)+np.square(Q_S_VOLTS))
            Phase_S = np.arctan2(I_S_VOLTS, Q_S_VOLTS)
            Q_del2 = F_IMG_Q  - rpi_AIR_Q
            mytitle.set_text(base_title+str(frameNum))
            
            sub_image = np.flipud(np.rot90(Mag_S-rpi_Mag_A,1))
            sub_image = np.rot90(sub_image,3)
            
            pos201.set_data(sub_image)
            pos201.set_clim(-0.001,0.001)

            img_data = BytesIO()
            fig2.savefig(img_data, format='png')
            img_data.seek(0)

            plt.close()
            plt.clf()

            fig_value = img_data.getvalue()

            if is_plot:
                img_data.read()
                encoded = base64.b64encode(fig_value).decode("utf-8")
                img_data.close()

                img_json = {
                    "data": encoded
                }

                socketio.emit("okLiveFeedImage", img_json)

            if is_record:
                with open(os.path.join(recdir, "echo", f"{frameNum}_r.dat"), "wb") as f:
                    f.write(combined_bytes)

                with open(os.path.join(recdir, "plotted-images", f"{frameNum}_r.png"), "wb") as f:
                    f.write(fig_value)
            
            if frame_interval:
                time.sleep(frame_interval)
    
    except Exception as e:
        return jsonify({"status": 500, "message": str(e)})

    return jsonify({"status": 200})




@blueprint.route("/postprocess_lineplot_right", methods=["POST"])
def postprocess_lineplot_right(): #plots histogram in right window
    try:
        data = request.get_json(force=True)
        directory = data['directory_name']
        frameNum = int(data['frame_num'])
        axis = data['axis']  # 'row' or 'column'
        index = int(data['index'])

        mag_metric = postprocessLeftArray(frameNum, directory, "Magnitude")
        phase_metric = postprocessLeftArray(frameNum, directory, "Phase")

        if axis == 'row':
            values_mag = mag_metric[index, :]
            values_phase = phase_metric[index, :]
        elif axis == 'column':
            values_mag = mag_metric[:, index]
            values_phase = phase_metric[:, index]
        else:
            raise ValueError("Invalid axis value. Must be 'row' or 'column'.")


        _fig = line_plot([values_mag, values_phase], axis, index)

        _fig.read()
        encoded = base64.b64encode(_fig.getvalue()).decode("utf-8")
        _fig.close()

        img_json = {
            "data": encoded,
            "status": 200
        }

        socketio.emit("plotright", img_json)
        return jsonify({"status": 200})
    except Exception as e:
        show_alert(e)




@blueprint.route("/postprocess_save_lineplot_right", methods=["POST"])
def postprocess_save_lineplot_right():
    data = request.get_json(force=True)
    directory = data['directory_name']
    frameStart = int(data['line_frame_start'])
    frameEnd = int(data['line_frame_end'])

    save_folder_path = getPostprocessSaveDirectory(directory, "Magnitude and Phase", "Lineplots", frameStart, frameEnd, dt.now().strftime("%Y-%m-%d %H-%M-%S"))

    I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3 = getAirData(directory)

    axis = data['axis']  # 'row' or 'column'
    index = int(data['index'])

    for frameNum in range(frameStart, frameEnd + 1):
        #result = postprocessLeftArrayFull(frameNum, directory, computationType, I_AE, Q_AE, I_ANE, Q_ANE, roi0, roi1, roi2, roi3)
        #_fig = hist_plot(result, computationType,histogramVmax, histogramVmin, bins, alpha=0.6)
        

        mag_metric = postprocessLeftArray(frameNum, directory, "Magnitude")
        phase_metric = postprocessLeftArray(frameNum, directory, "Phase")

        if axis == 'row':
            values_mag = mag_metric[index, :]
            values_phase = phase_metric[index, :]
        elif axis == 'column':
            values_mag = mag_metric[:, index]
            values_phase = phase_metric[:, index]
        else:
            raise ValueError("Invalid axis value. Must be 'row' or 'column'.")

        _fig = line_plot([values_mag, values_phase], axis, index)

        
        figValue = _fig.getvalue()
        img_file = f"{save_folder_path}/frame{frameNum}.png"
        with open(img_file, "wb") as f:
            f.write(figValue)

    try:
        saveVideo(save_folder_path, frameStart, frameEnd)
    except Exception as e:
        show_alert("Video could not be saved")

    return jsonify({"status": 200})



import base64
import cv2
import json
import numpy as np
import os
import zipfile

from flask import (
    jsonify,
    redirect,
    render_template,
    request,
    send_file,
    url_for
)
from flask_login import current_user, login_required
from io import BytesIO
from PIL import Image

from app.home import blueprint
from app.utils import (
    convertADCToVolts,
    convertToIQImage,
    get_dir_name,
    get_plot,
    get_settings,
    loadSavedRawData,
    logs,
    plt,
    stream
)


@blueprint.route("/plotsingleframe", methods=["POST"])
def plot_single_frame():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    logs(_json, "Plotting single frame...")

    _dirname = get_dir_name(_json, _json.get("file_location"))
    if not os.path.exists(_dirname):
        _return["status"] = 500
        _return["message"] = (
            "Project does not exists. Please transfer project data."
        )
        logs(_json, _return["message"])
        return jsonify(_return)

    images_dir = f"{_dirname}/images"
    if not os.path.exists(images_dir):
        os.mkdir(images_dir)

    base = f"{_dirname}/baseADC2.dat"
    if not os.path.exists(base):
        _return["status"] = 500
        _return["message"] = "Missing base data."
        logs(_json, _return["message"])
        return jsonify(_return)

    output = f"{_dirname}/output.dat"
    if not os.path.exists(base):
        _return["status"] = 500
        _return["message"] = "Missing output data."
        logs(_json, _return["message"])
        return jsonify(_return)

    base_data = []
    with open(base, "rb") as f:
        base_data = f.read()

    output_data = []
    with open(output, "rb") as f:
        output_data = f.read()

    #_fig = get_plot(base_data, output_data, [["I_DIFF", "Q_DIFF"]])
    _fig = get_plot(base_data, output_data)

    measfig_file_name = f"{images_dir}/measured_fig.png"

    im = Image.open(_fig)
    _im = im.convert("RGB").convert("P", palette=Image.ADAPTIVE)
    _im.thumbnail((700, 400), Image.ANTIALIAS)
    _im.save(measfig_file_name, format="PNG")

    encoded = ""
    with open(measfig_file_name, "rb") as im_file:
        encoded = base64.b64encode(im_file.read()).decode("utf-8")

    _return["data"] = encoded
    logs(_json, "Plotting single frame. DONE.")

    return jsonify(_return)


@blueprint.route("/playmovieofnframes", methods=["POST"])
def play_movie_of_n_frames():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    logs(_json, "Playing movie of N frames...")

    # Get data from json
    num_frames_to_image = _json.get("num_frames_to_image")
    rpi_serial = _json.get("rpi_serial")

    _dirname = get_dir_name(_json, _json.get("file_location"))
    if not os.path.exists(_dirname):
        _return["status"] = 500
        _return["message"] = (
            "Project does not exists. Please transfer project data."
        )
        logs(_json, _return["message"])
        return jsonify(_return)

    images_dir = f"{_dirname}/images"
    if not os.path.exists(images_dir):
        os.mkdir(images_dir)

    rawdata_dir = f"{_dirname}/rawdata"
    if not os.path.exists(rawdata_dir):
        os.mkdir(rawdata_dir)

    video_dir = f"{_dirname}/video"
    if not os.path.exists(video_dir):
        os.mkdir(video_dir)

    FIG_SCALES_BASE = [2, 4, 2, 4] #scales in volts
    FIG_SCALES_MEAS = [2, 4, 2, 4] #scales in volts
    FIG_SCALES_SUB = [-100, 100, -100, 100] #scales in millivolts

    fps = 3
    size = (1920, 1280)
    start_frame = 0
    stop_frame = num_frames_to_image

    base = f"{_dirname}/baseADC2.dat"
    if os.path.exists(base):
        BL_I_ADC, BL_Q_ADC, BL_I_VOLTS, BL_Q_VOLTS = loadSavedRawData(base)
    else:
        _return["status"] = 500
        _return["message"] = "Missing base data."
        logs(_json, _return["message"])
        return jsonify(_return)

    #set up plot
    #plot base voltage
    fig5, ax5 = plt.subplots(2, 3, figsize=[14, 8])

    mytitle = fig5.suptitle(
        "I and Q Images in Voltage: Base, Measured, and Subtracted"
    )
    pos500 = ax5[0, 0].imshow(
        np.rot90(BL_I_VOLTS, 2),
        cmap="inferno",
        vmin=FIG_SCALES_BASE[0],
        vmax=FIG_SCALES_BASE[1]
    )
    pos510 = ax5[1, 0].imshow(
        np.rot90(BL_Q_VOLTS, 2),
        cmap="inferno",
        vmin=FIG_SCALES_BASE[2],
        vmax=FIG_SCALES_BASE[3]
    )

    pos501 = ax5[0, 1].imshow(
        np.rot90(BL_I_VOLTS, 2),
        cmap="inferno",
        vmin=FIG_SCALES_MEAS[0],
        vmax=FIG_SCALES_MEAS[1]
    )
    pos511 = ax5[1, 1].imshow(
        np.rot90(BL_Q_VOLTS, 2),
        cmap="inferno",
        vmin=FIG_SCALES_MEAS[2],
        vmax=FIG_SCALES_MEAS[3]
    )

    #plot difference in millivolts
    pos502 = ax5[0, 2].imshow(
        np.rot90(1000 * (BL_I_VOLTS - BL_I_VOLTS), 2),
        cmap="inferno",
        vmin=FIG_SCALES_SUB[0],
        vmax=FIG_SCALES_SUB[1]
    )
    pos512 = ax5[1, 2].imshow(
        np.rot90(1000 * (BL_Q_VOLTS - BL_Q_VOLTS), 2),
        cmap="inferno",
        vmin=FIG_SCALES_SUB[2],
        vmax=FIG_SCALES_SUB[3]
    )

    #set colorbars for all subplots
    cbar_5_00 = fig5.colorbar(pos500, ax=ax5[0, 0])
    ax5[0, 0].set_title("I Data Base")
    cbar_5_00.ax.set_ylabel("Voltage (V)", rotation=90)

    cbar_5_10 = fig5.colorbar(pos510, ax=ax5[1, 0])
    ax5[1, 0].set_title("Q Data Base")
    cbar_5_10.ax.set_ylabel("Voltage (V)", rotation=90)

    cbar_5_01 = fig5.colorbar(pos501, ax=ax5[0, 1])
    ax5[0, 1].set_title("I Data Meas")
    cbar_5_01.ax.set_ylabel("Voltage (V)", rotation=90)

    cbar_5_11 = fig5.colorbar(pos511, ax=ax5[1, 1])
    ax5[1, 1].set_title("Q Data Meas")
    cbar_5_11.ax.set_ylabel("Voltage (V)", rotation=90)

    cbar_5_02=fig5.colorbar(pos502, ax=ax5[0, 2])
    ax5[0, 2].set_title("I Data Meas - Base")
    cbar_5_02.ax.set_ylabel("Voltage (mV)", rotation=90)

    cbar_5_12 = fig5.colorbar(pos512, ax=ax5[1, 2])
    ax5[1, 2].set_title("Q Data Meas - Base")
    cbar_5_12.ax.set_ylabel("Voltage (mV)", rotation=90)

    base_title = (
        "I and Q Images in Voltage: Base, Measured, and Subtracted, Frame: "
    )
    numframedigits = len(str(num_frames_to_image))
    for mycount2 in range(start_frame, stop_frame):
        binfilename = (
            f"{rawdata_dir}/frame{str(mycount2).zfill(numframedigits)}.dat"
        )
        f = open(binfilename, "rb")
        bindat = f.read()
        f.close()

        #convert binary data to matrix
        J_MYIMAGE_I4, J_MYIMAGE_Q4 = convertToIQImage(bindat);

        #convert matrix to volts and actual ADC value
        iq_data = convertADCToVolts(J_MYIMAGE_I4, J_MYIMAGE_Q4)
        I_ADC_RTS, Q_ADC_RTS, I_VOLTS_RTS, Q_VOLTS_RTS = iq_data

        #plot figure
        #update title to reflect frame count
        mytitle.set_text(
            base_title
            + str(mycount2).zfill(numframedigits)
            + " of "
            + str(num_frames_to_image - 1)
        )

        #update measured voltage (in volts)
        pos501.set_data(np.rot90((I_VOLTS_RTS), 2))
        pos511.set_data(np.rot90((Q_VOLTS_RTS), 2))

        #update subtracted voltage (in millivolts)
        pos502.set_data(np.rot90(1000 * (I_VOLTS_RTS - BL_I_VOLTS), 2))
        pos512.set_data(np.rot90(1000 * (Q_VOLTS_RTS - BL_Q_VOLTS), 2))

        #redraw
        fig5.canvas.draw_idle()
        plt.pause(0.001)

        #save figure
        _fig = BytesIO()
        framefig_file_name = (
            f"{images_dir}/frame{str(mycount2).zfill(numframedigits)}.png"
        )
        plt.savefig(_fig, format="png")

        im = Image.open(_fig)
        _im = im.convert("RGB").convert("P", palette=Image.ADAPTIVE)
        _im.thumbnail((700, 400), Image.ANTIALIAS)
        _im.save(framefig_file_name, format="PNG")

        encoded = ""
        with open(framefig_file_name, "rb") as im_file:
            encoded = base64.b64encode(im_file.read()).decode("utf-8")

        img_json = {
            "action": "image_n_frames",
            "data": encoded,
            "rpi_serial": rpi_serial
        }
        stream(img_json)

    img_array = []
    numframedigits = len(str(num_frames_to_image))
    for count3 in range(start_frame, stop_frame):
        imgname = f"{images_dir}/frame{str(count3).zfill(numframedigits)}.png"
        img = cv2.imread(imgname)
        height, width, layers = img.shape
        size = (width, height)
        img_array.append(img)

    vid_file_name = f"{video_dir}/video.avi"
    out = cv2.VideoWriter(
        vid_file_name,
        cv2.VideoWriter_fourcc(*"DIVX"),
        fps,
        size
    )
    for i in range(len(img_array)):
        out.write(img_array[i])

    out.release()

    f = open(vid_file_name, "rb")
    encoded = base64.b64encode(f.read()).decode("utf-8")
    f.close()

    _return["data"] = encoded
    logs(_json, "Playing movie of N frames. DONE.")

    return jsonify(_return)


@blueprint.route("/getopticalimage", methods=["POST"])
def get_optical_image():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    # Get data from json
    action = _json.get("action")
    index = _json.get("index") or 0

    _dirname = f"{get_dir_name(_json)}/optical_images"

    if os.path.exists(_dirname):
        filenames = sorted(os.listdir(_dirname))
        if index <= (len(filenames) - 1):
            _filename = f"{_dirname}/{filenames[index]}"

            encoded = ""
            with open(_filename, "rb") as f:
                encoded = base64.b64encode(f.read()).decode("utf-8")

            _return["data"] = encoded
            _return["file"] = filenames[index]
    else:
        _return["status"] = 500
        _return["message"] = "File not found."

    return jsonify(_return)


@blueprint.route("/download", methods=["POST"])
def download():

    # Get json request
    _json = request.get_json(force=True)

    _return = {"status": 200}

    # Get data from json
    project_name = _json.get("project_name") or ""
    project_number = _json.get("project_number") or ""
    rpi_serial = _json.get("rpi_serial")

    project = project_name + project_number

    _dirname = get_dir_name(_json)
    if not os.path.exists(_dirname):
        _return["status"] = 500
        _return["message"] = "No files to download."
        return jsonify(_return)

    directories = [
        "csv", "images", "optical_images", "rawdata", "video"
    ]
    if project:
        directories = [""]

    filename = f"{rpi_serial}_{project}.zip"
    zipped = BytesIO()
    with zipfile.ZipFile(zipped, mode="w") as z:
        for d in directories:
            for root, dirs, files in os.walk(f"{_dirname}/{d}"):
                if not files:
                    z.write(root)
                    continue

                for f in files:
                    z.write(os.path.join(root, f))

    zipped.seek(0)
    return send_file(
        zipped,
        mimetype="application/zip",
        as_attachment=True,
        download_name=filename
    )


@blueprint.route("/index")
@login_required
def index():

    settings = get_settings()
    _settings = settings.get("settings") or {}

    if _settings.get("adc") is None:
        _settings["adc"] = 1

    if _settings.get("power_setting") is None:
        _settings["power_setting"] = 1

    config = {
        "adc": _settings["adc"],
        "frequency": _settings.get("frequency") or 1853.0,
        "power_setting": _settings["power_setting"],
        "timing_terminal": [{
            "name": "TX_Switch En",
            "value": [
                {"id": "tx1", "value": 0},
                {"id": "tx2", "value": 19},
                {"id": "tx3", "value": 42},
                {"id": "tx4", "value": 19},
                {"id": "tx5", "value": 42}
            ]
        },
        {
            "name": "Pulse_And",
            "value": [
                {"id": "pa1", "value": 0},
                {"id": "pa2", "value": 20},
                {"id": "pa3", "value": 42},
                {"id": "pa4", "value": 20},
                {"id": "pa5", "value": 42}
            ]
        },
        {
            "name": "RX_Switch En",
            "value": [
                {"id": "rx1", "value": 0},
                {"id": "rx2", "value": 42},
                {"id": "rx3", "value": 82},
                {"id": "rx4", "value": 42},
                {"id": "rx5", "value": 82}
            ]
        },
        {
            "name": "Global En",
            "value": [
                {"id": "gl1", "value": 1},
                {"id": "gl2", "value": 67},
                {"id": "gl3", "value": 1023},
                {"id": "gl4", "value": 67},
                {"id": "gl5", "value": 1023}
            ]
        },
        {
            "name": "LO Ctrl",
            "value": [
                {"id": "lo1", "value": 1},
                {"id": "lo2", "value": 1023},
                {"id": "lo3", "value": 1023},
                {"id": "lo4", "value": 42},
                {"id": "lo5", "value": 1023}
            ]
        },
        {
            "name": "ADC Capture",
            "value": [
                {"id": "cp1", "value": 0},
                {"id": "cp2", "value": 65},
                {"id": "cp3", "value": 66},
                {"id": "cp4", "value": 65},
                {"id": "cp5", "value": 66}
            ]
        }]
    }

    for d in config["timing_terminal"]:
        for v in d["value"]:
            v["value"] = _settings.get(v["id"]) or v["value"]

    try:
        board_info = {
            k: settings.get(k) or ""
            for k in ("board", "serial_number", "sys_clock", "version")
        }
    except:
        board_info = {}

    return render_template(
        "home/index.html",
        segment="index",
        clients=[],
        config=config,
        user=current_user,
        board_info=board_info
    )


@blueprint.route("/")
def index_main():

    if current_user:
        return redirect(url_for("home_blueprint.index"))
    else:
        return redirect(url_for("auth_blueprint.login"))



{% extends "includes/base.html" %}

{% block title %} Frequency Sweep {% endblock %}

{% block content %}

  <div class="row mt-sm">

    <div class="col-xs-1">
        <small>Device Type</small>
        <select id="deviceType" class="form-control form-control-sm">
            <option value="ok"> Opal Kelly </option>
            <option value="rpi"> RPi4 </option>
        </select>
    </div>

    <div class="col-xs-1 pl-0">
      <p class="small mb-0">&nbsp;</p>
      <button id="btnFindBoard" type="button" class="btn btn-sm btn-primary w-100" onclick="okFindBoard()">
        Find Device
      </button>
  </div>

    <div class="col-sm-2 col-xs-8">
        <div class="row">
          <div class="col-sm-9 col-xs-7 pr-0">
            <small >Directory</small>
            <input id="savedir" type="text" class="form-control form-control-sm" disabled>
          </div>
          <div class="col-sm-3 col-xs-1 pl-0">
            <p class="small mb-0">&nbsp;</p>
            <button id="btnSelectDirectory" type="button" class="btn btn-sm btn-primary w-100"
                onclick="selectOkDirectory()" disabled>
              Choose
            </button>
          </div>
        </div>
    </div>

    <div class="col-xs-1">
        <small>Experiment Name</small>
        <input id="projectdir" type="text" class="form-control form-control-sm" style="opacity: 0.35;" disabled>
    </div>
    <div class="col-xs-1 pl-0">
        <p class="small mb-0">&nbsp;</p>
        <button id="btnSelectProject" type="button" class="btn btn-sm btn-primary w-100" style="opacity: 0.35;" onclick="selectOkProject()" disabled>
          Set Experiment
        </button>
    </div>

    <div class="col-xs-2 pl-0">
        <p class="small mb-0">&nbsp;</p>
        <button id="btnOkFastImaging"type="button"
            class="btn btn-sm btn-success w-100"
            style="opacity: 0.35;"
            onclick="okFastImaging()"
            disabled>
            Initialize Board
        </button>
    </div>

    <div class="col-xs-1">
        <small>RPi4 - Timing (ns)</small>
        <input id="rpi4Timing" type="number" value="125" class="form-control form-control-sm">
    </div>

    <div class="col-xs-1">
        <small>RPi4 - Mode</small>
        <select id="rpi4Mode" class="form-control form-control-sm" value="mode1">
            <option value="mode0">0</option>
            <option value="mode1">1</option>
            <option value="mode2">2</option>
        </select>
    </div>

    <div class="col-xs-1">
      <small>RPi4 - IP Address</small>
      <input id="rpi4IpAddress" type="text" value="169.254.202.26" class="form-control form-control-sm">
    </div>

    </div>

    

    <div class="row mt-sm">

        <div class="col-sm-1 col-xs-6 mt-lg">
            <input type="checkbox" id="isRecording" name="isRecording" checked>
            <label for="isRecording">Recording</label>
        </div>

        <div class="col-sm-1 col-xs-6 mt-lg">
            <input type="checkbox" id="isPlotting" name="isPlotting" checked>
            <label for="isPlotting">Plotting</label>
        </div>

        <div class="col-xs-1">
            <small>Imaging Mode</small>
            <select id="imagingMode" class="form-control form-control-sm">
                <option value="IQ"> I / Q </option>
                <option value="MP"> M / Φ </option>
            </select>
        </div>

        <div class="col-xs-1">
            <small>CMap Max</small>
            <input id="cmapmax" type="number" value="0" class="form-control form-control-sm">
        </div>

        <div class="col-xs-1">
            <small>Cmap Min</small>
            <input id="cmapmin" type="number" value="0" class="form-control form-control-sm">
        </div>

        <div class="col-xs-1">
            <small>ROI Row Start</small>
            <input id="roi0" type="number" value="0" class="form-control form-control-sm">
        </div>
  
        <div class="col-xs-1">
            <small>ROI Row End</small>
            <input id="roi1" type="number" value="127" class="form-control form-control-sm">
        </div>
  
        <div class="col-xs-1">
            <small>ROI Column Start</small>
            <input id="roi2" type="number" value="0" class="form-control form-control-sm">
        </div>
  
        <div class="col-xs-1">
            <small>ROI Column End</small>
            <input id="roi3" type="number" value="127" class="form-control form-control-sm">
        </div>

    </div>

    <div class="row mt-sm">
        <div class="col-xs-1">
            <small>Frequency Start (MHz)</small>
            <input id="fstart" type="number" value="1700" class="form-control form-control-sm">
        </div>

        <div class="col-xs-1">
            <small>Frequency End (MHz)</small>
            <input id="fend" type="number" value="2000" class="form-control form-control-sm">
        </div>

        <div class="col-xs-1">
            <small>Frequency Step (MHz)</small>
            <input id="fstep" type="number" value="0.25" class="form-control form-control-sm">
        </div>

        <div class="col-xs-2 pl-0">
            <p class="small mb-0">&nbsp;</p>
            <button id="btnbaseline" type="button"
                class="btn btn-sm btn-success w-100"
                style="opacity: 0.35;"
                onclick="baseline()"
                disabled>
              Baseline Frequency Sweep
            </button>
          </div>
    
          <div class="col-xs-2 pl-0">
            <p class="small mb-0">&nbsp;</p>
            <button id="btnsample" type="button"
                class="btn btn-sm btn-danger w-100"
                style="opacity: 0.35;"
                onclick="sample()"
                disabled>
              Sample Frequency Sweep Start
            </button>
          </div>
    </div>
  </div>
  
  <div class="row mt-lg">
    <div class="col-xs-12">
      <div class="text-center m-0"
          style="height: 45vh; border: 1px solid #dddddd; border-right: 1px solid #000000;">
        <img id="fsLiveFeed" style="max-height: 100%; max-width: 100%;"
            src="">
      </div>
    </div>
  </div>

  <div class="col-xs-12 mt-lg">
    <small >Logs</small>
    <textarea id="logs" rows="10" class="form-control"
        style="font-size: 16px; resize: none;" readonly></textarea>
  </div>

  <div class="col-xs-1 pl-0">
    <p class="small mb-0">&nbsp;</p>
    <button id="btnReload" type="button" class="btn btn-sm btn-danger w-100" onclick="location.reload()">
      Restart
    </button>
  </div>

{% endblock %}


{% block scripts %}
    <script >
      $(document).ready(() => {
      let socket = io();
        socket.on("fsLiveFeedImage", (object) => {
            $("#fsLiveFeed").attr(
            "src",
            object.data
                ? data:image/png;base64,${object.data}
                : ""
            );
        });
      });

      let project_path, save_dir_path;

      addLogs = (data) => {
        let _logs = $("#logs");
        _logs.text($("#logs").text() + "\n"
            + new Date().toLocaleString("ll") + " " + data);
        _logs[0].scrollTop = _logs[0].scrollHeight;
      }

      baseline = () => {
        $("body").addClass("loading-cursor");
        $('#btnSelectProject').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnOkFastImaging').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnbaseline').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnFindBoard').prop('disabled', true).css({'opacity': '0.35'});
        if ($("#deviceType").val() === "ok") {
          let requestData = {
            project_dir: project_path,
            image_type: $("#imagingMode").val(),
            is_record: $('#isRecording').is(':checked'),
            is_plot: $('#isPlotting').is(':checked'),
            vmax: $("#cmapmax").val(),
            vmin: $("#cmapmin").val(),
            roi0 : $("#roi0").val(),
            roi1 : $("#roi1").val(),
            roi2 : $("#roi2").val(),
            roi3 : $("#roi3").val(),
            fstart : $("#fstart").val(),
            fend : $("#fend").val(),
            fstep : $("#fstep").val()
          };
          postRequest("fsbaselineok", requestData)
          .then((response) => {
            if (response.status == 500) {
              addLogs("!!! ERROR - " + response.message);
              $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
              $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
              $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
              $('#btnbaseline').prop('disabled', false).css({'opacity': '1'});
              $('#btnsample').prop('disabled', false).css({'opacity': '1'});
              alertError(response.message);
            } else {
              addLogs("Baseline data acquisition in progress");
            save_dir_path = response.save_dir;
              $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
              $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
              $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
              $('#btnbaseline').prop('disabled', false).css({'opacity': '1'});
              $('#btnsample').prop('disabled', false).css({'opacity': '1'});
            }
          })
          .catch((error) => {
            // $("body").removeClass("loading-cursor");
            alertError(error)
            $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
            $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
            $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
            $('#btnbaseline').prop('disabled', false).css({'opacity': '1'});
            $('#btnsample').prop('disabled', false).css({'opacity': '1'});
          })
          .finally(() => {
            addLogs("Baseline data acquisition completed");
            $("body").removeClass("loading-cursor");
            // save_dir_path = response.save_dir;
            // $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
            // $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
            // $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
            // $('#btnbaseline').prop('disabled', false).css({'opacity': '1'});
            // $('#btnsample').prop('disabled', false).css({'opacity': '1'});
          })
        } else {
          let requestData = {
            project_dir: project_path,
            // image_type: $("#imagingMode").val(),
            is_record: $('#isRecording').is(':checked'),
            is_plot: $('#isPlotting').is(':checked'),
            vmax: $("#cmapmax").val(),
            vmin: $("#cmapmin").val(),
            frame_interval: $("#frameinterval").val()
          };
          // alert("Request data: " + JSON.stringify(requestData))
          postRequest("rpi4sendlivefeed", requestData)
          .then((response) => {
            // $("body").removeClass("loading-cursor");
            // alert("Response status: " + response.status + ", Message: " + response.message);
            if (response.status == 500) {
              addLogs("!!! ERROR - " + response.message);
              alertError(response.message);
            } else {
              addLogs("Live feed in progress");
            }
          })
          .catch((error) => {
            // $("body").removeClass("loading-cursor");
            alertError(error)
          });
        }
      }

      sample = () => {
        $("body").addClass("loading-cursor");
        $('#btnSelectProject').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnOkFastImaging').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnbaseline').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnsample').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnFindBoard').prop('disabled', true).css({'opacity': '0.35'});
        if ($("#deviceType").val() === "ok") {
          let requestData = {
            project_dir: project_path,
            image_type: $("#imagingMode").val(),
            is_record: $('#isRecording').is(':checked'),
            is_plot: $('#isPlotting').is(':checked'),
            vmax: $("#cmapmax").val(),
            vmin: $("#cmapmin").val(),
            roi0 : $("#roi0").val(),
            roi1 : $("#roi1").val(),
            roi2 : $("#roi2").val(),
            roi3 : $("#roi3").val(),
            fstart : $("#fstart").val(),
            fend : $("#fend").val(),
            fstep : $("#fstep").val(),
            savedir : save_dir_path
          };
          postRequest("fssampleok", requestData)
          .then((response) => {
            if (response.status == 500) {
              addLogs("!!! ERROR - " + response.message);
              alertError(response.message);
              $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
            $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
            $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
            $('#btnbaseline').prop('disabled', false).css({'opacity': '1'});
            $('#btnsample').prop('disabled', false).css({'opacity': '1'});
            } else {
              addLogs("Live feed in progress");
              $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
            $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
            $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
            $('#btnbaseline').prop('disabled', false).css({'opacity': '1'});
            $('#btnsample').prop('disabled', false).css({'opacity': '1'});
            }
          })
          .catch((error) => {
            // $("body").removeClass("loading-cursor");
            alertError(error)
            $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
            $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
            $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
            $('#btnbaseline').prop('disabled', false).css({'opacity': '1'});
            $('#btnsample').prop('disabled', false).css({'opacity': '1'});
          })
          .finally(() => {
            addLogs("Baseline data acquisition completed");
            $("body").removeClass("loading-cursor");
          })
        } else {
          let requestData = {
            project_dir: project_path,
            // image_type: $("#imagingMode").val(),
            is_record: $('#isRecording').is(':checked'),
            is_plot: $('#isPlotting').is(':checked'),
            vmax: $("#cmapmax").val(),
            vmin: $("#cmapmin").val(),
            frame_interval: $("#frameinterval").val()
          };
          // alert("Request data: " + JSON.stringify(requestData))
          postRequest("rpi4sendlivefeed", requestData)
          .then((response) => {
            // $("body").removeClass("loading-cursor");
            // alert("Response status: " + response.status + ", Message: " + response.message);
            if (response.status == 500) {
              addLogs("!!! ERROR - " + response.message);
              alertError(response.message);
            } else {
              addLogs("Live feed in progress");
            }
          })
          .catch((error) => {
            // $("body").removeClass("loading-cursor");
            alertError(error)
          });
        }
      }

      okFindBoard = () => {
        $('#btnFindBoard').prop('disabled', true).css({'opacity': '0.35'});
        if ($("#deviceType").val() === "ok") {
          postRequest("okFindBoard")
            .then((response) => {
              if (response.status == 500) {
                  addLogs("!!! ERROR - " + response.message);
                  // alertError(response.message);
              } else if (response.board_name) {
                  addLogs("Board found: " + response.board_name)
                  $('#btnSelectDirectory').prop('disabled', false).css({'opacity': '1'});
              }})
              .catch((error) => {
                  alertError(error)
              })
              .finally(() => {
                $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
              });
          } else {
            let requestData = {
              ip_addr_rpi: $("#rpi4IpAddress").val()
            };
            postRequest("rpiFindBoard", requestData)
              .then((response) => {
                if (response.status == 500) {
                    addLogs("!!! ERROR - " + response.message);
                    alertError(response.message);
                } else if (response.address) {
                    addLogs("Raspberry Pi 4 found at IP:port : " + response.address)
                    $('#btnSelectDirectory').prop('disabled', false).css({'opacity': '1'});
                    $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
                }})
                .catch((error) => {
                    alertError(error)
                    $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
                });
            }
      }

      selectOkDirectory = () => {
        postRequest("selectOkdirectory")
          .then((response) => {
            if (response.status == 500) {
                addLogs("!!! ERROR - " + response.message);
                alertError(response.message);
            } else if (response.directory_path) {
                $("#savedir").val(response.directory_path);
                addLogs("Directory chosen at " + response.directory_path)
                $('#projectdir').prop('disabled', false).css({'opacity': '1'});
                $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
                $('#btnSelectDirectory').prop('disabled', true).css({'opacity': '0.35'});
            }})
            .catch((error) => {
                alertError(error)
            });
      }

      selectOkProject = () => {
        let requestData = {
            save_dir: $("#savedir").val(),
            project_dir: $("#projectdir").val(),
        };
        postRequest("selectOkproject", requestData)
          .then((response) => {
            if (response.status == 500) {
                addLogs("!!! ERROR - " + response.message);
                alertError(response.message);
            } else if (response.directory_path) {
                project_path = response.directory_path;
                $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
                addLogs("Experiment folder successfully set at " + project_path)
            }})
            .catch((error) => {
                alertError(error)
            });
      }

      okFastImaging = () => {
        addLogs("Board Initialization and Calibration in progress")
        $("body").addClass("loading-cursor");
        $('#btnSelectProject').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnbaseline').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnsample').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnOkFastImaging').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnFindBoard').prop('disabled', true).css({'opacity': '0.35'});
        if ($("#deviceType").val() === "ok") {
          let requestData = {
              project_dir: project_path,
              roi0 : $("#roi0").val(),
              roi1 : $("#roi1").val(),
              roi2 : $("#roi2").val(),
              roi3 : $("#roi3").val(),
          };
          postRequest("fsFastImaging", requestData)
            .then((response) => {
              if (response.status == 500) {
                  addLogs("!!! ERROR - " + response.message);
                  alertError(response.message);
              } else {
                  addLogs("Board initialization complete.")
                  $('#btnbaseline').prop('disabled', false).css({'opacity': '1'});
                }})
              .catch((error) => {
                  alertError(error)
              })
              .finally(() => {
                  $("body").removeClass("loading-cursor");
                  $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
                  $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
                  $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
              });
        } else {
          // $("body").addClass("loading-cursor");
          let requestData = {
              project_dir: project_path,
              rpi_mode: $("#rpi4Mode").val(),
              rpi_timing: $("#rpi4Timing").val(),
              rpi_frequency: $("#rpi4Frequency").val(),
          };
          postRequest("rpi4fastimaging", requestData)
            .then((response) => {
              if (response.status == 500) {
                  $("body").removeClass("loading-cursor");
                  addLogs("!!! ERROR - " + response.message);
                  alertError(response.message);
              } else {
                  addLogs("Board initialization and calibration complete.")
                  $("body").removeClass("loading-cursor");
                  $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
                  $('#btnOkStartFeed').prop('disabled', false).css({'opacity': '1'});
                  $('#btnRetakeAirDataOk').prop('disabled', false).css({'opacity': '1'});
                  $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
                  $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
              }})
              .catch((error) => {
                  $("body").removeClass("loading-cursor");
                  alertError(error)
              });
        }
      }

      
    </script>

{% endblock %}




{% extends "includes/base.html" %}

{% block title %} Live Feed {% endblock %}

{% block content %}

  <div class="row mt-sm">

    <div class="col-xs-1">
        <small>Device Type</small>
        <select id="deviceType" class="form-control form-control-sm">
            <option value="ok"> Opal Kelly </option>
            <option value="rpi"> RPi4 </option>
        </select>
    </div>

    <div class="col-xs-1 pl-0">
      <p class="small mb-0">&nbsp;</p>
      <button id="btnFindBoard" type="button" class="btn btn-sm btn-primary w-100" onclick="okFindBoard()">
        Find Device
      </button>
  </div>

    <div class="col-sm-2 col-xs-8">
        <div class="row">
          <div class="col-sm-9 col-xs-7 pr-0">
            <small >Directory</small>
            <input id="savedir" type="text" class="form-control form-control-sm" disabled>
          </div>
          <div class="col-sm-3 col-xs-1 pl-0">
            <p class="small mb-0">&nbsp;</p>
            <button id="btnSelectDirectory" type="button" class="btn btn-sm btn-primary w-100"
                onclick="selectOkDirectory()" disabled>
              Choose
            </button>
          </div>
        </div>
    </div>

    <div class="col-xs-1">
        <small>Experiment Name</small>
        <input id="projectdir" type="text" class="form-control form-control-sm" style="opacity: 0.35;" disabled>
    </div>
    <div class="col-xs-1 pl-0">
        <p class="small mb-0">&nbsp;</p>
        <button id="btnSelectProject" type="button" class="btn btn-sm btn-primary w-100" style="opacity: 0.35;" onclick="selectOkProject()" disabled>
          Set Experiment
        </button>
    </div>

    <div class="col-xs-2 pl-0">
        <p class="small mb-0">&nbsp;</p>
        <button id="btnOkFastImaging"type="button"
            class="btn btn-sm btn-success w-100"
            style="opacity: 0.35;"
            onclick="okFastImaging()"
            disabled>
            Initialize and Calibrate Board
        </button>
    </div>

    <div class="col-xs-1">
        <small>RPi4 - Timing (ns)</small>
        <input id="rpi4Timing" type="number" value="125" class="form-control form-control-sm">
    </div>

    <div class="col-xs-1">
        <small>RPi4 - Mode</small>
        <select id="rpi4Mode" class="form-control form-control-sm" value="mode1">
            <option value="mode0">0</option>
            <option value="mode1">1</option>
            <option value="mode2">2</option>
        </select>
    </div>

    <div class="col-xs-1">
        <small>RPi4 - Frequency</small>
        <input id="rpi4Frequency" type="text" value="1853.00" class="form-control form-control-sm">
    </div>

    <div class="col-xs-1">
      <small>RPi4 - IP Address</small>
      <input id="rpi4IpAddress" type="text" value="169.254.202.26" class="form-control form-control-sm">
    </div>

    </div>

    

    <div class="row mt-sm">

        <div class="col-sm-1 col-xs-6 mt-lg">
            <input type="checkbox" id="isRecording" name="isRecording" checked>
            <label for="isRecording">Recording</label>
        </div>

        <div class="col-sm-1 col-xs-6 mt-lg">
            <input type="checkbox" id="isPlotting" name="isPlotting" checked>
            <label for="isPlotting">Plotting</label>
        </div>

        <div class="col-xs-1">
            <small>Imaging Mode</small>
            <select id="imagingMode" class="form-control form-control-sm">
                <option value="IQ"> I / Q </option>
                <option value="MP"> M / Φ </option>
            </select>
        </div>

        <div class="col-xs-1">
            <small>Frame Interval (s)</small>
            <input id="frameinterval" type="number" value="0" class="form-control form-control-sm">
        </div>

        <div class="col-xs-1">
            <small>Averaging Frames</small>
            <input id="averagingframes" type="number" value="1" class="form-control form-control-sm">
        </div>

        <div class="col-xs-1">
            <small>CMap Max</small>
            <input id="cmapmax" type="number" value="0" class="form-control form-control-sm">
        </div>

        <div class="col-xs-1">
            <small>Cmap Min</small>
            <input id="cmapmin" type="number" value="0" class="form-control form-control-sm">
        </div>

      <div class="col-xs-1 pl-0">
        <p class="small mb-0">&nbsp;</p>
        <button id="btnOkStartFeed"type="button"
            class="btn btn-sm btn-success w-100"
            style="opacity: 0.35;"
            onclick="startOkFeed()"
            disabled>
          Start
        </button>
      </div>

      <div class="col-xs-1 pl-0">
        <p class="small mb-0">&nbsp;</p>
        <button id="btnOkStopFeed"type="button"
            class="btn btn-sm btn-danger w-100"
            style="opacity: 0.35;"
            onclick="stopOkFeed()"
            disabled>
          Stop
        </button>
      </div>

      <div class="col-xs-1 pl-0">
        <p class="small mb-0">&nbsp;</p>
        <button id="btnRetakeAirDataOk" type="button"
            class="btn btn-sm btn-primary w-100"
            style="opacity: 0.35;"
            onclick="okRetakeAirData()"
            disabled>
            Retake Air Data
        </button>
      </div>

    </div>

    <div class="row mt-sm">
      <div class="col-xs-1">
          <small>ROI Row Start</small>
          <input id="roi0" type="number" value="0" class="form-control form-control-sm">
      </div>

      <div class="col-xs-1">
          <small>ROI Row End</small>
          <input id="roi1" type="number" value="127" class="form-control form-control-sm">
      </div>

      <div class="col-xs-1">
          <small>ROI Column Start</small>
          <input id="roi2" type="number" value="0" class="form-control form-control-sm">
      </div>

      <div class="col-xs-1">
          <small>ROI Column End</small>
          <input id="roi3" type="number" value="127" class="form-control form-control-sm">
      </div>
    </div>
  </div>
  
  <div class="row mt-lg">
    <div class="col-xs-12">
      <div class="text-center m-0"
          style="height: 45vh; border: 1px solid #dddddd; border-right: 1px solid #000000;">
        <img id="okLiveFeed" style="max-height: 100%; max-width: 100%;"
            src="">
      </div>
    </div>
  </div>

  <div class="col-xs-12 mt-lg">
    <small >Logs</small>
    <textarea id="logs" rows="10" class="form-control"
        style="font-size: 16px; resize: none;" readonly></textarea>
  </div>

  <div class="col-xs-1 pl-0">
    <p class="small mb-0">&nbsp;</p>
    <button id="btnReload" type="button" class="btn btn-sm btn-danger w-100" onclick="location.reload()">
      Restart
    </button>
  </div>

{% endblock %}


{% block scripts %}
    <script >
      $(document).ready(() => {
      let socket = io();
        socket.on("okLiveFeedImage", (object) => {
            $("#okLiveFeed").attr(
            "src",
            object.data
                ? data:image/png;base64,${object.data}
                : ""
            );
        });
      });

      let project_path;

      addLogs = (data) => {
        let _logs = $("#logs");
        _logs.text($("#logs").text() + "\n"
            + new Date().toLocaleString("ll") + " " + data);
        _logs[0].scrollTop = _logs[0].scrollHeight;
      }

      startOkFeed = () => {
        $("body").addClass("loading-cursor");
        $('#btnSelectProject').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnOkFastImaging').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnOkStopFeed').prop('disabled', false).css({'opacity': '1'});
        $('#btnRetakeAirDataOk').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnOkStartFeed').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnFindBoard').prop('disabled', true).css({'opacity': '0.35'});
        if ($("#deviceType").val() === "ok") {
          let requestData = {
            project_dir: project_path,
            image_type: $("#imagingMode").val(),
            is_record: $('#isRecording').is(':checked'),
            is_plot: $('#isPlotting').is(':checked'),
            vmax: $("#cmapmax").val(),
            vmin: $("#cmapmin").val(),
            frame_interval: $("#frameinterval").val()
          };
          postRequest("okstartlivefeed", requestData)
          .then((response) => {
            if (response.status == 500) {
              addLogs("!!! ERROR - " + response.message);
              alertError(response.message);
            } else {
              addLogs("Live feed in progress");
            }
          })
          .catch((error) => {
            // $("body").removeClass("loading-cursor");
            alertError(error)
          });
        } else {
          let requestData = {
            project_dir: project_path,
            // image_type: $("#imagingMode").val(),
            is_record: $('#isRecording').is(':checked'),
            is_plot: $('#isPlotting').is(':checked'),
            vmax: $("#cmapmax").val(),
            vmin: $("#cmapmin").val(),
            frame_interval: $("#frameinterval").val()
          };
          // alert("Request data: " + JSON.stringify(requestData))
          postRequest("rpi4sendlivefeed", requestData)
          .then((response) => {
            // $("body").removeClass("loading-cursor");
            // alert("Response status: " + response.status + ", Message: " + response.message);
            if (response.status == 500) {
              addLogs("!!! ERROR - " + response.message);
              alertError(response.message);
            } else {
              addLogs("Live feed in progress");
            }
          })
          .catch((error) => {
            // $("body").removeClass("loading-cursor");
            alertError(error)
          });
        }
      }

      stopOkFeed = () => {
        $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
        $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
        $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
        $('#btnOkStopFeed').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnRetakeAirDataOk').prop('disabled', false).css({'opacity': '1'});
        $('#btnOkStartFeed').prop('disabled', false).css({'opacity': '1'});
        if ($("#deviceType").val() === "ok") {
          let requestData = {};
          postRequest("okstoplivefeed", requestData)
          .then((response) => {
            $("body").removeClass("loading-cursor");
            if (response.status == 500) {
              addLogs("!!! ERROR - " + response.message);
              alertError(response.message);
            } else {
              addLogs("Live feed stopped; video saved");
            }
          })
          .catch((error) => {
            $("body").removeClass("loading-cursor");
            alertError(error)
          });
        } else {
          let requestData = {};
          postRequest("rpi4stoplivefeed", requestData)
          .then((response) => {
            $("body").removeClass("loading-cursor");
            if (response.status == 500) {
              alertError(response.message);
            }
          })
          .catch((error) => {
            $("body").removeClass("loading-cursor");
            alertError(error)
          });
        }
      }

      okFindBoard = () => {
        $('#btnFindBoard').prop('disabled', true).css({'opacity': '0.35'});
        if ($("#deviceType").val() === "ok") {
          postRequest("okFindBoard")
            .then((response) => {
              if (response.status == 500) {
                  addLogs("!!! ERROR - " + response.message);
                  // alertError(response.message);
              } else if (response.board_name) {
                  addLogs("Board found: " + response.board_name)
                  $('#btnSelectDirectory').prop('disabled', false).css({'opacity': '1'});
              }})
              .catch((error) => {
                  alertError(error)
              })
              .finally(() => {
                $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
              });
          } else {
            let requestData = {
              ip_addr_rpi: $("#rpi4IpAddress").val()
            };
            postRequest("rpiFindBoard", requestData)
              .then((response) => {
                if (response.status == 500) {
                    addLogs("!!! ERROR - " + response.message);
                    alertError(response.message);
                } else if (response.address) {
                    addLogs("Raspberry Pi 4 found at IP:port : " + response.address)
                    $('#btnSelectDirectory').prop('disabled', false).css({'opacity': '1'});
                    $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
                }})
                .catch((error) => {
                    alertError(error)
                    $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
                });
            }
      }

      selectOkDirectory = () => {
        postRequest("selectOkdirectory")
          .then((response) => {
            if (response.status == 500) {
                addLogs("!!! ERROR - " + response.message);
                alertError(response.message);
            } else if (response.directory_path) {
                $("#savedir").val(response.directory_path);
                addLogs("Directory chosen at " + response.directory_path)
                $('#projectdir').prop('disabled', false).css({'opacity': '1'});
                $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
                $('#btnSelectDirectory').prop('disabled', true).css({'opacity': '0.35'});
            }})
            .catch((error) => {
                alertError(error)
            });
      }

      selectOkProject = () => {
        let requestData = {
            save_dir: $("#savedir").val(),
            project_dir: $("#projectdir").val(),
        };
        postRequest("selectOkproject", requestData)
          .then((response) => {
            if (response.status == 500) {
                addLogs("!!! ERROR - " + response.message);
                alertError(response.message);
            } else if (response.directory_path) {
                project_path = response.directory_path;
                $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
                addLogs("Experiment folder successfully set at " + project_path)
            }})
            .catch((error) => {
                alertError(error)
            });
      }

      okFastImaging = () => {
        addLogs("Board Initialization and Calibration in progress")
        $("body").addClass("loading-cursor");
        $('#btnSelectProject').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnOkStartFeed').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnOkStopFeed').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnRetakeAirDataOk').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnOkFastImaging').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnFindBoard').prop('disabled', true).css({'opacity': '0.35'});
        if ($("#deviceType").val() === "ok") {
          let requestData = {
              project_dir: project_path,
              roi0 : $("#roi0").val(),
              roi1 : $("#roi1").val(),
              roi2 : $("#roi2").val(),
              roi3 : $("#roi3").val(),
          };
          postRequest("okFastImaging", requestData)
            .then((response) => {
              if (response.status == 500) {
                  addLogs("!!! ERROR - " + response.message);
                  alertError(response.message);
              } else {
                  addLogs("Board initialization and calibration complete.")
                  addLogs("Optimum frequency where I = Q is " + response.optimum_frequency + " MHz, Frequency where I is max is " + response.maxi + " MHz, Frequency where Q is max is " + response.maxq + " MHz")
                  $('#btnOkStartFeed').prop('disabled', false).css({'opacity': '1'});
                  $('#btnRetakeAirDataOk').prop('disabled', false).css({'opacity': '1'});
                }})
              .catch((error) => {
                  alertError(error)
              })
              .finally(() => {
                  $("body").removeClass("loading-cursor");
                  $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
                  $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
                  $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
              });
        } else {
          // $("body").addClass("loading-cursor");
          let requestData = {
              project_dir: project_path,
              rpi_mode: $("#rpi4Mode").val(),
              rpi_timing: $("#rpi4Timing").val(),
              rpi_frequency: $("#rpi4Frequency").val(),
          };
          postRequest("rpi4fastimaging", requestData)
            .then((response) => {
              if (response.status == 500) {
                  $("body").removeClass("loading-cursor");
                  addLogs("!!! ERROR - " + response.message);
                  alertError(response.message);
              } else {
                  addLogs("Board initialization and calibration complete.")
                  $("body").removeClass("loading-cursor");
                  $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
                  $('#btnOkStartFeed').prop('disabled', false).css({'opacity': '1'});
                  $('#btnRetakeAirDataOk').prop('disabled', false).css({'opacity': '1'});
                  $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
                  $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
              }})
              .catch((error) => {
                  $("body").removeClass("loading-cursor");
                  alertError(error)
              });
        }
      }

      okRetakeAirData = () => {
        $('#btnSelectProject').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnOkStartFeed').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnOkStopFeed').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnOkFastImaging').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnRetakeAirDataOk').prop('disabled', true).css({'opacity': '0.35'});
        $('#btnFindBoard').prop('disabled', true).css({'opacity': '0.35'});
        if ($("#deviceType").val() === "ok") {
          $("body").addClass("loading-cursor");
          let requestData = {
              project_dir: project_path,
              roi0 : $("#roi0").val(),
              roi1 : $("#roi1").val(),
              roi2 : $("#roi2").val(),
              roi3 : $("#roi3").val()
          };
          // alert("Request data: " + JSON.stringify(requestData))
          postRequest("okRetakeAirData", requestData)
            .then((response) => {
              if (response.status == 500) {
                  alertError(response.message);
              } else if (response) {
                  addLogs("Air data successfully retaken.")
              }})
              .catch((error) => {
                  alertError(error)
              })
              .finally(() => {
                $("body").removeClass("loading-cursor");
                $('#btnSelectProject').prop('disabled', false).css({'opacity': '1'});
                $('#btnOkStartFeed').prop('disabled', false).css({'opacity': '1'});
                $('#btnOkFastImaging').prop('disabled', false).css({'opacity': '1'});
                $('#btnRetakeAirDataOk').prop('disabled', false).css({'opacity': '1'});
                $('#btnFindBoard').prop('disabled', false).css({'opacity': '1'});
              });
        } else {

        }
      }
    </script>

{% endblock %}





{% extends "includes/base.html" %}

{% block title %} Post-Processing {% endblock %}

{% block content %}

  <div class="row mt-lg">
    <div class="col-xs-6">
      <div class="text-center m-0"
          style="height: 40vh; border: 1px solid #dddddd; border-right: 1px solid #000000;">
        <img id="leftImg" style="max-height: 100%; max-width: 100%;"
            src="">
      </div>
    </div>
    <div class="col-xs-6">
      <div class="text-center m-0"
          style="height: 40vh; border: 1px solid #dddddd;">
        <img id="rightImg" style="max-height: 100%; max-width: 100%;"
            src="">
      </div>
    </div>
  </div>
  
  <div class="row mt-sm">
    <div class="col-sm-3 col-xs-8">
      <div class="row">
        <div class="col-sm-9 col-xs-7 pr-0">
          <small >Timestamp directory (format: yyyy-mm-dd hh-mm-ss)</small>
          <input id="recording" type="text" class="form-control form-control-sm"
              disabled>
        </div>
        <div class="col-sm-3 col-xs-1 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnSelectDirectoryPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="selectDirectory()">
            Choose
          </button>
        </div>
      </div>
    </div>
    <div class="col-sm-7 col-xs-12">
      <div class="row">
        <div class="col-xs-3 pr-0">
          <small>Acoustic Parameter</small>
          <select id="computationType" class="form-control form-control-sm">
            <!-- <option value="Magnitude AIR">Magnitude AIR</option> -->
            <!-- <option value="Magnitude SAMPLE">Magnitude SAMPLE</option> -->
            <option value="Magnitude">Magnitude</option>
            <option value="Reflection coefficient">Reflection coefficient</option>
            <option value="Acoustic Impedance">Acoustic Impedance</option>
            <!-- <option value="Phase SAMPLE">Phase SAMPLE</option> -->
            <!-- <option value="Phase AIR">Phase AIR</option> -->
            <option value="Phase">Unwrapped Phase</option>
            <option value="In-Phase">In-Phase</option>
            <option value="Out-of-Phase">Out-of-Phase</option>
            <!-- <option value="In-Phase (Adjusted)">In-Phase (Adjusted)</option> -->
            <!-- <option value="Out-of-Phase (Adjusted)">Out-of-Phase (Adjusted)</option> -->
          </select>
        </div>
        <div class="col-xs-2">
          <small>Frame Number</small>
          <input id="frameNum" type="number" value="1" class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnPlotFramePP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="plotFrame()">
            Plot
          </button>
        </div>
        <div class="col-xs-2">
          <small>Minimum Color Value</small>
          <input id="vminVal" type="number" value="-0.03" class="form-control form-control-sm">
        </div>
        <div class="col-xs-2">
          <small>Maximum Color Value</small>
          <input id="vmaxVal" type="number" value="0.03" class="form-control form-control-sm">
        </div>
        <div class="col-xs-2">
          <small>Title</small>
          <input id="leftImgTitle" type="text" value="Magnitude (Volts) : 2D Map" class="form-control form-control-sm">
        </div>
      </div>
    </div>
    
    <div class="col-sm-5 col-xs-12">
      <div class="row">
        <div class="col-xs-4 pr-0">
          <small >Start Frame</small>
          <input id="frameStart" type="number" value="1"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-4 p-0">
          <small >End Frame</small>
          <input id="frameEnd" type="number"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-4 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnSaveFramePP" type="button"
              class="btn btn-sm btn-primary w-100"
              onclick="saveFrames()">
            Save
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="row mt-sm">
    <hr/>
    <h6>Plots for individual frames:</h6>
  </div>


  <div class="row mt-sm">
    <div class="col-sm-5 col-xs-12">
      <div class="row">
        <div class="col-xs-2 pr-0">
          <h6>Histogram</h6>
        </div>
        <div class="col-xs-1 p-0">
          <small >Bins</small>
          <input id="binNum" type="number" value="100"
              class="form-control form-control-sm">
        </div>
        <!-- <div class="col-xs-3 p-0">
          <small >x-Label</small>
          <input id="histxLabel" type="text" value="100"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-3 p-0">
          <small >y-Label</small>
          <input id="histyLabel" type="text" value="100"
              class="form-control form-control-sm">
        </div> -->
        <div class="col-xs-1 p-0">
          <small >Vmin</small>
          <input id="histogramVmin" type="number" value="-0.03" class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >VMax</small>
          <input id="histogramVmax" type="number" value="0.03" class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnPlotHistogramPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="plotHistogram()">
            Plot
          </button>
        </div>



        <div class="col-xs-1 p-0">
          <small >Start Frame</small>
          <input id="histogramFrameStart" type="number" value="1" class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >End Frame</small>
          <input id="histogramFrameEnd" type="number" class="form-control form-control-sm">
        </div>
        <div class="col-xs-2 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnSaveHistogramPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="saveHistogram()">
            Save Histogram
          </button>
        </div>
      </div>
    </div> 
  </div>

  <div class="row mt-sm">
    <div class="col-sm-5 col-xs-12">
      <div class="row">
        <div class="col-xs-2 pr-0">
          <h6>Kernel Density Curve</h6>
        </div>
        <div class="col-xs-2 p-0">
          <small >Smoothing Parameter</small>
          <input id="lambdaNum" type="number" value="0.1"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnPlotDensityPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="plotDensity()">
            Plot
          </button>
        </div>

        <div class="col-xs-1 p-0">
          <small >Start Frame</small>
          <input id="densityFrameStart" type="number" value="1" class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >End Frame</small>
          <input id="densityFrameEnd" type="number" class="form-control form-control-sm">
        </div>
        <div class="col-xs-3 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnSaveDensityPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="saveDensity()">
            Save Kernel Density Curve
          </button>
        </div>
      </div>
    </div> 
  </div>

  <div class="row mt-sm">
    <div class="col-sm-5 col-xs-12">
      <div class="row">
        <div class="col-xs-2 pr-0">
          <h6>Edge Detection</h6>
        </div>
        <div class="col-xs-1 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnPlotSobelPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="plotSobel()">
            Plot
          </button>
        </div>

        <div class="col-xs-1 p-0">
          <small >Start Frame</small>
          <input id="sobelFrameStart" type="number" value="1" class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >End Frame</small>
          <input id="sobelFrameEnd" type="number" class="form-control form-control-sm">
        </div>
        <div class="col-xs-3 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnSaveSobelPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="saveSobel()">
            Save Edge Detection Plot
          </button>
        </div>
      </div>
    </div> 
  </div>

  <div class="row mt-sm">
    <div class="col-sm-5 col-xs-12">
      <div class="row">
        <div class="col-xs-2 pr-0">
          <h6>Median Filter</h6>
        </div>
        <div class="col-xs-1 p-0">
          <small >Kernel Size</small>
          <input id="sizeFilterMedian" type="number" value="3"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnPlotSpecklePP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="plotSpeckle()">
            Plot
          </button>
        </div>

        <div class="col-xs-1 p-0">
          <small >Start Frame</small>
          <input id="speckleFrameStart" type="number" value="1" class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >End Frame</small>
          <input id="speckleFrameEnd" type="number" class="form-control form-control-sm">
        </div>
        <div class="col-xs-3 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnSaveSpecklePP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="saveSpeckle()">
            Save Median Filter Plot
          </button>
        </div>
      </div>
    </div> 
  </div>

  <div class="row mt-sm">
    <div class="col-sm-5 col-xs-12">
      <div class="row">
        <div class="col-xs-2 pr-0">
          <h6>Gaussian Smoothening</h6>
        </div>
        <div class="col-xs-2 p-0">
          <small >Stadard Deviation</small>
          <input id="sigmaVal" type="number" value="1"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnPlotGaussianPP" type="button" class="btn btn-sm btn-primary w-100" value="1"
              onclick="plotGaussian()">
            Plot
          </button>
        </div>

        <div class="col-xs-1 p-0">
          <small >Start Frame</small>
          <input id="gaussianFrameStart" type="number" value="1" class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >End Frame</small>
          <input id="gaussianFrameEnd" type="number" class="form-control form-control-sm">
        </div>
        <div class="col-xs-4 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnSaveGaussianPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="saveGaussian()">
            Save Gaussian Smoothening Plot
          </button>
        </div>
      </div>
    </div> 
  </div>

  <div class="row mt-sm">
    <div class="col-sm-5 col-xs-12">
      <div class="row">
        <div class="col-xs-2 pr-0">
          <h6>Frame Differencing</h6>
        </div>
        <div class="col-xs-1 p-0">
          <small >Lag/Offset</small>
          <input id="lagOffset" type="number" value="0"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnPlotFrameDifferencingPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="plotFrameDifferencing()">
            Plot
          </button>
        </div>

        <div class="col-xs-1 p-0">
          <small >Start Frame</small>
          <input id="framediffFrameStart" type="number" value="1" class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >End Frame</small>
          <input id="framediffFrameEnd" type="number" class="form-control form-control-sm">
        </div>
        <div class="col-xs-3 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnSaveFrameDifferencingPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="saveFrameDifferencing()">
            Save Frame Differencing Plot
          </button>
        </div>
      </div>
    </div> 
  </div>

  <!-- <div class="row mt-sm">
    <div class="col-sm-5 col-xs-12">
      <div class="row">
        <div class="col-xs-2 pr-0">
          <h6>Histogram Equalization</h6>
        </div>
        <div class="col-xs-1 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button type="button" class="btn btn-sm btn-primary w-100"
              onclick="plotHistEqual()">
            Plot
          </button>
        </div>
      </div>
    </div> 
  </div> -->

  <div class="row mt-sm">
    <hr/>
    <h6>Plots for range of frames:</h6>
  </div>

  <div class="row mt-sm">
    <div class="col-sm-5 col-xs-12">
      <div class="row">
        <div class="col-xs-2 pr-0">
          <h6>Pixel Plot</h6>
        </div>
        <div class="col-xs-1 p-0">
          <small >Start Frame</small>
          <input id="pixelFrameStart" type="number" value="1"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >End Frame</small>
          <input id="pixelFrameEnd" type="number"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >x</small>
          <input id="pixelX" type="number" value="64"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >y</small>
          <input id="pixelY" type="number" value="64"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnPlotPixelPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="plotPixel()">
            Plot
          </button>
        </div>
        <div class="col-xs-3 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnSavePixelPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="savePixel()">
            Save Pixel Plot
          </button>
        </div>
      </div>
    </div> 
  </div>
  


  <div class="row mt-sm">
    <div class="col-sm-5 col-xs-12">
      <div class="row">
        <div class="col-xs-2 pr-0">
          <h6>Line Plot</h6>
        </div>
        <div class="col-xs-1 p-0">
          <small >FrameNum</small>
          <input id="frameNum" type="number" value="1"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >row/column</small>
          <input id="axis" type="text"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >Index</small>
          <input id="index" type="number" value="1"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnPlotLinePP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="plotLinePlot()">
            Plot
          </button>
        </div>
        <div class="col-xs-1 p-0">
          <small >Start Frame</small>
          <input id="lineFrameStart" type="number" value="1" class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >End Frame</small>
          <input id="lineFrameEnd" type="number" class="form-control form-control-sm">
        </div>
        <div class="col-xs-2 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnSaveLinePP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="saveLinePlot()">
            Save Line Plot
          </button>
        </div>
      </div>
    </div> 
  </div>




  <div class="row mt-sm">
    <div class="col-sm-5 col-xs-12">
      <div class="row">
        <div class="col-xs-2 pr-0">
          <h6>Stacking Plot</h6>
        </div>
        <div class="col-xs-1 p-0">
          <small >Start Frame</small>
          <input id="stackingFrameStart" type="number" value="1"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 p-0">
          <small >End Frame</small>
          <input id="stackingFrameEnd" type="number"
              class="form-control form-control-sm">
        </div>
        <div class="col-xs-1 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnPlotStackingPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="plotStacking()">
            Plot
          </button>
        </div>
        <div class="col-xs-3 pl-0">
          <p class="small mb-0">&nbsp;</p>
          <button id="btnSaveStackingPP" type="button" class="btn btn-sm btn-primary w-100"
              onclick="saveStacking()">
            Save Stacking Plot
          </button>
        </div>
      </div>
    </div> 
  </div>


{% endblock %}

{% block scripts %}

  <script >
    $(document).ready(() => {
      let socket = io();

      // Replay
      socket.on("plotleft", (object) => {
        $("#leftImg").attr(
          "src",
          object.data
              ? data:image/png;base64,${object.data}
              : ""
        );
      });

      socket.on("plotright", (object) => {
        $("#rightImg").attr(
          "src",
          object.data
              ? data:image/png;base64,${object.data}
              : ""
        );
      });

      
      $("#computationType").change(() => {
        const selectedType = $("#computationType").val();
        if (selectedType === "Reflection coefficient") {
          $("#vminVal").val(0.5);
          $("#vmaxVal").val(1.3);
          $("#leftImgTitle").val("Reflection coefficient : 2D Map");
          $("#histogramVmax").val(1.3);
          $("#histogramVmin").val(0.5);
        }
        else if (selectedType === "Magnitude") {
          $("#vminVal").val(-0.03);
          $("#vmaxVal").val(0.03);
          $("#leftImgTitle").val("Magnitude (Volts) : 2D Map");
          $("#histogramVmax").val(0.03);
          $("#histogramVmin").val(-0.03);
        }
        else if (selectedType === "Phase") {
          $("#vminVal").val(-0.3);
          $("#vmaxVal").val(0.3);
          $("#leftImgTitle").val("Unwrapped phase (Radians) : 2D Map");
          $("#histogramVmax").val(0.3);
          $("#histogramVmin").val(-0.3);
        }
        else if (selectedType === "Acoustic Impedance") {
          $("#vminVal").val(0);
          $("#vmaxVal").val(3);
          $("#leftImgTitle").val("Acoustic Impedance (MRayls) : 2D Map");
          $("#histogramVmax").val(3);
          $("#histogramVmin").val(0);
        }
        else if (selectedType === "In-Phase") {
          $("#vminVal").val(-0.06);
          $("#vmaxVal").val(0.06);
          $("#leftImgTitle").val("In-Phase (Volts) : 2D map");
          $("#histogramVmax").val(0.06);
          $("#histogramVmin").val(-0.06);
        }
        else if (selectedType === "Out-of-Phase") {
          $("#vminVal").val(-0.06);
          $("#vmaxVal").val(0.06);
          $("#leftImgTitle").val("Out-of-Phase (Volts) : 2D map");
          $("#histogramVmax").val(0.06);
          $("#histogramVmin").val(-0.06);
        }
      });
    });

    disableButtons = () => {
      $('#btnSelectDirectoryPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnPlotFramePP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnSaveFramePP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnPlotHistogramPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnSaveHistogramPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnPlotDensityPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnSaveDensityPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnPlotSobelPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnSaveSobelPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnPlotSpecklePP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnSaveSpecklePP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnPlotGaussianPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnSaveGaussianPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnPlotFrameDifferencingPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnSaveFrameDifferencingPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnPlotPixelPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnSavePixelPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnPlotLinePP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnSaveLinePP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnPlotStackingPP').prop('disabled', true).css({'opacity': '0.35'});
      $('#btnSaveStackingPP').prop('disabled', true).css({'opacity': '0.35'});
    }

    enableButtons = () => {
      $('#btnSelectDirectoryPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnPlotFramePP').prop('disabled', false).css({'opacity': '1'});
      $('#btnSaveFramePP').prop('disabled', false).css({'opacity': '1'});
      $('#btnPlotHistogramPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnSaveHistogramPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnPlotDensityPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnSaveDensityPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnPlotSobelPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnSaveSobelPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnPlotSpecklePP').prop('disabled', false).css({'opacity': '1'});
      $('#btnSaveSpecklePP').prop('disabled', false).css({'opacity': '1'});
      $('#btnPlotGaussianPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnSaveGaussianPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnPlotFrameDifferencingPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnSaveFrameDifferencingPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnPlotPixelPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnSavePixelPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnPlotLinePP').prop('disabled', false).css({'opacity': '1'});
      $('#btnSaveLinePP').prop('disabled', false).css({'opacity': '1'});
      $('#btnPlotStackingPP').prop('disabled', false).css({'opacity': '1'});
      $('#btnSaveStackingPP').prop('disabled', false).css({'opacity': '1'});
    }

    plotFrame = () => {
      $("body").addClass("loading-cursor");
      disableButtons(); 
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let frameNum = parseInt($("#frameNum").val());
      let vminVal = $("#vminVal").val();
      let vmaxVal = $("#vmaxVal").val();
      let leftImgTitle = $("#leftImgTitle").val();

      if (frameNum === 0) {
        frameNum = 1;
      }

      if (frameNum < 0 || frameNum > numFrames) {
        alertError("Frame " + frameNum + " not found. Check echo/no-echo folders for valid frame range")
        return;
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        frame_num: frameNum, 
        vmin_val: vminVal,
        vmax_val: vmaxVal,
        left_img_title: leftImgTitle
      };

      postRequest("postprocess_plotleft", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    saveFrames = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      const computationType = $("#computationType").val();
      const directory = $("#recording").val();
      const frameStart = parseInt($("#frameStart").val());
      const frameEnd = parseInt($("#frameEnd").val());
      const vminVal = $("#vminVal").val();
      const vmaxVal = $("#vmaxVal").val();
      const leftImgTitle = $("#leftImgTitle").val();

      if (frameStart === 0) {
        frameStart = 1;
      }

      if (frameStart < 0 || frameEnd > numFrames) {
        alertError("Frame " + frameNum + " not found. Check echo/no-echo folders for valid frame range");
        return;
      }

      const requestData = {
        computationType,
        directory,
        frameStart,
        frameEnd, 
        vminVal,
        vmaxVal,
        leftImgTitle
      };

      postRequest("postprocess_saveframes", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          } else {
            alert("Files successfully saved!")
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    plotHistogram = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let frameNum = parseInt($("#frameNum").val());
      let binNum = $('#binNum').val();
      let histogramVmax = $('#histogramVmax').val();
      let histogramVmin = $('#histogramVmin').val();

      if (frameNum === 0) {
        frameNum = 1;
      }

      if (frameNum < 0 || frameNum > numFrames) {
        alertError("Frame not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        frame_num: frameNum,
        bins: binNum,
        histogram_vmax: histogramVmax,
        histogram_vmin: histogramVmin
      };

      postRequest("postprocess_plot_hist_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    saveHistogram = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let histogramFrameStart = parseInt($("#histogramFrameStart").val());
      let histogramFrameEnd = parseInt($("#histogramFrameEnd").val());
      let binNum = $('#binNum').val();
      let histogramVmax = $('#histogramVmax').val();
      let histogramVmin = $('#histogramVmin').val();

      if (histogramFrameStart === 0) {
        histogramFrameStart = 1;
      }

      if (histogramFrameStart < 0 || histogramFrameEnd > numFrames) {
        alertError("Frame not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        histogram_frame_start: histogramFrameStart,
        histogram_frame_end: histogramFrameEnd,
        bins: binNum,
        histogram_vmax: histogramVmax,
        histogram_vmin: histogramVmin
      };

      postRequest("postprocess_save_hist_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          } else {
            alert("Files successfully saved!")
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    plotDensity = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let frameNum = parseInt($("#frameNum").val());
      let lambdaNum = $('#lambdaNum').val();

      if (frameNum === 0) {
        frameNum = 1;
      }

      if (frameNum < 0 || frameNum > numFrames) {
        alertError("Frame " + frameNum + " not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        frame_num: frameNum,
        lambda1: lambdaNum
      };

      postRequest("postprocess_plot_density_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    saveDensity = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let densityFrameStart = parseInt($("#densityFrameStart").val());
      let densityFrameEnd = parseInt($("#densityFrameEnd").val());
      let lambdaNum = $('#lambdaNum').val(); 
      
      if (densityFrameStart === 0) {
        densityFrameStart = 1;
      }

      if (densityFrameStart < 0 || densityFrameEnd > numFrames) {
        alertError("Frame not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        density_frame_start: densityFrameStart,
        density_frame_end: densityFrameEnd,
        lambda1: lambdaNum
      };

      postRequest("postprocess_save_density_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          } else {
            alert("Files successfully saved!")
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }
    
    plotSobel = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let frameNum = parseInt($("#frameNum").val());

      if (frameNum === 0) {
        frameNum = 1;
      }

      if (frameNum < 0 || frameNum > numFrames) {
        alertError("Frame " + frameNum + " not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        frame_num: frameNum,
      };

      postRequest("postprocess_plot_sobel_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    saveSobel = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let sobelFrameStart = parseInt($("#sobelFrameStart").val());
      let sobelFrameEnd = parseInt($("#sobelFrameEnd").val());

      if (sobelFrameStart === 0) {
        sobelFrameStart = 1;
      }

      if (sobelFrameStart < 0 || sobelFrameEnd > numFrames) {
        alertError("Frame not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        sobel_frame_start: sobelFrameStart,
        sobel_frame_end: sobelFrameEnd,
      };

      postRequest("postprocess_save_sobel_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          } else {
            alert("Files successfully saved!")
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    plotSpeckle = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let frameNum = parseInt($("#frameNum").val());
      let sizeFilterMedian = $('#sizeFilterMedian').val();

      if (frameNum === 0) {
        frameNum = 1;
      }

      if (frameNum < 0 || frameNum > numFrames) {
        alertError("Frame " + frameNum + " not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        frame_num: frameNum,
        size: sizeFilterMedian
      };

      postRequest("postprocess_plot_speckle_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    saveSpeckle = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let speckleFrameStart = parseInt($("#speckleFrameStart").val());
      let speckleFrameEnd = parseInt($("#speckleFrameEnd").val());
      let sizeFilterMedian = $('#sizeFilterMedian').val();

      if (speckleFrameStart === 0) {
        speckleFrameStart = 1;
      }

      if (speckleFrameStart < 0 || speckleFrameEnd > numFrames) {
        alertError("Frame not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        speckle_frame_start: speckleFrameStart,
        speckle_frame_end: speckleFrameEnd,
        size: sizeFilterMedian
      };

      postRequest("postprocess_save_speckle_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          } else {
            alert("Files successfully saved!")
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    plotGaussian = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let frameNum = parseInt($("#frameNum").val());
      let sigmaVal = $('#sigmaVal').val();

      if (frameNum === 0) {
        frameNum = 1;
      }

      if (frameNum < 0 || frameNum > numFrames) {
        alertError("Frame " + frameNum + " not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        frame_num: frameNum,
        sigma: sigmaVal
      };

      postRequest("postprocess_plot_gaussian_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    saveGaussian = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let gaussianFrameStart = parseInt($("#gaussianFrameStart").val());
      let gaussianFrameEnd = parseInt($("#gaussianFrameEnd").val());
      let sigmaVal = $('#sigmaVal').val();

      if (gaussianFrameStart === 0) {
        gaussianFrameStart = 1;
      }

      if (gaussianFrameStart < 0 || gaussianFrameEnd > numFrames) {
        alertError("Frame not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        gaussian_frame_start: gaussianFrameStart,
        gaussian_frame_end: gaussianFrameEnd,
        sigma: sigmaVal
      };

      postRequest("postprocess_save_gaussian_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          } else {
            alert("Files successfully saved!")
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    plotFrameDifferencing = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let frameNum = parseInt($("#frameNum").val());
      let lagOffset = $('#lagOffset').val();

      if (frameNum === 0) {
        frameNum = 1;
      }

      if (frameNum < 0 || frameNum > numFrames) {
        alertError("Frame " + frameNum + " not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        frame_num: frameNum,
        lag_offset: lagOffset
      };


      postRequest("postprocess_plot_framediff_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    saveFrameDifferencing = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let framediffFrameStart = parseInt($("#framediffFrameStart").val());
      let framediffFrameEnd = parseInt($("#framediffFrameEnd").val());
      let lagOffset = $('#lagOffset').val();

      if (framediffFrameStart === 0) {
        framediffFrameStart = 1;
      }

      if (framediffFrameStart < 0 || framediffFrameEnd > numFrames) {
        alertError("Frame not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        framediff_frame_start: framediffFrameStart,
        framediff_frame_end: framediffFrameEnd,
        lag_offset: lagOffset
      };

      postRequest("postprocess_save_framediff_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          } else {
            alert("Files successfully saved!")
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    plotPixel = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let pixelFrameStart = parseInt($("#pixelFrameStart").val());
      let pixelFrameEnd = parseInt($("#pixelFrameEnd").val());
      let pixelPointX = $("#pixelX").val();
      let pixelPointY = $("#pixelY").val();

      if (pixelFrameStart === 0) {
        pixelFrameStart = 1;
      }

      if (pixelFrameStart < 0 || pixelFrameEnd > numFrames) {
        alertError("Frame not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        pixel_frame_start: pixelFrameStart,
        pixel_frame_end: pixelFrameEnd,
        pixel_x: pixelPointX,
        pixel_y: pixelPointY,
      };

      postRequest("postprocess_plot_pixel_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    savePixel = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let pixelFrameStart = parseInt($("#pixelFrameStart").val());
      let pixelFrameEnd = parseInt($("#pixelFrameEnd").val());
      let pixelPointX = $("#pixelX").val();
      let pixelPointY = $("#pixelY").val();

      if (pixelFrameStart < 0 || pixelFrameEnd > numFrames) {
        alertError("Frame not found. Check echo/no-echo folders for valid frame range")
        return
      }

      if (pixelFrameStart === 0) {
        pixelFrameStart = 1;
      }

      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        pixel_frame_start: pixelFrameStart,
        pixel_frame_end: pixelFrameEnd,
        pixel_x: pixelPointX,
        pixel_y: pixelPointY
      };

      postRequest("postprocess_save_pixel_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          } else {
            alert("Files successfully saved!")
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    plotStacking = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let stackingFrameStart = parseInt($("#stackingFrameStart").val());
      let stackingFrameEnd = parseInt($("#stackingFrameEnd").val());

      if (stackingFrameStart === 0) {
        stackingFrameStart = 1;
      }

      if (stackingFrameStart < 0 || stackingFrameEnd > numFrames) {
        alertError("Frame not found. Check echo/no-echo folders for valid frame range")
        return
      }
      
      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        stacking_frame_start: stackingFrameStart,
        stacking_frame_end: stackingFrameEnd,
      };

      postRequest("postprocess_plot_stacking_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    saveStacking = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let computationType = $("#computationType").val();
      let directory = $("#recording").val();
      let stackingFrameStart = parseInt($("#stackingFrameStart").val());
      let stackingFrameEnd = parseInt($("#stackingFrameEnd").val());

      if (stackingFrameStart === 0) {
        stackingFrameStart = 1;
      }

      if (stackingFrameStart < 0 || stackingFrameEnd > numFrames) {
        alertError("Frame not found. Check echo/no-echo folders for valid frame range")
        return
      }
      
      let requestData = {
        computation_type: computationType,
        directory_name: directory,
        stacking_frame_start: stackingFrameStart,
        stacking_frame_end: stackingFrameEnd,
      };

      postRequest("postprocess_save_stacking_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    let numFrames;

    selectDirectory = () => {
        postRequest("selectdirectory")
          .then((response) => {
            if (response.status == 500) {
            alertError(response.message);
          } else if (response.directory_path) {
            $("#recording").val(response.directory_path);
            if (response.num_frames !== undefined) {
              numFrames = response.num_frames;
            }
            $("#frameNum").val(numFrames);
            $("#frameEnd").val(numFrames);
            $("#stackingFrameEnd").val(numFrames);
            $("#pixelFrameEnd").val(numFrames);
            $("#histogramFrameEnd").val(numFrames);
            $("#densityFrameEnd").val(numFrames);
            $("#gaussianFrameEnd").val(numFrames);
            $("#speckleFrameEnd").val(numFrames);
            $("#sobelFrameEnd").val(numFrames);
            $('#framediffFrameEnd').val(numFrames);
          }
          })
          .catch((error) => {
            alertError(error);
          })
    }


    plotLinePlot = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let directory = $("#recording").val();
      let frameNum = $("#frameNum").val();
      let axis = $("#axis").val();
      let index = $("#index").val();


      let requestData = {
        directory_name: directory,
        frame_num: frameNum,
        axis: axis,
        index: index,
      };

      postRequest("postprocess_lineplot_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }

    saveLinePlot = () => {
      $("body").addClass("loading-cursor");
      disableButtons();
      let directory = $("#recording").val();
      let frameNum = $("#frameNum").val();
      let axis = $("#axis").val();
      let index = $("#index").val();
      let lineFrameStart = parseInt($("#lineFrameStart").val());
      let lineFrameEnd = parseInt($("#lineFrameEnd").val());

      if (lineFrameStart === 0) {
        lineFrameStart = 1;
      }

      if (lineFrameStart < 0 || lineFrameEnd > numFrames) {
        alertError("Frame not found. Check echo/no-echo folders for valid frame range")
        return
      }

      let requestData = {
        directory_name: directory,
        frame_num: frameNum,
        axis: axis,
        index: index,
        line_frame_start: lineFrameStart,
        line_frame_end: lineFrameEnd,
      };

      postRequest("postprocess_save_lineplot_right", requestData)
        .then((response) => {
          $("body").removeClass("loading-cursor");
          if (response.status == 500) {
            alertError(response.message);
          } else {
            alert("Files successfully saved!")
          }
        })
        .catch((error) => {
          $("body").removeClass("loading-cursor");
          alertError(error)
        })
        .finally(() => {
          enableButtons();
        });
    }






  </script>

{% endblock %}




"""
Expose each GPU devices directly.

This module implements a API that is like the "CUDA runtime" context manager
for managing CUDA context stack and clean up.  It relies on thread-local globals
to separate the context stack management of each thread. Contexts are also
shareable among threads.  Only the main thread can destroy Contexts.

Note:
- This module must be imported by the main-thread.

"""
import functools
import threading
from contextlib import contextmanager

from .driver import driver, USE_NV_BINDING


class _DeviceList(object):
    def __getattr__(self, attr):
        # First time looking at "lst" attribute.
        if attr == "lst":
            # Device list is not initialized.
            # Query all CUDA devices.
            numdev = driver.get_device_count()
            gpus = [_DeviceContextManager(driver.get_device(devid))
                    for devid in range(numdev)]
            # Define "lst" to avoid re-initialization
            self.lst = gpus
            return gpus

        # Other attributes
        return super(_DeviceList, self).__getattr__(attr)

    def __getitem__(self, devnum):
        '''
        Returns the context manager for device *devnum*.
        '''
        return self.lst[devnum]

    def __str__(self):
        return ', '.join([str(d) for d in self.lst])

    def __iter__(self):
        return iter(self.lst)

    def __len__(self):
        return len(self.lst)

    @property
    def current(self):
        """Returns the active device or None if there's no active device
        """
        with driver.get_active_context() as ac:
            devnum = ac.devnum
            if devnum is not None:
                return self[devnum]


class _DeviceContextManager(object):
    """
    Provides a context manager for executing in the context of the chosen
    device. The normal use of instances of this type is from
    `numba.cuda.gpus. For example, to execute on device 2::

       with numba.cuda.gpus[2]:
           d_a = numba.cuda.to_device(a)

    to copy the array *a* onto device 2, referred to by *d_a*.
    """

    def __init__(self, device):
        self._device = device

    def __getattr__(self, item):
        return getattr(self._device, item)

    def __enter__(self):
        _runtime.get_or_create_context(self._device.id)

    def __exit__(self, exc_type, exc_val, exc_tb):
        # this will verify that we are popping the right device context.
        self._device.get_primary_context().pop()

    def __str__(self):
        return "<Managed Device {self.id}>".format(self=self)


class _Runtime(object):
    """Emulate the CUDA runtime context management.

    It owns all Devices and Contexts.
    Keeps at most one Context per Device
    """

    def __init__(self):
        self.gpus = _DeviceList()

        # For caching the attached CUDA Context
        self._tls = threading.local()

        # Remember the main thread
        # Only the main thread can *actually* destroy
        self._mainthread = threading.current_thread()

        # Avoid mutation of runtime state in multithreaded programs
        self._lock = threading.RLock()

    @contextmanager
    def ensure_context(self):
        """Ensure a CUDA context is available inside the context.

        On entrance, queries the CUDA driver for an active CUDA context and
        attaches it in TLS for subsequent calls so they do not need to query
        the CUDA driver again.  On exit, detach the CUDA context from the TLS.

        This will allow us to pickup thirdparty activated CUDA context in
        any top-level Numba CUDA API.
        """
        with driver.get_active_context():
            oldctx = self._get_attached_context()
            newctx = self.get_or_create_context(None)
            self._set_attached_context(newctx)
            try:
                yield
            finally:
                self._set_attached_context(oldctx)

    def get_or_create_context(self, devnum):
        """Returns the primary context and push+create it if needed
        for *devnum*.  If *devnum* is None, use the active CUDA context (must
        be primary) or create a new one with `devnum=0.
        """
        if devnum is None:
            attached_ctx = self._get_attached_context()
            if attached_ctx is None:
                return self._get_or_create_context_uncached(devnum)
            else:
                return attached_ctx
        else:
            if USE_NV_BINDING:
                devnum = int(devnum)
            return self._activate_context_for(devnum)

    def _get_or_create_context_uncached(self, devnum):
        """See also `get_or_create_context(devnum).
        This version does not read the cache.
        """
        with self._lock:
            # Try to get the active context in the CUDA stack or
            # activate GPU-0 with the primary context
            with driver.get_active_context() as ac:
                if not ac:
                    return self._activate_context_for(0)
                else:
                    # Get primary context for the active device
                    ctx = self.gpus[ac.devnum].get_primary_context()
                    # Is active context the primary context?
                    if USE_NV_BINDING:
                        ctx_handle = int(ctx.handle)
                        ac_ctx_handle = int(ac.context_handle)
                    else:
                        ctx_handle = ctx.handle.value
                        ac_ctx_handle = ac.context_handle.value
                    if ctx_handle != ac_ctx_handle:
                        msg = ('Numba cannot operate on non-primary'
                               ' CUDA context {:x}')
                        raise RuntimeError(msg.format(ac_ctx_handle))
                    # Ensure the context is ready
                    ctx.prepare_for_use()
                return ctx

    def _activate_context_for(self, devnum):
        with self._lock:
            gpu = self.gpus[devnum]
            newctx = gpu.get_primary_context()
            # Detect unexpected context switch
            cached_ctx = self._get_attached_context()
            if cached_ctx is not None and cached_ctx is not newctx:
                raise RuntimeError('Cannot switch CUDA-context.')
            newctx.push()
            return newctx

    def _get_attached_context(self):
        return getattr(self._tls, 'attached_context', None)

    def _set_attached_context(self, ctx):
        self._tls.attached_context = ctx

    def reset(self):
        """Clear all contexts in the thread.  Destroy the context if and only
        if we are in the main thread.
        """
        # Pop all active context.
        while driver.pop_active_context() is not None:
            pass

        # If it is the main thread
        if threading.current_thread() == self._mainthread:
            self._destroy_all_contexts()

    def _destroy_all_contexts(self):
        # Reset all devices
        for gpu in self.gpus:
            gpu.reset()


_runtime = _Runtime()

# ================================ PUBLIC API ================================

gpus = _runtime.gpus


def get_context(devnum=None):
    """Get the current device or use a device by device number, and
    return the CUDA context.
    """
    return _runtime.get_or_create_context(devnum)


def require_context(fn):
    """
    A decorator that ensures a CUDA context is available when *fn* is executed.

    Note: The function *fn* cannot switch CUDA-context.
    """
    @functools.wraps(fn)
    def _require_cuda_context(*args, **kws):
        with _runtime.ensure_context():
            return fn(*args, **kws)

    return _require_cuda_context


def reset():
    """Reset the CUDA subsystem for the current thread.

    In the main thread:
    This removes all CUDA contexts.  Only use this at shutdown or for
    cleaning up between tests.

    In non-main threads:
    This clear the CUDA context stack only.

    """
    _runtime.reset()



is there anything in this that helps tell why the application is a windows app and not a web app?