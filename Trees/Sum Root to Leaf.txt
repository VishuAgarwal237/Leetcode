Idea is to multuply by 10 and add the node val each time instead of reaching leaf first and then adding that to total
1. if not root, then the sum is 0
2. Recursive helper function:
    Checks that if node is null, then return 0
    Else, the node we are at is valid so in order to add that value to the current sum, multiply current sum by 10 and then add the node value
    Check if the node is a leaf, then we reached the end for this path and add this current sum to the total sum and return nothing to stop
    Else, we continue by calling the recursive calls ont he left and right subtrees and pass in the current sum
3. call dfs on the root
4. return sums
    
    
    
    
    
    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        sums = 0
        if not root: 
            return 0

        def s(node, currSum):
            nonlocal sums
            if not node:
                return 0
            currSum = currSum * 10 + node.val
            if not node.left and not node.right:
                sums = sums + currSum
                return 
            s(node.left, currSum)
            s(node.right, currSum)
        s(root, 0)
        return sums