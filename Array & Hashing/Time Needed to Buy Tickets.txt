Initution is that we add all smaller values ahead of k in the queue, or just up to k for all larger values ahead of k,
but for all values after k in the queue, we add all smaller values than tickets[k]-1 behind k, or just up to k for all larger values than tickets[k]-1 ahead of k

1. count = 0
2. loop through tickets
3. if we are ahead of k, so the index less than k, add all smaller values, or just up to k for all larger values 
    else we are behind k, so add all smaller values than tickets[k]-1 or tickets[k]-1 for all larger values
    (tickets[k]-1 because we need to account for the fact that k has just bought a ticker before they go)
4. return count




class Solution:
    def timeRequiredToBuy(self, tickets: List[int], k: int) -> int:
        
        count = 0
        for i in range(len(tickets)):
            if i <= k:
                count = count + min(tickets[k], tickets[i])
            else:
                count = count + min(tickets[k]-1, tickets[i])
        return count